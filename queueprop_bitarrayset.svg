<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1014" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="997.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="997.00"> </text><svg id="frames" x="10" width="1180" total_samples="2767"><g><title>wfc::wfc::rules::get_pipe_dir_rules::{{closure}} (1 samples, 0.04%)</title><rect x="0.0000%" y="293" width="0.0361%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>wfc::wfc::rules::get_pipes_rules (2 samples, 0.07%)</title><rect x="0.0000%" y="661" width="0.0723%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.07%)</title><rect x="0.0000%" y="645" width="0.0723%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="2"/><text x="0.2500%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 0.07%)</title><rect x="0.0000%" y="629" width="0.0723%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="2"/><text x="0.2500%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.07%)</title><rect x="0.0000%" y="613" width="0.0723%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="2"/><text x="0.2500%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 0.07%)</title><rect x="0.0000%" y="597" width="0.0723%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="2"/><text x="0.2500%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.07%)</title><rect x="0.0000%" y="581" width="0.0723%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="2"/><text x="0.2500%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2 samples, 0.07%)</title><rect x="0.0000%" y="565" width="0.0723%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="2"/><text x="0.2500%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.07%)</title><rect x="0.0000%" y="549" width="0.0723%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="2"/><text x="0.2500%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.07%)</title><rect x="0.0000%" y="533" width="0.0723%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="2"/><text x="0.2500%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.07%)</title><rect x="0.0000%" y="517" width="0.0723%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="2"/><text x="0.2500%" y="527.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2 samples, 0.07%)</title><rect x="0.0000%" y="501" width="0.0723%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="2"/><text x="0.2500%" y="511.50"></text></g><g><title>wfc::wfc::rules::get_pipes_rules::{{closure}} (2 samples, 0.07%)</title><rect x="0.0000%" y="485" width="0.0723%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="2"/><text x="0.2500%" y="495.50"></text></g><g><title>wfc::wfc::rules::get_pipe_rules (2 samples, 0.07%)</title><rect x="0.0000%" y="469" width="0.0723%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="2"/><text x="0.2500%" y="479.50"></text></g><g><title>wfc::wfc::rules::get_pipe_dir_rules (2 samples, 0.07%)</title><rect x="0.0000%" y="453" width="0.0723%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="2"/><text x="0.2500%" y="463.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 0.07%)</title><rect x="0.0000%" y="437" width="0.0723%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="2"/><text x="0.2500%" y="447.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2 samples, 0.07%)</title><rect x="0.0000%" y="421" width="0.0723%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="2"/><text x="0.2500%" y="431.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2 samples, 0.07%)</title><rect x="0.0000%" y="405" width="0.0723%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="2"/><text x="0.2500%" y="415.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (2 samples, 0.07%)</title><rect x="0.0000%" y="389" width="0.0723%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="2"/><text x="0.2500%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.07%)</title><rect x="0.0000%" y="373" width="0.0723%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="2"/><text x="0.2500%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.07%)</title><rect x="0.0000%" y="357" width="0.0723%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="2"/><text x="0.2500%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.07%)</title><rect x="0.0000%" y="341" width="0.0723%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="2"/><text x="0.2500%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.07%)</title><rect x="0.0000%" y="325" width="0.0723%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="2"/><text x="0.2500%" y="335.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::{{closure}} (2 samples, 0.07%)</title><rect x="0.0000%" y="309" width="0.0723%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="2"/><text x="0.2500%" y="319.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.04%)</title><rect x="0.0361%" y="293" width="0.0361%" height="15" fill="rgb(241,131,45)" fg:x="1" fg:w="1"/><text x="0.2861%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.04%)</title><rect x="0.0361%" y="277" width="0.0361%" height="15" fill="rgb(249,31,29)" fg:x="1" fg:w="1"/><text x="0.2861%" y="287.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (1 samples, 0.04%)</title><rect x="0.0361%" y="261" width="0.0361%" height="15" fill="rgb(225,111,53)" fg:x="1" fg:w="1"/><text x="0.2861%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.04%)</title><rect x="0.0361%" y="245" width="0.0361%" height="15" fill="rgb(238,160,17)" fg:x="1" fg:w="1"/><text x="0.2861%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.04%)</title><rect x="0.0361%" y="229" width="0.0361%" height="15" fill="rgb(214,148,48)" fg:x="1" fg:w="1"/><text x="0.2861%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.04%)</title><rect x="0.0361%" y="213" width="0.0361%" height="15" fill="rgb(232,36,49)" fg:x="1" fg:w="1"/><text x="0.2861%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.04%)</title><rect x="0.0361%" y="197" width="0.0361%" height="15" fill="rgb(209,103,24)" fg:x="1" fg:w="1"/><text x="0.2861%" y="207.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.04%)</title><rect x="0.0361%" y="181" width="0.0361%" height="15" fill="rgb(229,88,8)" fg:x="1" fg:w="1"/><text x="0.2861%" y="191.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="0.0361%" y="165" width="0.0361%" height="15" fill="rgb(213,181,19)" fg:x="1" fg:w="1"/><text x="0.2861%" y="175.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="0.0361%" y="149" width="0.0361%" height="15" fill="rgb(254,191,54)" fg:x="1" fg:w="1"/><text x="0.2861%" y="159.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.04%)</title><rect x="0.0361%" y="133" width="0.0361%" height="15" fill="rgb(241,83,37)" fg:x="1" fg:w="1"/><text x="0.2861%" y="143.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.04%)</title><rect x="0.0361%" y="117" width="0.0361%" height="15" fill="rgb(233,36,39)" fg:x="1" fg:w="1"/><text x="0.2861%" y="127.50"></text></g><g><title>run_timer_softirq (1 samples, 0.04%)</title><rect x="0.0361%" y="101" width="0.0361%" height="15" fill="rgb(226,3,54)" fg:x="1" fg:w="1"/><text x="0.2861%" y="111.50"></text></g><g><title>__run_timers.part.0 (1 samples, 0.04%)</title><rect x="0.0361%" y="85" width="0.0361%" height="15" fill="rgb(245,192,40)" fg:x="1" fg:w="1"/><text x="0.2861%" y="95.50"></text></g><g><title>call_timer_fn (1 samples, 0.04%)</title><rect x="0.0361%" y="69" width="0.0361%" height="15" fill="rgb(238,167,29)" fg:x="1" fg:w="1"/><text x="0.2861%" y="79.50"></text></g><g><title>vbg_heartbeat_timer (1 samples, 0.04%)</title><rect x="0.0361%" y="53" width="0.0361%" height="15" fill="rgb(232,182,51)" fg:x="1" fg:w="1"/><text x="0.2861%" y="63.50"></text></g><g><title>vbg_req_perform (1 samples, 0.04%)</title><rect x="0.0361%" y="37" width="0.0361%" height="15" fill="rgb(231,60,39)" fg:x="1" fg:w="1"/><text x="0.2861%" y="47.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (1 samples, 0.04%)</title><rect x="0.0723%" y="565" width="0.0361%" height="15" fill="rgb(208,69,12)" fg:x="2" fg:w="1"/><text x="0.3223%" y="575.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.04%)</title><rect x="0.0723%" y="549" width="0.0361%" height="15" fill="rgb(235,93,37)" fg:x="2" fg:w="1"/><text x="0.3223%" y="559.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.04%)</title><rect x="0.0723%" y="533" width="0.0361%" height="15" fill="rgb(213,116,39)" fg:x="2" fg:w="1"/><text x="0.3223%" y="543.50"></text></g><g><title>asm_common_interrupt (11 samples, 0.40%)</title><rect x="0.1084%" y="293" width="0.3975%" height="15" fill="rgb(222,207,29)" fg:x="3" fg:w="11"/><text x="0.3584%" y="303.50"></text></g><g><title>common_interrupt (11 samples, 0.40%)</title><rect x="0.1084%" y="277" width="0.3975%" height="15" fill="rgb(206,96,30)" fg:x="3" fg:w="11"/><text x="0.3584%" y="287.50"></text></g><g><title>irq_exit_rcu (11 samples, 0.40%)</title><rect x="0.1084%" y="261" width="0.3975%" height="15" fill="rgb(218,138,4)" fg:x="3" fg:w="11"/><text x="0.3584%" y="271.50"></text></g><g><title>__softirqentry_text_start (11 samples, 0.40%)</title><rect x="0.1084%" y="245" width="0.3975%" height="15" fill="rgb(250,191,14)" fg:x="3" fg:w="11"/><text x="0.3584%" y="255.50"></text></g><g><title>syscall_exit_to_user_mode (46 samples, 1.66%)</title><rect x="0.1084%" y="389" width="1.6625%" height="15" fill="rgb(239,60,40)" fg:x="3" fg:w="46"/><text x="0.3584%" y="399.50"></text></g><g><title>exit_to_user_mode_prepare (46 samples, 1.66%)</title><rect x="0.1084%" y="373" width="1.6625%" height="15" fill="rgb(206,27,48)" fg:x="3" fg:w="46"/><text x="0.3584%" y="383.50"></text></g><g><title>exit_to_user_mode_loop (46 samples, 1.66%)</title><rect x="0.1084%" y="357" width="1.6625%" height="15" fill="rgb(225,35,8)" fg:x="3" fg:w="46"/><text x="0.3584%" y="367.50"></text></g><g><title>schedule (46 samples, 1.66%)</title><rect x="0.1084%" y="341" width="1.6625%" height="15" fill="rgb(250,213,24)" fg:x="3" fg:w="46"/><text x="0.3584%" y="351.50"></text></g><g><title>__schedule (46 samples, 1.66%)</title><rect x="0.1084%" y="325" width="1.6625%" height="15" fill="rgb(247,123,22)" fg:x="3" fg:w="46"/><text x="0.3584%" y="335.50"></text></g><g><title>finish_task_switch.isra.0 (46 samples, 1.66%)</title><rect x="0.1084%" y="309" width="1.6625%" height="15" fill="rgb(231,138,38)" fg:x="3" fg:w="46"/><text x="0.3584%" y="319.50"></text></g><g><title>rw_verify_area (1 samples, 0.04%)</title><rect x="1.7709%" y="341" width="0.0361%" height="15" fill="rgb(231,145,46)" fg:x="49" fg:w="1"/><text x="2.0209%" y="351.50"></text></g><g><title>apparmor_file_permission (1 samples, 0.04%)</title><rect x="1.7709%" y="325" width="0.0361%" height="15" fill="rgb(251,118,11)" fg:x="49" fg:w="1"/><text x="2.0209%" y="335.50"></text></g><g><title>pty_write (1 samples, 0.04%)</title><rect x="1.8070%" y="261" width="0.0361%" height="15" fill="rgb(217,147,25)" fg:x="50" fg:w="1"/><text x="2.0570%" y="271.50"></text></g><g><title>queue_work_on (1 samples, 0.04%)</title><rect x="1.8432%" y="213" width="0.0361%" height="15" fill="rgb(247,81,37)" fg:x="51" fg:w="1"/><text x="2.0932%" y="223.50"></text></g><g><title>pty_write (3 samples, 0.11%)</title><rect x="1.8432%" y="245" width="0.1084%" height="15" fill="rgb(209,12,38)" fg:x="51" fg:w="3"/><text x="2.0932%" y="255.50"></text></g><g><title>tty_insert_flip_string_and_push_buffer (3 samples, 0.11%)</title><rect x="1.8432%" y="229" width="0.1084%" height="15" fill="rgb(227,1,9)" fg:x="51" fg:w="3"/><text x="2.0932%" y="239.50"></text></g><g><title>__lock_text_start (2 samples, 0.07%)</title><rect x="1.8793%" y="213" width="0.0723%" height="15" fill="rgb(248,47,43)" fg:x="52" fg:w="2"/><text x="2.1293%" y="223.50"></text></g><g><title>process_output_block (4 samples, 0.14%)</title><rect x="1.8432%" y="261" width="0.1446%" height="15" fill="rgb(221,10,30)" fg:x="51" fg:w="4"/><text x="2.0932%" y="271.50"></text></g><g><title>asm_common_interrupt (12 samples, 0.43%)</title><rect x="1.9877%" y="197" width="0.4337%" height="15" fill="rgb(210,229,1)" fg:x="55" fg:w="12"/><text x="2.2377%" y="207.50"></text></g><g><title>common_interrupt (12 samples, 0.43%)</title><rect x="1.9877%" y="181" width="0.4337%" height="15" fill="rgb(222,148,37)" fg:x="55" fg:w="12"/><text x="2.2377%" y="191.50"></text></g><g><title>irq_exit_rcu (12 samples, 0.43%)</title><rect x="1.9877%" y="165" width="0.4337%" height="15" fill="rgb(234,67,33)" fg:x="55" fg:w="12"/><text x="2.2377%" y="175.50"></text></g><g><title>__softirqentry_text_start (12 samples, 0.43%)</title><rect x="1.9877%" y="149" width="0.4337%" height="15" fill="rgb(247,98,35)" fg:x="55" fg:w="12"/><text x="2.2377%" y="159.50"></text></g><g><title>mutex_lock (41 samples, 1.48%)</title><rect x="1.9877%" y="261" width="1.4817%" height="15" fill="rgb(247,138,52)" fg:x="55" fg:w="41"/><text x="2.2377%" y="271.50"></text></g><g><title>__cond_resched (41 samples, 1.48%)</title><rect x="1.9877%" y="245" width="1.4817%" height="15" fill="rgb(213,79,30)" fg:x="55" fg:w="41"/><text x="2.2377%" y="255.50"></text></g><g><title>__schedule (41 samples, 1.48%)</title><rect x="1.9877%" y="229" width="1.4817%" height="15" fill="rgb(246,177,23)" fg:x="55" fg:w="41"/><text x="2.2377%" y="239.50"></text></g><g><title>finish_task_switch.isra.0 (41 samples, 1.48%)</title><rect x="1.9877%" y="213" width="1.4817%" height="15" fill="rgb(230,62,27)" fg:x="55" fg:w="41"/><text x="2.2377%" y="223.50"></text></g><g><title>n_tty_write (48 samples, 1.73%)</title><rect x="1.8070%" y="277" width="1.7347%" height="15" fill="rgb(216,154,8)" fg:x="50" fg:w="48"/><text x="2.0570%" y="287.50"></text></g><g><title>do_output_char (2 samples, 0.07%)</title><rect x="3.4695%" y="261" width="0.0723%" height="15" fill="rgb(244,35,45)" fg:x="96" fg:w="2"/><text x="3.7195%" y="271.50"></text></g><g><title>pty_write (2 samples, 0.07%)</title><rect x="3.4695%" y="245" width="0.0723%" height="15" fill="rgb(251,115,12)" fg:x="96" fg:w="2"/><text x="3.7195%" y="255.50"></text></g><g><title>tty_insert_flip_string_and_push_buffer (2 samples, 0.07%)</title><rect x="3.4695%" y="229" width="0.0723%" height="15" fill="rgb(240,54,50)" fg:x="96" fg:w="2"/><text x="3.7195%" y="239.50"></text></g><g><title>queue_work_on (2 samples, 0.07%)</title><rect x="3.4695%" y="213" width="0.0723%" height="15" fill="rgb(233,84,52)" fg:x="96" fg:w="2"/><text x="3.7195%" y="223.50"></text></g><g><title>new_sync_write (49 samples, 1.77%)</title><rect x="1.8070%" y="341" width="1.7709%" height="15" fill="rgb(207,117,47)" fg:x="50" fg:w="49"/><text x="2.0570%" y="351.50">n..</text></g><g><title>tty_write (49 samples, 1.77%)</title><rect x="1.8070%" y="325" width="1.7709%" height="15" fill="rgb(249,43,39)" fg:x="50" fg:w="49"/><text x="2.0570%" y="335.50">t..</text></g><g><title>file_tty_write.constprop.0 (49 samples, 1.77%)</title><rect x="1.8070%" y="309" width="1.7709%" height="15" fill="rgb(209,38,44)" fg:x="50" fg:w="49"/><text x="2.0570%" y="319.50">f..</text></g><g><title>do_tty_write (49 samples, 1.77%)</title><rect x="1.8070%" y="293" width="1.7709%" height="15" fill="rgb(236,212,23)" fg:x="50" fg:w="49"/><text x="2.0570%" y="303.50">d..</text></g><g><title>__check_object_size (1 samples, 0.04%)</title><rect x="3.5417%" y="277" width="0.0361%" height="15" fill="rgb(242,79,21)" fg:x="98" fg:w="1"/><text x="3.7917%" y="287.50"></text></g><g><title>__check_object_size.part.0 (1 samples, 0.04%)</title><rect x="3.5417%" y="261" width="0.0361%" height="15" fill="rgb(211,96,35)" fg:x="98" fg:w="1"/><text x="3.7917%" y="271.50"></text></g><g><title>__virt_addr_valid (1 samples, 0.04%)</title><rect x="3.5417%" y="245" width="0.0361%" height="15" fill="rgb(253,215,40)" fg:x="98" fg:w="1"/><text x="3.7917%" y="255.50"></text></g><g><title>write (97 samples, 3.51%)</title><rect x="0.1084%" y="437" width="3.5056%" height="15" fill="rgb(211,81,21)" fg:x="3" fg:w="97"/><text x="0.3584%" y="447.50">wri..</text></g><g><title>entry_SYSCALL_64_after_hwframe (97 samples, 3.51%)</title><rect x="0.1084%" y="421" width="3.5056%" height="15" fill="rgb(208,190,38)" fg:x="3" fg:w="97"/><text x="0.3584%" y="431.50">ent..</text></g><g><title>do_syscall_64 (97 samples, 3.51%)</title><rect x="0.1084%" y="405" width="3.5056%" height="15" fill="rgb(235,213,38)" fg:x="3" fg:w="97"/><text x="0.3584%" y="415.50">do_..</text></g><g><title>__x64_sys_write (51 samples, 1.84%)</title><rect x="1.7709%" y="389" width="1.8432%" height="15" fill="rgb(237,122,38)" fg:x="49" fg:w="51"/><text x="2.0209%" y="399.50">_..</text></g><g><title>ksys_write (51 samples, 1.84%)</title><rect x="1.7709%" y="373" width="1.8432%" height="15" fill="rgb(244,218,35)" fg:x="49" fg:w="51"/><text x="2.0209%" y="383.50">k..</text></g><g><title>vfs_write (51 samples, 1.84%)</title><rect x="1.7709%" y="357" width="1.8432%" height="15" fill="rgb(240,68,47)" fg:x="49" fg:w="51"/><text x="2.0209%" y="367.50">v..</text></g><g><title>std::io::stdio::_print (99 samples, 3.58%)</title><rect x="0.0723%" y="661" width="3.5779%" height="15" fill="rgb(210,16,53)" fg:x="2" fg:w="99"/><text x="0.3223%" y="671.50">std:..</text></g><g><title>std::io::stdio::print_to (99 samples, 3.58%)</title><rect x="0.0723%" y="645" width="3.5779%" height="15" fill="rgb(235,124,12)" fg:x="2" fg:w="99"/><text x="0.3223%" y="655.50">std:..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (99 samples, 3.58%)</title><rect x="0.0723%" y="629" width="3.5779%" height="15" fill="rgb(224,169,11)" fg:x="2" fg:w="99"/><text x="0.3223%" y="639.50">&lt;std..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (99 samples, 3.58%)</title><rect x="0.0723%" y="613" width="3.5779%" height="15" fill="rgb(250,166,2)" fg:x="2" fg:w="99"/><text x="0.3223%" y="623.50">&lt;&amp;st..</text></g><g><title>std::io::Write::write_fmt (99 samples, 3.58%)</title><rect x="0.0723%" y="597" width="3.5779%" height="15" fill="rgb(242,216,29)" fg:x="2" fg:w="99"/><text x="0.3223%" y="607.50">std:..</text></g><g><title>core::fmt::write (99 samples, 3.58%)</title><rect x="0.0723%" y="581" width="3.5779%" height="15" fill="rgb(230,116,27)" fg:x="2" fg:w="99"/><text x="0.3223%" y="591.50">core..</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (98 samples, 3.54%)</title><rect x="0.1084%" y="565" width="3.5417%" height="15" fill="rgb(228,99,48)" fg:x="3" fg:w="98"/><text x="0.3584%" y="575.50">&lt;std..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (98 samples, 3.54%)</title><rect x="0.1084%" y="549" width="3.5417%" height="15" fill="rgb(253,11,6)" fg:x="3" fg:w="98"/><text x="0.3584%" y="559.50">&lt;std..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (98 samples, 3.54%)</title><rect x="0.1084%" y="533" width="3.5417%" height="15" fill="rgb(247,143,39)" fg:x="3" fg:w="98"/><text x="0.3584%" y="543.50">&lt;std..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (98 samples, 3.54%)</title><rect x="0.1084%" y="517" width="3.5417%" height="15" fill="rgb(236,97,10)" fg:x="3" fg:w="98"/><text x="0.3584%" y="527.50">&lt;std..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (98 samples, 3.54%)</title><rect x="0.1084%" y="501" width="3.5417%" height="15" fill="rgb(233,208,19)" fg:x="3" fg:w="98"/><text x="0.3584%" y="511.50">std:..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (98 samples, 3.54%)</title><rect x="0.1084%" y="485" width="3.5417%" height="15" fill="rgb(216,164,2)" fg:x="3" fg:w="98"/><text x="0.3584%" y="495.50">&lt;std..</text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (98 samples, 3.54%)</title><rect x="0.1084%" y="469" width="3.5417%" height="15" fill="rgb(220,129,5)" fg:x="3" fg:w="98"/><text x="0.3584%" y="479.50">&lt;std..</text></g><g><title>std::sys::unix::fd::FileDesc::write (98 samples, 3.54%)</title><rect x="0.1084%" y="453" width="3.5417%" height="15" fill="rgb(242,17,10)" fg:x="3" fg:w="98"/><text x="0.3584%" y="463.50">std:..</text></g><g><title>std::sys::unix::cvt (1 samples, 0.04%)</title><rect x="3.6140%" y="437" width="0.0361%" height="15" fill="rgb(242,107,0)" fg:x="100" fg:w="1"/><text x="3.8640%" y="447.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="3.6502%" y="501" width="0.0361%" height="15" fill="rgb(251,28,31)" fg:x="101" fg:w="1"/><text x="3.9002%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;wfc::wfc::bits256_set::Bits256Set&gt;&gt; (4 samples, 0.14%)</title><rect x="3.6502%" y="597" width="0.1446%" height="15" fill="rgb(233,223,10)" fg:x="101" fg:w="4"/><text x="3.9002%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;wfc::wfc::bits256_set::Bits256Set&gt;&gt; (4 samples, 0.14%)</title><rect x="3.6502%" y="581" width="0.1446%" height="15" fill="rgb(215,21,27)" fg:x="101" fg:w="4"/><text x="3.9002%" y="591.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.14%)</title><rect x="3.6502%" y="565" width="0.1446%" height="15" fill="rgb(232,23,21)" fg:x="101" fg:w="4"/><text x="3.9002%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.14%)</title><rect x="3.6502%" y="549" width="0.1446%" height="15" fill="rgb(244,5,23)" fg:x="101" fg:w="4"/><text x="3.9002%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.14%)</title><rect x="3.6502%" y="533" width="0.1446%" height="15" fill="rgb(226,81,46)" fg:x="101" fg:w="4"/><text x="3.9002%" y="543.50"></text></g><g><title>free (4 samples, 0.14%)</title><rect x="3.6502%" y="517" width="0.1446%" height="15" fill="rgb(247,70,30)" fg:x="101" fg:w="4"/><text x="3.9002%" y="527.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::new_sum::{{closure}} (8 samples, 0.29%)</title><rect x="3.7947%" y="581" width="0.2891%" height="15" fill="rgb(212,68,19)" fg:x="105" fg:w="8"/><text x="4.0447%" y="591.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="4.0838%" y="581" width="0.0361%" height="15" fill="rgb(240,187,13)" fg:x="113" fg:w="1"/><text x="4.3338%" y="591.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::new_sum (15 samples, 0.54%)</title><rect x="3.6502%" y="613" width="0.5421%" height="15" fill="rgb(223,113,26)" fg:x="101" fg:w="15"/><text x="3.9002%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (11 samples, 0.40%)</title><rect x="3.7947%" y="597" width="0.3975%" height="15" fill="rgb(206,192,2)" fg:x="105" fg:w="11"/><text x="4.0447%" y="607.50"></text></g><g><title>malloc (2 samples, 0.07%)</title><rect x="4.1923%" y="421" width="0.0723%" height="15" fill="rgb(241,108,4)" fg:x="116" fg:w="2"/><text x="4.4423%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (6 samples, 0.22%)</title><rect x="4.1923%" y="533" width="0.2168%" height="15" fill="rgb(247,173,49)" fg:x="116" fg:w="6"/><text x="4.4423%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6 samples, 0.22%)</title><rect x="4.1923%" y="517" width="0.2168%" height="15" fill="rgb(224,114,35)" fg:x="116" fg:w="6"/><text x="4.4423%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.22%)</title><rect x="4.1923%" y="501" width="0.2168%" height="15" fill="rgb(245,159,27)" fg:x="116" fg:w="6"/><text x="4.4423%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.22%)</title><rect x="4.1923%" y="485" width="0.2168%" height="15" fill="rgb(245,172,44)" fg:x="116" fg:w="6"/><text x="4.4423%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.22%)</title><rect x="4.1923%" y="469" width="0.2168%" height="15" fill="rgb(236,23,11)" fg:x="116" fg:w="6"/><text x="4.4423%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.22%)</title><rect x="4.1923%" y="453" width="0.2168%" height="15" fill="rgb(205,117,38)" fg:x="116" fg:w="6"/><text x="4.4423%" y="463.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.22%)</title><rect x="4.1923%" y="437" width="0.2168%" height="15" fill="rgb(237,72,25)" fg:x="116" fg:w="6"/><text x="4.4423%" y="447.50"></text></g><g><title>__rdl_alloc (4 samples, 0.14%)</title><rect x="4.2645%" y="421" width="0.1446%" height="15" fill="rgb(244,70,9)" fg:x="118" fg:w="4"/><text x="4.5145%" y="431.50"></text></g><g><title>core::num::&lt;impl u128&gt;::pow (18 samples, 0.65%)</title><rect x="4.4091%" y="421" width="0.6505%" height="15" fill="rgb(217,125,39)" fg:x="122" fg:w="18"/><text x="4.6591%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (20 samples, 0.72%)</title><rect x="4.4091%" y="485" width="0.7228%" height="15" fill="rgb(235,36,10)" fg:x="122" fg:w="20"/><text x="4.6591%" y="495.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (20 samples, 0.72%)</title><rect x="4.4091%" y="469" width="0.7228%" height="15" fill="rgb(251,123,47)" fg:x="122" fg:w="20"/><text x="4.6591%" y="479.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::items::{{closure}} (20 samples, 0.72%)</title><rect x="4.4091%" y="453" width="0.7228%" height="15" fill="rgb(221,13,13)" fg:x="122" fg:w="20"/><text x="4.6591%" y="463.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::contains (20 samples, 0.72%)</title><rect x="4.4091%" y="437" width="0.7228%" height="15" fill="rgb(238,131,9)" fg:x="122" fg:w="20"/><text x="4.6591%" y="447.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.04%)</title><rect x="5.1319%" y="485" width="0.0361%" height="15" fill="rgb(211,50,8)" fg:x="142" fg:w="1"/><text x="5.3819%" y="495.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.04%)</title><rect x="5.1319%" y="469" width="0.0361%" height="15" fill="rgb(245,182,24)" fg:x="142" fg:w="1"/><text x="5.3819%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::lt (1 samples, 0.04%)</title><rect x="5.1319%" y="453" width="0.0361%" height="15" fill="rgb(242,14,37)" fg:x="142" fg:w="1"/><text x="5.3819%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.83%)</title><rect x="4.4091%" y="533" width="0.8312%" height="15" fill="rgb(246,228,12)" fg:x="122" fg:w="23"/><text x="4.6591%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (23 samples, 0.83%)</title><rect x="4.4091%" y="517" width="0.8312%" height="15" fill="rgb(213,55,15)" fg:x="122" fg:w="23"/><text x="4.6591%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (23 samples, 0.83%)</title><rect x="4.4091%" y="501" width="0.8312%" height="15" fill="rgb(209,9,3)" fg:x="122" fg:w="23"/><text x="4.6591%" y="511.50"></text></g><g><title>[libc.so.6] (5 samples, 0.18%)</title><rect x="5.2403%" y="341" width="0.1807%" height="15" fill="rgb(230,59,30)" fg:x="145" fg:w="5"/><text x="5.4903%" y="351.50"></text></g><g><title>[libc.so.6] (8 samples, 0.29%)</title><rect x="5.2403%" y="357" width="0.2891%" height="15" fill="rgb(209,121,21)" fg:x="145" fg:w="8"/><text x="5.4903%" y="367.50"></text></g><g><title>realloc (15 samples, 0.54%)</title><rect x="5.2403%" y="373" width="0.5421%" height="15" fill="rgb(220,109,13)" fg:x="145" fg:w="15"/><text x="5.4903%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.04%)</title><rect x="5.7824%" y="357" width="0.0361%" height="15" fill="rgb(232,18,1)" fg:x="160" fg:w="1"/><text x="6.0324%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (17 samples, 0.61%)</title><rect x="5.2403%" y="421" width="0.6144%" height="15" fill="rgb(215,41,42)" fg:x="145" fg:w="17"/><text x="5.4903%" y="431.50"></text></g><g><title>alloc::alloc::Global::grow_impl (17 samples, 0.61%)</title><rect x="5.2403%" y="405" width="0.6144%" height="15" fill="rgb(224,123,36)" fg:x="145" fg:w="17"/><text x="5.4903%" y="415.50"></text></g><g><title>alloc::alloc::realloc (17 samples, 0.61%)</title><rect x="5.2403%" y="389" width="0.6144%" height="15" fill="rgb(240,125,3)" fg:x="145" fg:w="17"/><text x="5.4903%" y="399.50"></text></g><g><title>__rdl_realloc (2 samples, 0.07%)</title><rect x="5.7824%" y="373" width="0.0723%" height="15" fill="rgb(205,98,50)" fg:x="160" fg:w="2"/><text x="6.0324%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (18 samples, 0.65%)</title><rect x="5.2403%" y="437" width="0.6505%" height="15" fill="rgb(205,185,37)" fg:x="145" fg:w="18"/><text x="5.4903%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (19 samples, 0.69%)</title><rect x="5.2403%" y="469" width="0.6867%" height="15" fill="rgb(238,207,15)" fg:x="145" fg:w="19"/><text x="5.4903%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (19 samples, 0.69%)</title><rect x="5.2403%" y="453" width="0.6867%" height="15" fill="rgb(213,199,42)" fg:x="145" fg:w="19"/><text x="5.4903%" y="463.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.04%)</title><rect x="5.8909%" y="437" width="0.0361%" height="15" fill="rgb(235,201,11)" fg:x="163" fg:w="1"/><text x="6.1409%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (20 samples, 0.72%)</title><rect x="5.2403%" y="501" width="0.7228%" height="15" fill="rgb(207,46,11)" fg:x="145" fg:w="20"/><text x="5.4903%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (20 samples, 0.72%)</title><rect x="5.2403%" y="485" width="0.7228%" height="15" fill="rgb(241,35,35)" fg:x="145" fg:w="20"/><text x="5.4903%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.04%)</title><rect x="5.9631%" y="501" width="0.0361%" height="15" fill="rgb(243,32,47)" fg:x="165" fg:w="1"/><text x="6.2131%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.04%)</title><rect x="5.9631%" y="485" width="0.0361%" height="15" fill="rgb(247,202,23)" fg:x="165" fg:w="1"/><text x="6.2131%" y="495.50"></text></g><g><title>irqentry_exit (2 samples, 0.07%)</title><rect x="5.9993%" y="341" width="0.0723%" height="15" fill="rgb(219,102,11)" fg:x="166" fg:w="2"/><text x="6.2493%" y="351.50"></text></g><g><title>irqentry_exit_to_user_mode (2 samples, 0.07%)</title><rect x="5.9993%" y="325" width="0.0723%" height="15" fill="rgb(243,110,44)" fg:x="166" fg:w="2"/><text x="6.2493%" y="335.50"></text></g><g><title>exit_to_user_mode_prepare (2 samples, 0.07%)</title><rect x="5.9993%" y="309" width="0.0723%" height="15" fill="rgb(222,74,54)" fg:x="166" fg:w="2"/><text x="6.2493%" y="319.50"></text></g><g><title>exit_to_user_mode_loop (2 samples, 0.07%)</title><rect x="5.9993%" y="293" width="0.0723%" height="15" fill="rgb(216,99,12)" fg:x="166" fg:w="2"/><text x="6.2493%" y="303.50"></text></g><g><title>schedule (2 samples, 0.07%)</title><rect x="5.9993%" y="277" width="0.0723%" height="15" fill="rgb(226,22,26)" fg:x="166" fg:w="2"/><text x="6.2493%" y="287.50"></text></g><g><title>__schedule (2 samples, 0.07%)</title><rect x="5.9993%" y="261" width="0.0723%" height="15" fill="rgb(217,163,10)" fg:x="166" fg:w="2"/><text x="6.2493%" y="271.50"></text></g><g><title>finish_task_switch.isra.0 (2 samples, 0.07%)</title><rect x="5.9993%" y="245" width="0.0723%" height="15" fill="rgb(213,25,53)" fg:x="166" fg:w="2"/><text x="6.2493%" y="255.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (6 samples, 0.22%)</title><rect x="5.9993%" y="373" width="0.2168%" height="15" fill="rgb(252,105,26)" fg:x="166" fg:w="6"/><text x="6.2493%" y="383.50"></text></g><g><title>sysvec_apic_timer_interrupt (6 samples, 0.22%)</title><rect x="5.9993%" y="357" width="0.2168%" height="15" fill="rgb(220,39,43)" fg:x="166" fg:w="6"/><text x="6.2493%" y="367.50"></text></g><g><title>irq_exit_rcu (4 samples, 0.14%)</title><rect x="6.0716%" y="341" width="0.1446%" height="15" fill="rgb(229,68,48)" fg:x="168" fg:w="4"/><text x="6.3216%" y="351.50"></text></g><g><title>__softirqentry_text_start (4 samples, 0.14%)</title><rect x="6.0716%" y="325" width="0.1446%" height="15" fill="rgb(252,8,32)" fg:x="168" fg:w="4"/><text x="6.3216%" y="335.50"></text></g><g><title>run_timer_softirq (4 samples, 0.14%)</title><rect x="6.0716%" y="309" width="0.1446%" height="15" fill="rgb(223,20,43)" fg:x="168" fg:w="4"/><text x="6.3216%" y="319.50"></text></g><g><title>__run_timers.part.0 (4 samples, 0.14%)</title><rect x="6.0716%" y="293" width="0.1446%" height="15" fill="rgb(229,81,49)" fg:x="168" fg:w="4"/><text x="6.3216%" y="303.50"></text></g><g><title>call_timer_fn (4 samples, 0.14%)</title><rect x="6.0716%" y="277" width="0.1446%" height="15" fill="rgb(236,28,36)" fg:x="168" fg:w="4"/><text x="6.3216%" y="287.50"></text></g><g><title>vbg_heartbeat_timer (4 samples, 0.14%)</title><rect x="6.0716%" y="261" width="0.1446%" height="15" fill="rgb(249,185,26)" fg:x="168" fg:w="4"/><text x="6.3216%" y="271.50"></text></g><g><title>vbg_req_perform (4 samples, 0.14%)</title><rect x="6.0716%" y="245" width="0.1446%" height="15" fill="rgb(249,174,33)" fg:x="168" fg:w="4"/><text x="6.3216%" y="255.50"></text></g><g><title>asm_common_interrupt (1 samples, 0.04%)</title><rect x="6.2161%" y="373" width="0.0361%" height="15" fill="rgb(233,201,37)" fg:x="172" fg:w="1"/><text x="6.4661%" y="383.50"></text></g><g><title>common_interrupt (1 samples, 0.04%)</title><rect x="6.2161%" y="357" width="0.0361%" height="15" fill="rgb(221,78,26)" fg:x="172" fg:w="1"/><text x="6.4661%" y="367.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.04%)</title><rect x="6.2161%" y="341" width="0.0361%" height="15" fill="rgb(250,127,30)" fg:x="172" fg:w="1"/><text x="6.4661%" y="351.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.04%)</title><rect x="6.2161%" y="325" width="0.0361%" height="15" fill="rgb(230,49,44)" fg:x="172" fg:w="1"/><text x="6.4661%" y="335.50"></text></g><g><title>core::num::&lt;impl u128&gt;::pow (294 samples, 10.63%)</title><rect x="5.9993%" y="389" width="10.6252%" height="15" fill="rgb(229,67,23)" fg:x="166" fg:w="294"/><text x="6.2493%" y="399.50">core::num::&lt;impl..</text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (298 samples, 10.77%)</title><rect x="5.9993%" y="453" width="10.7698%" height="15" fill="rgb(249,83,47)" fg:x="166" fg:w="298"/><text x="6.2493%" y="463.50">core::iter::trai..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (298 samples, 10.77%)</title><rect x="5.9993%" y="437" width="10.7698%" height="15" fill="rgb(215,43,3)" fg:x="166" fg:w="298"/><text x="6.2493%" y="447.50">core::ops::funct..</text></g><g><title>wfc::wfc::bits256_set::Bits256Set::items::{{closure}} (298 samples, 10.77%)</title><rect x="5.9993%" y="421" width="10.7698%" height="15" fill="rgb(238,154,13)" fg:x="166" fg:w="298"/><text x="6.2493%" y="431.50">wfc::wfc::bits25..</text></g><g><title>wfc::wfc::bits256_set::Bits256Set::contains (298 samples, 10.77%)</title><rect x="5.9993%" y="405" width="10.7698%" height="15" fill="rgb(219,56,2)" fg:x="166" fg:w="298"/><text x="6.2493%" y="415.50">wfc::wfc::bits25..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::lt (15 samples, 0.54%)</title><rect x="16.7691%" y="421" width="0.5421%" height="15" fill="rgb(233,0,4)" fg:x="464" fg:w="15"/><text x="17.0191%" y="431.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (22 samples, 0.80%)</title><rect x="16.7691%" y="453" width="0.7951%" height="15" fill="rgb(235,30,7)" fg:x="464" fg:w="22"/><text x="17.0191%" y="463.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (22 samples, 0.80%)</title><rect x="16.7691%" y="437" width="0.7951%" height="15" fill="rgb(250,79,13)" fg:x="464" fg:w="22"/><text x="17.0191%" y="447.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="17.5641%" y="453" width="0.0361%" height="15" fill="rgb(211,146,34)" fg:x="486" fg:w="1"/><text x="17.8141%" y="463.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="17.5641%" y="437" width="0.0361%" height="15" fill="rgb(228,22,38)" fg:x="486" fg:w="1"/><text x="17.8141%" y="447.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.04%)</title><rect x="17.5641%" y="421" width="0.0361%" height="15" fill="rgb(235,168,5)" fg:x="486" fg:w="1"/><text x="17.8141%" y="431.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.04%)</title><rect x="17.5641%" y="405" width="0.0361%" height="15" fill="rgb(221,155,16)" fg:x="486" fg:w="1"/><text x="17.8141%" y="415.50"></text></g><g><title>run_timer_softirq (1 samples, 0.04%)</title><rect x="17.5641%" y="389" width="0.0361%" height="15" fill="rgb(215,215,53)" fg:x="486" fg:w="1"/><text x="17.8141%" y="399.50"></text></g><g><title>__run_timers.part.0 (1 samples, 0.04%)</title><rect x="17.5641%" y="373" width="0.0361%" height="15" fill="rgb(223,4,10)" fg:x="486" fg:w="1"/><text x="17.8141%" y="383.50"></text></g><g><title>call_timer_fn (1 samples, 0.04%)</title><rect x="17.5641%" y="357" width="0.0361%" height="15" fill="rgb(234,103,6)" fg:x="486" fg:w="1"/><text x="17.8141%" y="367.50"></text></g><g><title>vbg_heartbeat_timer (1 samples, 0.04%)</title><rect x="17.5641%" y="341" width="0.0361%" height="15" fill="rgb(227,97,0)" fg:x="486" fg:w="1"/><text x="17.8141%" y="351.50"></text></g><g><title>vbg_req_perform (1 samples, 0.04%)</title><rect x="17.5641%" y="325" width="0.0361%" height="15" fill="rgb(234,150,53)" fg:x="486" fg:w="1"/><text x="17.8141%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (341 samples, 12.32%)</title><rect x="5.9993%" y="501" width="12.3238%" height="15" fill="rgb(228,201,54)" fg:x="166" fg:w="341"/><text x="6.2493%" y="511.50">&lt;core::iter::adapt..</text></g><g><title>core::iter::traits::iterator::Iterator::find (341 samples, 12.32%)</title><rect x="5.9993%" y="485" width="12.3238%" height="15" fill="rgb(222,22,37)" fg:x="166" fg:w="341"/><text x="6.2493%" y="495.50">core::iter::traits..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (341 samples, 12.32%)</title><rect x="5.9993%" y="469" width="12.3238%" height="15" fill="rgb(237,53,32)" fg:x="166" fg:w="341"/><text x="6.2493%" y="479.50">core::iter::traits..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (363 samples, 13.12%)</title><rect x="5.2403%" y="533" width="13.1189%" height="15" fill="rgb(233,25,53)" fg:x="145" fg:w="363"/><text x="5.4903%" y="543.50">&lt;alloc::vec::Vec&lt;T,A..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (363 samples, 13.12%)</title><rect x="5.2403%" y="517" width="13.1189%" height="15" fill="rgb(210,40,34)" fg:x="145" fg:w="363"/><text x="5.4903%" y="527.50">alloc::vec::Vec&lt;T,A&gt;..</text></g><g><title>wfc::wfc::bits256_set::Bits256Set::items (396 samples, 14.31%)</title><rect x="4.1923%" y="613" width="14.3115%" height="15" fill="rgb(241,220,44)" fg:x="116" fg:w="396"/><text x="4.4423%" y="623.50">wfc::wfc::bits256_set:..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (396 samples, 14.31%)</title><rect x="4.1923%" y="597" width="14.3115%" height="15" fill="rgb(235,28,35)" fg:x="116" fg:w="396"/><text x="4.4423%" y="607.50">core::iter::traits::it..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (396 samples, 14.31%)</title><rect x="4.1923%" y="581" width="14.3115%" height="15" fill="rgb(210,56,17)" fg:x="116" fg:w="396"/><text x="4.4423%" y="591.50">&lt;alloc::vec::Vec&lt;T&gt; as..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (396 samples, 14.31%)</title><rect x="4.1923%" y="565" width="14.3115%" height="15" fill="rgb(224,130,29)" fg:x="116" fg:w="396"/><text x="4.4423%" y="575.50">&lt;alloc::vec::Vec&lt;T&gt; as..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (396 samples, 14.31%)</title><rect x="4.1923%" y="549" width="14.3115%" height="15" fill="rgb(235,212,8)" fg:x="116" fg:w="396"/><text x="4.4423%" y="559.50">&lt;alloc::vec::Vec&lt;T&gt; as..</text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="18.5038%" y="501" width="0.0361%" height="15" fill="rgb(223,33,50)" fg:x="512" fg:w="1"/><text x="18.7538%" y="511.50"></text></g><g><title>[libc.so.6] (2 samples, 0.07%)</title><rect x="18.5038%" y="517" width="0.0723%" height="15" fill="rgb(219,149,13)" fg:x="512" fg:w="2"/><text x="18.7538%" y="527.50"></text></g><g><title>free (3 samples, 0.11%)</title><rect x="18.5038%" y="533" width="0.1084%" height="15" fill="rgb(250,156,29)" fg:x="512" fg:w="3"/><text x="18.7538%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4 samples, 0.14%)</title><rect x="18.5038%" y="613" width="0.1446%" height="15" fill="rgb(216,193,19)" fg:x="512" fg:w="4"/><text x="18.7538%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4 samples, 0.14%)</title><rect x="18.5038%" y="597" width="0.1446%" height="15" fill="rgb(216,135,14)" fg:x="512" fg:w="4"/><text x="18.7538%" y="607.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.14%)</title><rect x="18.5038%" y="581" width="0.1446%" height="15" fill="rgb(241,47,5)" fg:x="512" fg:w="4"/><text x="18.7538%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.14%)</title><rect x="18.5038%" y="565" width="0.1446%" height="15" fill="rgb(233,42,35)" fg:x="512" fg:w="4"/><text x="18.7538%" y="575.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.14%)</title><rect x="18.5038%" y="549" width="0.1446%" height="15" fill="rgb(231,13,6)" fg:x="512" fg:w="4"/><text x="18.7538%" y="559.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.04%)</title><rect x="18.6122%" y="533" width="0.0361%" height="15" fill="rgb(207,181,40)" fg:x="515" fg:w="1"/><text x="18.8622%" y="543.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.04%)</title><rect x="18.6122%" y="517" width="0.0361%" height="15" fill="rgb(254,173,49)" fg:x="515" fg:w="1"/><text x="18.8622%" y="527.50"></text></g><g><title>asm_common_interrupt (1 samples, 0.04%)</title><rect x="18.6484%" y="421" width="0.0361%" height="15" fill="rgb(221,1,38)" fg:x="516" fg:w="1"/><text x="18.8984%" y="431.50"></text></g><g><title>common_interrupt (1 samples, 0.04%)</title><rect x="18.6484%" y="405" width="0.0361%" height="15" fill="rgb(206,124,46)" fg:x="516" fg:w="1"/><text x="18.8984%" y="415.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.04%)</title><rect x="18.6484%" y="389" width="0.0361%" height="15" fill="rgb(249,21,11)" fg:x="516" fg:w="1"/><text x="18.8984%" y="399.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.04%)</title><rect x="18.6484%" y="373" width="0.0361%" height="15" fill="rgb(222,201,40)" fg:x="516" fg:w="1"/><text x="18.8984%" y="383.50"></text></g><g><title>[libc.so.6] (3 samples, 0.11%)</title><rect x="18.6845%" y="405" width="0.1084%" height="15" fill="rgb(235,61,29)" fg:x="517" fg:w="3"/><text x="18.9345%" y="415.50"></text></g><g><title>[libc.so.6] (4 samples, 0.14%)</title><rect x="18.6845%" y="421" width="0.1446%" height="15" fill="rgb(219,207,3)" fg:x="517" fg:w="4"/><text x="18.9345%" y="431.50"></text></g><g><title>malloc (8 samples, 0.29%)</title><rect x="18.6484%" y="437" width="0.2891%" height="15" fill="rgb(222,56,46)" fg:x="516" fg:w="8"/><text x="18.8984%" y="447.50"></text></g><g><title>__rust_alloc (1 samples, 0.04%)</title><rect x="18.9375%" y="437" width="0.0361%" height="15" fill="rgb(239,76,54)" fg:x="524" fg:w="1"/><text x="19.1875%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (10 samples, 0.36%)</title><rect x="18.6484%" y="549" width="0.3614%" height="15" fill="rgb(231,124,27)" fg:x="516" fg:w="10"/><text x="18.8984%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (10 samples, 0.36%)</title><rect x="18.6484%" y="533" width="0.3614%" height="15" fill="rgb(249,195,6)" fg:x="516" fg:w="10"/><text x="18.8984%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (10 samples, 0.36%)</title><rect x="18.6484%" y="517" width="0.3614%" height="15" fill="rgb(237,174,47)" fg:x="516" fg:w="10"/><text x="18.8984%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (10 samples, 0.36%)</title><rect x="18.6484%" y="501" width="0.3614%" height="15" fill="rgb(206,201,31)" fg:x="516" fg:w="10"/><text x="18.8984%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (10 samples, 0.36%)</title><rect x="18.6484%" y="485" width="0.3614%" height="15" fill="rgb(231,57,52)" fg:x="516" fg:w="10"/><text x="18.8984%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 0.36%)</title><rect x="18.6484%" y="469" width="0.3614%" height="15" fill="rgb(248,177,22)" fg:x="516" fg:w="10"/><text x="18.8984%" y="479.50"></text></g><g><title>alloc::alloc::alloc (10 samples, 0.36%)</title><rect x="18.6484%" y="453" width="0.3614%" height="15" fill="rgb(215,211,37)" fg:x="516" fg:w="10"/><text x="18.8984%" y="463.50"></text></g><g><title>__rdl_alloc (1 samples, 0.04%)</title><rect x="18.9736%" y="437" width="0.0361%" height="15" fill="rgb(241,128,51)" fg:x="525" fg:w="1"/><text x="19.2236%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.04%)</title><rect x="19.0098%" y="437" width="0.0361%" height="15" fill="rgb(227,165,31)" fg:x="526" fg:w="1"/><text x="19.2598%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.04%)</title><rect x="19.0098%" y="421" width="0.0361%" height="15" fill="rgb(228,167,24)" fg:x="526" fg:w="1"/><text x="19.2598%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.04%)</title><rect x="19.0098%" y="405" width="0.0361%" height="15" fill="rgb(228,143,12)" fg:x="526" fg:w="1"/><text x="19.2598%" y="415.50"></text></g><g><title>wfc::wfc::queueprop_bitarrayset::QueuePropBitArraySet::legal_tiles::{{closure}} (13 samples, 0.47%)</title><rect x="19.0098%" y="453" width="0.4698%" height="15" fill="rgb(249,149,8)" fg:x="526" fg:w="13"/><text x="19.2598%" y="463.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (18 samples, 0.65%)</title><rect x="19.0098%" y="469" width="0.6505%" height="15" fill="rgb(243,35,44)" fg:x="526" fg:w="18"/><text x="19.2598%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (5 samples, 0.18%)</title><rect x="19.4796%" y="453" width="0.1807%" height="15" fill="rgb(246,89,9)" fg:x="539" fg:w="5"/><text x="19.7296%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::{{closure}} (5 samples, 0.18%)</title><rect x="19.4796%" y="437" width="0.1807%" height="15" fill="rgb(233,213,13)" fg:x="539" fg:w="5"/><text x="19.7296%" y="447.50"></text></g><g><title>core::ptr::write (5 samples, 0.18%)</title><rect x="19.4796%" y="421" width="0.1807%" height="15" fill="rgb(233,141,41)" fg:x="539" fg:w="5"/><text x="19.7296%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (30 samples, 1.08%)</title><rect x="18.6484%" y="613" width="1.0842%" height="15" fill="rgb(239,167,4)" fg:x="516" fg:w="30"/><text x="18.8984%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (30 samples, 1.08%)</title><rect x="18.6484%" y="597" width="1.0842%" height="15" fill="rgb(209,217,16)" fg:x="516" fg:w="30"/><text x="18.8984%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (30 samples, 1.08%)</title><rect x="18.6484%" y="581" width="1.0842%" height="15" fill="rgb(219,88,35)" fg:x="516" fg:w="30"/><text x="18.8984%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (30 samples, 1.08%)</title><rect x="18.6484%" y="565" width="1.0842%" height="15" fill="rgb(220,193,23)" fg:x="516" fg:w="30"/><text x="18.8984%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (20 samples, 0.72%)</title><rect x="19.0098%" y="549" width="0.7228%" height="15" fill="rgb(230,90,52)" fg:x="526" fg:w="20"/><text x="19.2598%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (20 samples, 0.72%)</title><rect x="19.0098%" y="533" width="0.7228%" height="15" fill="rgb(252,106,19)" fg:x="526" fg:w="20"/><text x="19.2598%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (20 samples, 0.72%)</title><rect x="19.0098%" y="517" width="0.7228%" height="15" fill="rgb(206,74,20)" fg:x="526" fg:w="20"/><text x="19.2598%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (20 samples, 0.72%)</title><rect x="19.0098%" y="501" width="0.7228%" height="15" fill="rgb(230,138,44)" fg:x="526" fg:w="20"/><text x="19.2598%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (20 samples, 0.72%)</title><rect x="19.0098%" y="485" width="0.7228%" height="15" fill="rgb(235,182,43)" fg:x="526" fg:w="20"/><text x="19.2598%" y="495.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="19.6603%" y="469" width="0.0723%" height="15" fill="rgb(242,16,51)" fg:x="544" fg:w="2"/><text x="19.9103%" y="479.50"></text></g><g><title>wfc::wfc::queueprop_bitarrayset::QueuePropBitArraySet::propagate (446 samples, 16.12%)</title><rect x="3.6502%" y="645" width="16.1185%" height="15" fill="rgb(248,9,4)" fg:x="101" fg:w="446"/><text x="3.9002%" y="655.50">wfc::wfc::queueprop_bitar..</text></g><g><title>wfc::wfc::queueprop_bitarrayset::QueuePropBitArraySet::legal_tiles (446 samples, 16.12%)</title><rect x="3.6502%" y="629" width="16.1185%" height="15" fill="rgb(210,31,22)" fg:x="101" fg:w="446"/><text x="3.9002%" y="639.50">wfc::wfc::queueprop_bitar..</text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (1 samples, 0.04%)</title><rect x="19.7687%" y="501" width="0.0361%" height="15" fill="rgb(239,54,39)" fg:x="547" fg:w="1"/><text x="20.0187%" y="511.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.04%)</title><rect x="19.7687%" y="485" width="0.0361%" height="15" fill="rgb(230,99,41)" fg:x="547" fg:w="1"/><text x="20.0187%" y="495.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::items::{{closure}} (1 samples, 0.04%)</title><rect x="19.7687%" y="469" width="0.0361%" height="15" fill="rgb(253,106,12)" fg:x="547" fg:w="1"/><text x="20.0187%" y="479.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::contains (1 samples, 0.04%)</title><rect x="19.7687%" y="453" width="0.0361%" height="15" fill="rgb(213,46,41)" fg:x="547" fg:w="1"/><text x="20.0187%" y="463.50"></text></g><g><title>core::num::&lt;impl u128&gt;::pow (1 samples, 0.04%)</title><rect x="19.7687%" y="437" width="0.0361%" height="15" fill="rgb(215,133,35)" fg:x="547" fg:w="1"/><text x="20.0187%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="19.7687%" y="549" width="0.0723%" height="15" fill="rgb(213,28,5)" fg:x="547" fg:w="2"/><text x="20.0187%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (2 samples, 0.07%)</title><rect x="19.7687%" y="533" width="0.0723%" height="15" fill="rgb(215,77,49)" fg:x="547" fg:w="2"/><text x="20.0187%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.07%)</title><rect x="19.7687%" y="517" width="0.0723%" height="15" fill="rgb(248,100,22)" fg:x="547" fg:w="2"/><text x="20.0187%" y="527.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.04%)</title><rect x="19.8048%" y="501" width="0.0361%" height="15" fill="rgb(208,67,9)" fg:x="548" fg:w="1"/><text x="20.0548%" y="511.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.04%)</title><rect x="19.8048%" y="485" width="0.0361%" height="15" fill="rgb(219,133,21)" fg:x="548" fg:w="1"/><text x="20.0548%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::lt (1 samples, 0.04%)</title><rect x="19.8048%" y="469" width="0.0361%" height="15" fill="rgb(246,46,29)" fg:x="548" fg:w="1"/><text x="20.0548%" y="479.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::items (5 samples, 0.18%)</title><rect x="19.7687%" y="629" width="0.1807%" height="15" fill="rgb(246,185,52)" fg:x="547" fg:w="5"/><text x="20.0187%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (5 samples, 0.18%)</title><rect x="19.7687%" y="613" width="0.1807%" height="15" fill="rgb(252,136,11)" fg:x="547" fg:w="5"/><text x="20.0187%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (5 samples, 0.18%)</title><rect x="19.7687%" y="597" width="0.1807%" height="15" fill="rgb(219,138,53)" fg:x="547" fg:w="5"/><text x="20.0187%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.18%)</title><rect x="19.7687%" y="581" width="0.1807%" height="15" fill="rgb(211,51,23)" fg:x="547" fg:w="5"/><text x="20.0187%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (5 samples, 0.18%)</title><rect x="19.7687%" y="565" width="0.1807%" height="15" fill="rgb(247,221,28)" fg:x="547" fg:w="5"/><text x="20.0187%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.11%)</title><rect x="19.8410%" y="549" width="0.1084%" height="15" fill="rgb(251,222,45)" fg:x="549" fg:w="3"/><text x="20.0910%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (3 samples, 0.11%)</title><rect x="19.8410%" y="533" width="0.1084%" height="15" fill="rgb(217,162,53)" fg:x="549" fg:w="3"/><text x="20.0910%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="19.8410%" y="517" width="0.1084%" height="15" fill="rgb(229,93,14)" fg:x="549" fg:w="3"/><text x="20.0910%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (3 samples, 0.11%)</title><rect x="19.8410%" y="501" width="0.1084%" height="15" fill="rgb(209,67,49)" fg:x="549" fg:w="3"/><text x="20.0910%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3 samples, 0.11%)</title><rect x="19.8410%" y="485" width="0.1084%" height="15" fill="rgb(213,87,29)" fg:x="549" fg:w="3"/><text x="20.0910%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (3 samples, 0.11%)</title><rect x="19.8410%" y="469" width="0.1084%" height="15" fill="rgb(205,151,52)" fg:x="549" fg:w="3"/><text x="20.0910%" y="479.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3 samples, 0.11%)</title><rect x="19.8410%" y="453" width="0.1084%" height="15" fill="rgb(253,215,39)" fg:x="549" fg:w="3"/><text x="20.0910%" y="463.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::items::{{closure}} (3 samples, 0.11%)</title><rect x="19.8410%" y="437" width="0.1084%" height="15" fill="rgb(221,220,41)" fg:x="549" fg:w="3"/><text x="20.0910%" y="447.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::contains (3 samples, 0.11%)</title><rect x="19.8410%" y="421" width="0.1084%" height="15" fill="rgb(218,133,21)" fg:x="549" fg:w="3"/><text x="20.0910%" y="431.50"></text></g><g><title>core::num::&lt;impl u128&gt;::pow (3 samples, 0.11%)</title><rect x="19.8410%" y="405" width="0.1084%" height="15" fill="rgb(221,193,43)" fg:x="549" fg:w="3"/><text x="20.0910%" y="415.50"></text></g><g><title>wfc::wfc::queueprop_bitarrayset::QueuePropBitArraySet::format_solution (6 samples, 0.22%)</title><rect x="19.7687%" y="645" width="0.2168%" height="15" fill="rgb(240,128,52)" fg:x="547" fg:w="6"/><text x="20.0187%" y="655.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="19.9494%" y="629" width="0.0361%" height="15" fill="rgb(253,114,12)" fg:x="552" fg:w="1"/><text x="20.1994%" y="639.50"></text></g><g><title>core::ptr::read (1 samples, 0.04%)</title><rect x="19.9494%" y="613" width="0.0361%" height="15" fill="rgb(215,223,47)" fg:x="552" fg:w="1"/><text x="20.1994%" y="623.50"></text></g><g><title>core::slice::sort::recurse (1 samples, 0.04%)</title><rect x="19.9855%" y="533" width="0.0361%" height="15" fill="rgb(248,225,23)" fg:x="553" fg:w="1"/><text x="20.2355%" y="543.50"></text></g><g><title>core::slice::sort::partition (1 samples, 0.04%)</title><rect x="19.9855%" y="517" width="0.0361%" height="15" fill="rgb(250,108,0)" fg:x="553" fg:w="1"/><text x="20.2355%" y="527.50"></text></g><g><title>core::slice::sort::partition_in_blocks (1 samples, 0.04%)</title><rect x="19.9855%" y="501" width="0.0361%" height="15" fill="rgb(228,208,7)" fg:x="553" fg:w="1"/><text x="20.2355%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by::{{closure}} (1 samples, 0.04%)</title><rect x="19.9855%" y="485" width="0.0361%" height="15" fill="rgb(244,45,10)" fg:x="553" fg:w="1"/><text x="20.2355%" y="495.50"></text></g><g><title>wfc::wfc::queueprop_bitarrayset::QueuePropBitArraySet::find_minimal::{{closure}} (1 samples, 0.04%)</title><rect x="19.9855%" y="469" width="0.0361%" height="15" fill="rgb(207,125,25)" fg:x="553" fg:w="1"/><text x="20.2355%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::partial_cmp (1 samples, 0.04%)</title><rect x="19.9855%" y="453" width="0.0361%" height="15" fill="rgb(210,195,18)" fg:x="553" fg:w="1"/><text x="20.2355%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (1 samples, 0.04%)</title><rect x="19.9855%" y="437" width="0.0361%" height="15" fill="rgb(249,80,12)" fg:x="553" fg:w="1"/><text x="20.2355%" y="447.50"></text></g><g><title>core::slice::sort::recurse (2 samples, 0.07%)</title><rect x="19.9855%" y="549" width="0.0723%" height="15" fill="rgb(221,65,9)" fg:x="553" fg:w="2"/><text x="20.2355%" y="559.50"></text></g><g><title>core::slice::sort::partition_equal (1 samples, 0.04%)</title><rect x="20.0217%" y="533" width="0.0361%" height="15" fill="rgb(235,49,36)" fg:x="554" fg:w="1"/><text x="20.2717%" y="543.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by::{{closure}} (1 samples, 0.04%)</title><rect x="20.0217%" y="517" width="0.0361%" height="15" fill="rgb(225,32,20)" fg:x="554" fg:w="1"/><text x="20.2717%" y="527.50"></text></g><g><title>wfc::wfc::queueprop_bitarrayset::QueuePropBitArraySet::find_minimal::{{closure}} (1 samples, 0.04%)</title><rect x="20.0217%" y="501" width="0.0361%" height="15" fill="rgb(215,141,46)" fg:x="554" fg:w="1"/><text x="20.2717%" y="511.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::len (1 samples, 0.04%)</title><rect x="20.0217%" y="485" width="0.0361%" height="15" fill="rgb(250,160,47)" fg:x="554" fg:w="1"/><text x="20.2717%" y="495.50"></text></g><g><title>core::num::&lt;impl u128&gt;::count_ones (1 samples, 0.04%)</title><rect x="20.0217%" y="469" width="0.0361%" height="15" fill="rgb(216,222,40)" fg:x="554" fg:w="1"/><text x="20.2717%" y="479.50"></text></g><g><title>core::num::&lt;impl u128&gt;::count_ones (7 samples, 0.25%)</title><rect x="20.0578%" y="485" width="0.2530%" height="15" fill="rgb(234,217,39)" fg:x="555" fg:w="7"/><text x="20.3078%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by::{{closure}} (8 samples, 0.29%)</title><rect x="20.0578%" y="533" width="0.2891%" height="15" fill="rgb(207,178,40)" fg:x="555" fg:w="8"/><text x="20.3078%" y="543.50"></text></g><g><title>wfc::wfc::queueprop_bitarrayset::QueuePropBitArraySet::find_minimal::{{closure}} (8 samples, 0.29%)</title><rect x="20.0578%" y="517" width="0.2891%" height="15" fill="rgb(221,136,13)" fg:x="555" fg:w="8"/><text x="20.3078%" y="527.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::len (8 samples, 0.29%)</title><rect x="20.0578%" y="501" width="0.2891%" height="15" fill="rgb(249,199,10)" fg:x="555" fg:w="8"/><text x="20.3078%" y="511.50"></text></g><g><title>core::ptr::swap (1 samples, 0.04%)</title><rect x="20.3469%" y="533" width="0.0361%" height="15" fill="rgb(249,222,13)" fg:x="563" fg:w="1"/><text x="20.5969%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="20.3469%" y="517" width="0.0361%" height="15" fill="rgb(244,185,38)" fg:x="563" fg:w="1"/><text x="20.5969%" y="527.50"></text></g><g><title>core::slice::sort::partition_equal (13 samples, 0.47%)</title><rect x="20.0578%" y="549" width="0.4698%" height="15" fill="rgb(236,202,9)" fg:x="555" fg:w="13"/><text x="20.3078%" y="559.50"></text></g><g><title>core::num::&lt;impl u128&gt;::count_ones (1 samples, 0.04%)</title><rect x="20.5276%" y="469" width="0.0361%" height="15" fill="rgb(250,229,37)" fg:x="568" fg:w="1"/><text x="20.7776%" y="479.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="20.5638%" y="469" width="0.0361%" height="15" fill="rgb(206,174,23)" fg:x="569" fg:w="1"/><text x="20.8138%" y="479.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="20.5638%" y="453" width="0.0361%" height="15" fill="rgb(211,33,43)" fg:x="569" fg:w="1"/><text x="20.8138%" y="463.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.04%)</title><rect x="20.5638%" y="437" width="0.0361%" height="15" fill="rgb(245,58,50)" fg:x="569" fg:w="1"/><text x="20.8138%" y="447.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.04%)</title><rect x="20.5638%" y="421" width="0.0361%" height="15" fill="rgb(244,68,36)" fg:x="569" fg:w="1"/><text x="20.8138%" y="431.50"></text></g><g><title>run_timer_softirq (1 samples, 0.04%)</title><rect x="20.5638%" y="405" width="0.0361%" height="15" fill="rgb(232,229,15)" fg:x="569" fg:w="1"/><text x="20.8138%" y="415.50"></text></g><g><title>__run_timers.part.0 (1 samples, 0.04%)</title><rect x="20.5638%" y="389" width="0.0361%" height="15" fill="rgb(254,30,23)" fg:x="569" fg:w="1"/><text x="20.8138%" y="399.50"></text></g><g><title>call_timer_fn (1 samples, 0.04%)</title><rect x="20.5638%" y="373" width="0.0361%" height="15" fill="rgb(235,160,14)" fg:x="569" fg:w="1"/><text x="20.8138%" y="383.50"></text></g><g><title>vbg_heartbeat_timer (1 samples, 0.04%)</title><rect x="20.5638%" y="357" width="0.0361%" height="15" fill="rgb(212,155,44)" fg:x="569" fg:w="1"/><text x="20.8138%" y="367.50"></text></g><g><title>vbg_req_perform (1 samples, 0.04%)</title><rect x="20.5638%" y="341" width="0.0361%" height="15" fill="rgb(226,2,50)" fg:x="569" fg:w="1"/><text x="20.8138%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by::{{closure}} (5 samples, 0.18%)</title><rect x="20.5276%" y="517" width="0.1807%" height="15" fill="rgb(234,177,6)" fg:x="568" fg:w="5"/><text x="20.7776%" y="527.50"></text></g><g><title>wfc::wfc::queueprop_bitarrayset::QueuePropBitArraySet::find_minimal::{{closure}} (5 samples, 0.18%)</title><rect x="20.5276%" y="501" width="0.1807%" height="15" fill="rgb(217,24,9)" fg:x="568" fg:w="5"/><text x="20.7776%" y="511.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::len (5 samples, 0.18%)</title><rect x="20.5276%" y="485" width="0.1807%" height="15" fill="rgb(220,13,46)" fg:x="568" fg:w="5"/><text x="20.7776%" y="495.50"></text></g><g><title>core::slice::sort::partition_in_blocks (7 samples, 0.25%)</title><rect x="20.5276%" y="533" width="0.2530%" height="15" fill="rgb(239,221,27)" fg:x="568" fg:w="7"/><text x="20.7776%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.07%)</title><rect x="20.7083%" y="517" width="0.0723%" height="15" fill="rgb(222,198,25)" fg:x="573" fg:w="2"/><text x="20.9583%" y="527.50"></text></g><g><title>core::num::&lt;impl u128&gt;::count_ones (4 samples, 0.14%)</title><rect x="20.7806%" y="485" width="0.1446%" height="15" fill="rgb(211,99,13)" fg:x="575" fg:w="4"/><text x="21.0306%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by::{{closure}} (6 samples, 0.22%)</title><rect x="20.7806%" y="533" width="0.2168%" height="15" fill="rgb(232,111,31)" fg:x="575" fg:w="6"/><text x="21.0306%" y="543.50"></text></g><g><title>wfc::wfc::queueprop_bitarrayset::QueuePropBitArraySet::find_minimal::{{closure}} (6 samples, 0.22%)</title><rect x="20.7806%" y="517" width="0.2168%" height="15" fill="rgb(245,82,37)" fg:x="575" fg:w="6"/><text x="21.0306%" y="527.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::len (6 samples, 0.22%)</title><rect x="20.7806%" y="501" width="0.2168%" height="15" fill="rgb(227,149,46)" fg:x="575" fg:w="6"/><text x="21.0306%" y="511.50"></text></g><g><title>core::slice::sort::partition (16 samples, 0.58%)</title><rect x="20.5276%" y="549" width="0.5782%" height="15" fill="rgb(218,36,50)" fg:x="568" fg:w="16"/><text x="20.7776%" y="559.50"></text></g><g><title>core::slice::sort::shift_head (1 samples, 0.04%)</title><rect x="21.1059%" y="533" width="0.0361%" height="15" fill="rgb(226,80,48)" fg:x="584" fg:w="1"/><text x="21.3559%" y="543.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by::{{closure}} (1 samples, 0.04%)</title><rect x="21.1059%" y="517" width="0.0361%" height="15" fill="rgb(238,224,15)" fg:x="584" fg:w="1"/><text x="21.3559%" y="527.50"></text></g><g><title>wfc::wfc::queueprop_bitarrayset::QueuePropBitArraySet::find_minimal::{{closure}} (1 samples, 0.04%)</title><rect x="21.1059%" y="501" width="0.0361%" height="15" fill="rgb(241,136,10)" fg:x="584" fg:w="1"/><text x="21.3559%" y="511.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::len (1 samples, 0.04%)</title><rect x="21.1059%" y="485" width="0.0361%" height="15" fill="rgb(208,32,45)" fg:x="584" fg:w="1"/><text x="21.3559%" y="495.50"></text></g><g><title>core::num::&lt;impl u128&gt;::count_ones (1 samples, 0.04%)</title><rect x="21.1059%" y="469" width="0.0361%" height="15" fill="rgb(207,135,9)" fg:x="584" fg:w="1"/><text x="21.3559%" y="479.50"></text></g><g><title>core::num::&lt;impl u128&gt;::count_ones (8 samples, 0.29%)</title><rect x="21.1420%" y="485" width="0.2891%" height="15" fill="rgb(206,86,44)" fg:x="585" fg:w="8"/><text x="21.3920%" y="495.50"></text></g><g><title>core::slice::sort::partial_insertion_sort (10 samples, 0.36%)</title><rect x="21.1059%" y="549" width="0.3614%" height="15" fill="rgb(245,177,15)" fg:x="584" fg:w="10"/><text x="21.3559%" y="559.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by::{{closure}} (9 samples, 0.33%)</title><rect x="21.1420%" y="533" width="0.3253%" height="15" fill="rgb(206,64,50)" fg:x="585" fg:w="9"/><text x="21.3920%" y="543.50"></text></g><g><title>wfc::wfc::queueprop_bitarrayset::QueuePropBitArraySet::find_minimal::{{closure}} (9 samples, 0.33%)</title><rect x="21.1420%" y="517" width="0.3253%" height="15" fill="rgb(234,36,40)" fg:x="585" fg:w="9"/><text x="21.3920%" y="527.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::len (9 samples, 0.33%)</title><rect x="21.1420%" y="501" width="0.3253%" height="15" fill="rgb(213,64,8)" fg:x="585" fg:w="9"/><text x="21.3920%" y="511.50"></text></g><g><title>core::slice::sort::choose_pivot::{{closure}} (2 samples, 0.07%)</title><rect x="21.4673%" y="501" width="0.0723%" height="15" fill="rgb(210,75,36)" fg:x="594" fg:w="2"/><text x="21.7173%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by::{{closure}} (2 samples, 0.07%)</title><rect x="21.4673%" y="485" width="0.0723%" height="15" fill="rgb(229,88,21)" fg:x="594" fg:w="2"/><text x="21.7173%" y="495.50"></text></g><g><title>wfc::wfc::queueprop_bitarrayset::QueuePropBitArraySet::find_minimal::{{closure}} (2 samples, 0.07%)</title><rect x="21.4673%" y="469" width="0.0723%" height="15" fill="rgb(252,204,47)" fg:x="594" fg:w="2"/><text x="21.7173%" y="479.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::len (2 samples, 0.07%)</title><rect x="21.4673%" y="453" width="0.0723%" height="15" fill="rgb(208,77,27)" fg:x="594" fg:w="2"/><text x="21.7173%" y="463.50"></text></g><g><title>core::num::&lt;impl u128&gt;::count_ones (2 samples, 0.07%)</title><rect x="21.4673%" y="437" width="0.0723%" height="15" fill="rgb(221,76,26)" fg:x="594" fg:w="2"/><text x="21.7173%" y="447.50"></text></g><g><title>core::slice::sort::recurse (44 samples, 1.59%)</title><rect x="19.9855%" y="565" width="1.5902%" height="15" fill="rgb(225,139,18)" fg:x="553" fg:w="44"/><text x="20.2355%" y="575.50"></text></g><g><title>core::slice::sort::choose_pivot (3 samples, 0.11%)</title><rect x="21.4673%" y="549" width="0.1084%" height="15" fill="rgb(230,137,11)" fg:x="594" fg:w="3"/><text x="21.7173%" y="559.50"></text></g><g><title>core::slice::sort::choose_pivot::{{closure}} (3 samples, 0.11%)</title><rect x="21.4673%" y="533" width="0.1084%" height="15" fill="rgb(212,28,1)" fg:x="594" fg:w="3"/><text x="21.7173%" y="543.50"></text></g><g><title>core::slice::sort::choose_pivot::{{closure}} (3 samples, 0.11%)</title><rect x="21.4673%" y="517" width="0.1084%" height="15" fill="rgb(248,164,17)" fg:x="594" fg:w="3"/><text x="21.7173%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by::{{closure}} (1 samples, 0.04%)</title><rect x="21.5396%" y="501" width="0.0361%" height="15" fill="rgb(222,171,42)" fg:x="596" fg:w="1"/><text x="21.7896%" y="511.50"></text></g><g><title>wfc::wfc::queueprop_bitarrayset::QueuePropBitArraySet::find_minimal::{{closure}} (1 samples, 0.04%)</title><rect x="21.5396%" y="485" width="0.0361%" height="15" fill="rgb(243,84,45)" fg:x="596" fg:w="1"/><text x="21.7896%" y="495.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::len (1 samples, 0.04%)</title><rect x="21.5396%" y="469" width="0.0361%" height="15" fill="rgb(252,49,23)" fg:x="596" fg:w="1"/><text x="21.7896%" y="479.50"></text></g><g><title>core::num::&lt;impl u128&gt;::count_ones (1 samples, 0.04%)</title><rect x="21.5396%" y="453" width="0.0361%" height="15" fill="rgb(215,19,7)" fg:x="596" fg:w="1"/><text x="21.7896%" y="463.50"></text></g><g><title>core::num::&lt;impl u128&gt;::count_ones (12 samples, 0.43%)</title><rect x="21.5757%" y="501" width="0.4337%" height="15" fill="rgb(238,81,41)" fg:x="597" fg:w="12"/><text x="21.8257%" y="511.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::len (17 samples, 0.61%)</title><rect x="21.5757%" y="517" width="0.6144%" height="15" fill="rgb(210,199,37)" fg:x="597" fg:w="17"/><text x="21.8257%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by::{{closure}} (18 samples, 0.65%)</title><rect x="21.5757%" y="549" width="0.6505%" height="15" fill="rgb(244,192,49)" fg:x="597" fg:w="18"/><text x="21.8257%" y="559.50"></text></g><g><title>wfc::wfc::queueprop_bitarrayset::QueuePropBitArraySet::find_minimal::{{closure}} (18 samples, 0.65%)</title><rect x="21.5757%" y="533" width="0.6505%" height="15" fill="rgb(226,211,11)" fg:x="597" fg:w="18"/><text x="21.8257%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::partial_cmp (1 samples, 0.04%)</title><rect x="22.1901%" y="517" width="0.0361%" height="15" fill="rgb(236,162,54)" fg:x="614" fg:w="1"/><text x="22.4401%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (1 samples, 0.04%)</title><rect x="22.1901%" y="501" width="0.0361%" height="15" fill="rgb(220,229,9)" fg:x="614" fg:w="1"/><text x="22.4401%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.14%)</title><rect x="22.2262%" y="533" width="0.1446%" height="15" fill="rgb(250,87,22)" fg:x="615" fg:w="4"/><text x="22.4762%" y="543.50"></text></g><g><title>core::ptr::swap (5 samples, 0.18%)</title><rect x="22.2262%" y="549" width="0.1807%" height="15" fill="rgb(239,43,17)" fg:x="615" fg:w="5"/><text x="22.4762%" y="559.50"></text></g><g><title>core::intrinsics::copy (1 samples, 0.04%)</title><rect x="22.3708%" y="533" width="0.0361%" height="15" fill="rgb(231,177,25)" fg:x="619" fg:w="1"/><text x="22.6208%" y="543.50"></text></g><g><title>core::slice::sort::partition_equal (26 samples, 0.94%)</title><rect x="21.5757%" y="565" width="0.9396%" height="15" fill="rgb(219,179,1)" fg:x="597" fg:w="26"/><text x="21.8257%" y="575.50"></text></g><g><title>core::num::&lt;impl u128&gt;::count_ones (33 samples, 1.19%)</title><rect x="22.5154%" y="485" width="1.1926%" height="15" fill="rgb(238,219,53)" fg:x="623" fg:w="33"/><text x="22.7654%" y="495.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::len (51 samples, 1.84%)</title><rect x="22.5154%" y="501" width="1.8432%" height="15" fill="rgb(232,167,36)" fg:x="623" fg:w="51"/><text x="22.7654%" y="511.50">w..</text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by::{{closure}} (53 samples, 1.92%)</title><rect x="22.5154%" y="533" width="1.9154%" height="15" fill="rgb(244,19,51)" fg:x="623" fg:w="53"/><text x="22.7654%" y="543.50">c..</text></g><g><title>wfc::wfc::queueprop_bitarrayset::QueuePropBitArraySet::find_minimal::{{closure}} (53 samples, 1.92%)</title><rect x="22.5154%" y="517" width="1.9154%" height="15" fill="rgb(224,6,22)" fg:x="623" fg:w="53"/><text x="22.7654%" y="527.50">w..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::partial_cmp (2 samples, 0.07%)</title><rect x="24.3585%" y="501" width="0.0723%" height="15" fill="rgb(224,145,5)" fg:x="674" fg:w="2"/><text x="24.6085%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (2 samples, 0.07%)</title><rect x="24.3585%" y="485" width="0.0723%" height="15" fill="rgb(234,130,49)" fg:x="674" fg:w="2"/><text x="24.6085%" y="495.50"></text></g><g><title>core::ptr::swap (2 samples, 0.07%)</title><rect x="24.4308%" y="533" width="0.0723%" height="15" fill="rgb(254,6,2)" fg:x="676" fg:w="2"/><text x="24.6808%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.07%)</title><rect x="24.4308%" y="517" width="0.0723%" height="15" fill="rgb(208,96,46)" fg:x="676" fg:w="2"/><text x="24.6808%" y="527.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="24.5031%" y="469" width="0.0361%" height="15" fill="rgb(239,3,39)" fg:x="678" fg:w="1"/><text x="24.7531%" y="479.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="24.5031%" y="453" width="0.0361%" height="15" fill="rgb(233,210,1)" fg:x="678" fg:w="1"/><text x="24.7531%" y="463.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.04%)</title><rect x="24.5031%" y="437" width="0.0361%" height="15" fill="rgb(244,137,37)" fg:x="678" fg:w="1"/><text x="24.7531%" y="447.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.04%)</title><rect x="24.5031%" y="421" width="0.0361%" height="15" fill="rgb(240,136,2)" fg:x="678" fg:w="1"/><text x="24.7531%" y="431.50"></text></g><g><title>run_timer_softirq (1 samples, 0.04%)</title><rect x="24.5031%" y="405" width="0.0361%" height="15" fill="rgb(239,18,37)" fg:x="678" fg:w="1"/><text x="24.7531%" y="415.50"></text></g><g><title>__run_timers.part.0 (1 samples, 0.04%)</title><rect x="24.5031%" y="389" width="0.0361%" height="15" fill="rgb(218,185,22)" fg:x="678" fg:w="1"/><text x="24.7531%" y="399.50"></text></g><g><title>call_timer_fn (1 samples, 0.04%)</title><rect x="24.5031%" y="373" width="0.0361%" height="15" fill="rgb(225,218,4)" fg:x="678" fg:w="1"/><text x="24.7531%" y="383.50"></text></g><g><title>vbg_heartbeat_timer (1 samples, 0.04%)</title><rect x="24.5031%" y="357" width="0.0361%" height="15" fill="rgb(230,182,32)" fg:x="678" fg:w="1"/><text x="24.7531%" y="367.50"></text></g><g><title>vbg_req_perform (1 samples, 0.04%)</title><rect x="24.5031%" y="341" width="0.0361%" height="15" fill="rgb(242,56,43)" fg:x="678" fg:w="1"/><text x="24.7531%" y="351.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.07%)</title><rect x="24.5031%" y="533" width="0.0723%" height="15" fill="rgb(233,99,24)" fg:x="678" fg:w="2"/><text x="24.7531%" y="543.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.07%)</title><rect x="24.5031%" y="517" width="0.0723%" height="15" fill="rgb(234,209,42)" fg:x="678" fg:w="2"/><text x="24.7531%" y="527.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (2 samples, 0.07%)</title><rect x="24.5031%" y="501" width="0.0723%" height="15" fill="rgb(227,7,12)" fg:x="678" fg:w="2"/><text x="24.7531%" y="511.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (2 samples, 0.07%)</title><rect x="24.5031%" y="485" width="0.0723%" height="15" fill="rgb(245,203,43)" fg:x="678" fg:w="2"/><text x="24.7531%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.11%)</title><rect x="24.5754%" y="533" width="0.1084%" height="15" fill="rgb(238,205,33)" fg:x="680" fg:w="3"/><text x="24.8254%" y="543.50"></text></g><g><title>core::slice::sort::partition_in_blocks (62 samples, 2.24%)</title><rect x="22.5154%" y="549" width="2.2407%" height="15" fill="rgb(231,56,7)" fg:x="623" fg:w="62"/><text x="22.7654%" y="559.50">c..</text></g><g><title>core::num::&lt;impl u128&gt;::count_ones (15 samples, 0.54%)</title><rect x="24.7561%" y="501" width="0.5421%" height="15" fill="rgb(244,186,29)" fg:x="685" fg:w="15"/><text x="25.0061%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by::{{closure}} (16 samples, 0.58%)</title><rect x="24.7561%" y="549" width="0.5782%" height="15" fill="rgb(234,111,31)" fg:x="685" fg:w="16"/><text x="25.0061%" y="559.50"></text></g><g><title>wfc::wfc::queueprop_bitarrayset::QueuePropBitArraySet::find_minimal::{{closure}} (16 samples, 0.58%)</title><rect x="24.7561%" y="533" width="0.5782%" height="15" fill="rgb(241,149,10)" fg:x="685" fg:w="16"/><text x="25.0061%" y="543.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::len (16 samples, 0.58%)</title><rect x="24.7561%" y="517" width="0.5782%" height="15" fill="rgb(249,206,44)" fg:x="685" fg:w="16"/><text x="25.0061%" y="527.50"></text></g><g><title>core::slice::sort::partition (80 samples, 2.89%)</title><rect x="22.5154%" y="565" width="2.8912%" height="15" fill="rgb(251,153,30)" fg:x="623" fg:w="80"/><text x="22.7654%" y="575.50">co..</text></g><g><title>core::slice::sort::shift_tail (1 samples, 0.04%)</title><rect x="25.4066%" y="549" width="0.0361%" height="15" fill="rgb(239,152,38)" fg:x="703" fg:w="1"/><text x="25.6566%" y="559.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by::{{closure}} (1 samples, 0.04%)</title><rect x="25.4066%" y="533" width="0.0361%" height="15" fill="rgb(249,139,47)" fg:x="703" fg:w="1"/><text x="25.6566%" y="543.50"></text></g><g><title>wfc::wfc::queueprop_bitarrayset::QueuePropBitArraySet::find_minimal::{{closure}} (1 samples, 0.04%)</title><rect x="25.4066%" y="517" width="0.0361%" height="15" fill="rgb(244,64,35)" fg:x="703" fg:w="1"/><text x="25.6566%" y="527.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::len (1 samples, 0.04%)</title><rect x="25.4066%" y="501" width="0.0361%" height="15" fill="rgb(216,46,15)" fg:x="703" fg:w="1"/><text x="25.6566%" y="511.50"></text></g><g><title>core::num::&lt;impl u128&gt;::count_ones (2 samples, 0.07%)</title><rect x="25.4427%" y="501" width="0.0723%" height="15" fill="rgb(250,74,19)" fg:x="704" fg:w="2"/><text x="25.6927%" y="511.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::len (5 samples, 0.18%)</title><rect x="25.4427%" y="517" width="0.1807%" height="15" fill="rgb(249,42,33)" fg:x="704" fg:w="5"/><text x="25.6927%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by::{{closure}} (6 samples, 0.22%)</title><rect x="25.4427%" y="549" width="0.2168%" height="15" fill="rgb(242,149,17)" fg:x="704" fg:w="6"/><text x="25.6927%" y="559.50"></text></g><g><title>wfc::wfc::queueprop_bitarrayset::QueuePropBitArraySet::find_minimal::{{closure}} (6 samples, 0.22%)</title><rect x="25.4427%" y="533" width="0.2168%" height="15" fill="rgb(244,29,21)" fg:x="704" fg:w="6"/><text x="25.6927%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::partial_cmp (1 samples, 0.04%)</title><rect x="25.6234%" y="517" width="0.0361%" height="15" fill="rgb(220,130,37)" fg:x="709" fg:w="1"/><text x="25.8734%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (1 samples, 0.04%)</title><rect x="25.6234%" y="501" width="0.0361%" height="15" fill="rgb(211,67,2)" fg:x="709" fg:w="1"/><text x="25.8734%" y="511.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="25.6596%" y="549" width="0.0361%" height="15" fill="rgb(235,68,52)" fg:x="710" fg:w="1"/><text x="25.9096%" y="559.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="25.6596%" y="533" width="0.0361%" height="15" fill="rgb(246,142,3)" fg:x="710" fg:w="1"/><text x="25.9096%" y="543.50"></text></g><g><title>irqentry_exit (1 samples, 0.04%)</title><rect x="25.6596%" y="517" width="0.0361%" height="15" fill="rgb(241,25,7)" fg:x="710" fg:w="1"/><text x="25.9096%" y="527.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.04%)</title><rect x="25.6596%" y="501" width="0.0361%" height="15" fill="rgb(242,119,39)" fg:x="710" fg:w="1"/><text x="25.9096%" y="511.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.04%)</title><rect x="25.6596%" y="485" width="0.0361%" height="15" fill="rgb(241,98,45)" fg:x="710" fg:w="1"/><text x="25.9096%" y="495.50"></text></g><g><title>exit_to_user_mode_loop (1 samples, 0.04%)</title><rect x="25.6596%" y="469" width="0.0361%" height="15" fill="rgb(254,28,30)" fg:x="710" fg:w="1"/><text x="25.9096%" y="479.50"></text></g><g><title>schedule (1 samples, 0.04%)</title><rect x="25.6596%" y="453" width="0.0361%" height="15" fill="rgb(241,142,54)" fg:x="710" fg:w="1"/><text x="25.9096%" y="463.50"></text></g><g><title>__schedule (1 samples, 0.04%)</title><rect x="25.6596%" y="437" width="0.0361%" height="15" fill="rgb(222,85,15)" fg:x="710" fg:w="1"/><text x="25.9096%" y="447.50"></text></g><g><title>finish_task_switch.isra.0 (1 samples, 0.04%)</title><rect x="25.6596%" y="421" width="0.0361%" height="15" fill="rgb(210,85,47)" fg:x="710" fg:w="1"/><text x="25.9096%" y="431.50"></text></g><g><title>core::slice::sort::partial_insertion_sort (9 samples, 0.33%)</title><rect x="25.4066%" y="565" width="0.3253%" height="15" fill="rgb(224,206,25)" fg:x="703" fg:w="9"/><text x="25.6566%" y="575.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by::{{closure}} (1 samples, 0.04%)</title><rect x="25.7318%" y="501" width="0.0361%" height="15" fill="rgb(243,201,19)" fg:x="712" fg:w="1"/><text x="25.9818%" y="511.50"></text></g><g><title>wfc::wfc::queueprop_bitarrayset::QueuePropBitArraySet::find_minimal::{{closure}} (1 samples, 0.04%)</title><rect x="25.7318%" y="485" width="0.0361%" height="15" fill="rgb(236,59,4)" fg:x="712" fg:w="1"/><text x="25.9818%" y="495.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::len (1 samples, 0.04%)</title><rect x="25.7318%" y="469" width="0.0361%" height="15" fill="rgb(254,179,45)" fg:x="712" fg:w="1"/><text x="25.9818%" y="479.50"></text></g><g><title>core::num::&lt;impl u128&gt;::count_ones (1 samples, 0.04%)</title><rect x="25.7318%" y="453" width="0.0361%" height="15" fill="rgb(226,14,10)" fg:x="712" fg:w="1"/><text x="25.9818%" y="463.50"></text></g><g><title>core::slice::sort::choose_pivot (2 samples, 0.07%)</title><rect x="25.7318%" y="565" width="0.0723%" height="15" fill="rgb(244,27,41)" fg:x="712" fg:w="2"/><text x="25.9818%" y="575.50"></text></g><g><title>core::slice::sort::choose_pivot::{{closure}} (2 samples, 0.07%)</title><rect x="25.7318%" y="549" width="0.0723%" height="15" fill="rgb(235,35,32)" fg:x="712" fg:w="2"/><text x="25.9818%" y="559.50"></text></g><g><title>core::slice::sort::choose_pivot::{{closure}} (2 samples, 0.07%)</title><rect x="25.7318%" y="533" width="0.0723%" height="15" fill="rgb(218,68,31)" fg:x="712" fg:w="2"/><text x="25.9818%" y="543.50"></text></g><g><title>core::slice::sort::choose_pivot::{{closure}} (2 samples, 0.07%)</title><rect x="25.7318%" y="517" width="0.0723%" height="15" fill="rgb(207,120,37)" fg:x="712" fg:w="2"/><text x="25.9818%" y="527.50"></text></g><g><title>core::slice::sort::recurse (162 samples, 5.85%)</title><rect x="19.9855%" y="581" width="5.8547%" height="15" fill="rgb(227,98,0)" fg:x="553" fg:w="162"/><text x="20.2355%" y="591.50">core::s..</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="25.8403%" y="501" width="0.0361%" height="15" fill="rgb(207,7,3)" fg:x="715" fg:w="1"/><text x="26.0903%" y="511.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="25.8403%" y="485" width="0.0361%" height="15" fill="rgb(206,98,19)" fg:x="715" fg:w="1"/><text x="26.0903%" y="495.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.04%)</title><rect x="25.8403%" y="469" width="0.0361%" height="15" fill="rgb(217,5,26)" fg:x="715" fg:w="1"/><text x="26.0903%" y="479.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.04%)</title><rect x="25.8403%" y="453" width="0.0361%" height="15" fill="rgb(235,190,38)" fg:x="715" fg:w="1"/><text x="26.0903%" y="463.50"></text></g><g><title>run_timer_softirq (1 samples, 0.04%)</title><rect x="25.8403%" y="437" width="0.0361%" height="15" fill="rgb(247,86,24)" fg:x="715" fg:w="1"/><text x="26.0903%" y="447.50"></text></g><g><title>__run_timers.part.0 (1 samples, 0.04%)</title><rect x="25.8403%" y="421" width="0.0361%" height="15" fill="rgb(205,101,16)" fg:x="715" fg:w="1"/><text x="26.0903%" y="431.50"></text></g><g><title>call_timer_fn (1 samples, 0.04%)</title><rect x="25.8403%" y="405" width="0.0361%" height="15" fill="rgb(246,168,33)" fg:x="715" fg:w="1"/><text x="26.0903%" y="415.50"></text></g><g><title>vbg_heartbeat_timer (1 samples, 0.04%)</title><rect x="25.8403%" y="389" width="0.0361%" height="15" fill="rgb(231,114,1)" fg:x="715" fg:w="1"/><text x="26.0903%" y="399.50"></text></g><g><title>vbg_req_perform (1 samples, 0.04%)</title><rect x="25.8403%" y="373" width="0.0361%" height="15" fill="rgb(207,184,53)" fg:x="715" fg:w="1"/><text x="26.0903%" y="383.50"></text></g><g><title>core::num::&lt;impl u128&gt;::count_ones (99 samples, 3.58%)</title><rect x="25.8403%" y="517" width="3.5779%" height="15" fill="rgb(224,95,51)" fg:x="715" fg:w="99"/><text x="26.0903%" y="527.50">core..</text></g><g><title>wfc::wfc::bits256_set::Bits256Set::len (115 samples, 4.16%)</title><rect x="25.8403%" y="533" width="4.1561%" height="15" fill="rgb(212,188,45)" fg:x="715" fg:w="115"/><text x="26.0903%" y="543.50">wfc::..</text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by::{{closure}} (119 samples, 4.30%)</title><rect x="25.8403%" y="565" width="4.3007%" height="15" fill="rgb(223,154,38)" fg:x="715" fg:w="119"/><text x="26.0903%" y="575.50">core:..</text></g><g><title>wfc::wfc::queueprop_bitarrayset::QueuePropBitArraySet::find_minimal::{{closure}} (119 samples, 4.30%)</title><rect x="25.8403%" y="549" width="4.3007%" height="15" fill="rgb(251,22,52)" fg:x="715" fg:w="119"/><text x="26.0903%" y="559.50">wfc::..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::partial_cmp (4 samples, 0.14%)</title><rect x="29.9964%" y="533" width="0.1446%" height="15" fill="rgb(229,209,22)" fg:x="830" fg:w="4"/><text x="30.2464%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (4 samples, 0.14%)</title><rect x="29.9964%" y="517" width="0.1446%" height="15" fill="rgb(234,138,34)" fg:x="830" fg:w="4"/><text x="30.2464%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.11%)</title><rect x="30.1409%" y="549" width="0.1084%" height="15" fill="rgb(212,95,11)" fg:x="834" fg:w="3"/><text x="30.3909%" y="559.50"></text></g><g><title>core::ptr::swap (4 samples, 0.14%)</title><rect x="30.1409%" y="565" width="0.1446%" height="15" fill="rgb(240,179,47)" fg:x="834" fg:w="4"/><text x="30.3909%" y="575.50"></text></g><g><title>core::intrinsics::copy (1 samples, 0.04%)</title><rect x="30.2494%" y="549" width="0.0361%" height="15" fill="rgb(240,163,11)" fg:x="837" fg:w="1"/><text x="30.4994%" y="559.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="30.2855%" y="565" width="0.0361%" height="15" fill="rgb(236,37,12)" fg:x="838" fg:w="1"/><text x="30.5355%" y="575.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="30.2855%" y="549" width="0.0361%" height="15" fill="rgb(232,164,16)" fg:x="838" fg:w="1"/><text x="30.5355%" y="559.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.04%)</title><rect x="30.2855%" y="533" width="0.0361%" height="15" fill="rgb(244,205,15)" fg:x="838" fg:w="1"/><text x="30.5355%" y="543.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.04%)</title><rect x="30.2855%" y="517" width="0.0361%" height="15" fill="rgb(223,117,47)" fg:x="838" fg:w="1"/><text x="30.5355%" y="527.50"></text></g><g><title>core::slice::sort::partition_equal (135 samples, 4.88%)</title><rect x="25.8403%" y="581" width="4.8789%" height="15" fill="rgb(244,107,35)" fg:x="715" fg:w="135"/><text x="26.0903%" y="591.50">core::..</text></g><g><title>asm_sysvec_apic_timer_interrupt (2 samples, 0.07%)</title><rect x="30.7192%" y="485" width="0.0723%" height="15" fill="rgb(205,140,8)" fg:x="850" fg:w="2"/><text x="30.9692%" y="495.50"></text></g><g><title>sysvec_apic_timer_interrupt (2 samples, 0.07%)</title><rect x="30.7192%" y="469" width="0.0723%" height="15" fill="rgb(228,84,46)" fg:x="850" fg:w="2"/><text x="30.9692%" y="479.50"></text></g><g><title>irq_exit_rcu (2 samples, 0.07%)</title><rect x="30.7192%" y="453" width="0.0723%" height="15" fill="rgb(254,188,9)" fg:x="850" fg:w="2"/><text x="30.9692%" y="463.50"></text></g><g><title>__softirqentry_text_start (2 samples, 0.07%)</title><rect x="30.7192%" y="437" width="0.0723%" height="15" fill="rgb(206,112,54)" fg:x="850" fg:w="2"/><text x="30.9692%" y="447.50"></text></g><g><title>run_timer_softirq (2 samples, 0.07%)</title><rect x="30.7192%" y="421" width="0.0723%" height="15" fill="rgb(216,84,49)" fg:x="850" fg:w="2"/><text x="30.9692%" y="431.50"></text></g><g><title>__run_timers.part.0 (2 samples, 0.07%)</title><rect x="30.7192%" y="405" width="0.0723%" height="15" fill="rgb(214,194,35)" fg:x="850" fg:w="2"/><text x="30.9692%" y="415.50"></text></g><g><title>call_timer_fn (2 samples, 0.07%)</title><rect x="30.7192%" y="389" width="0.0723%" height="15" fill="rgb(249,28,3)" fg:x="850" fg:w="2"/><text x="30.9692%" y="399.50"></text></g><g><title>vbg_heartbeat_timer (2 samples, 0.07%)</title><rect x="30.7192%" y="373" width="0.0723%" height="15" fill="rgb(222,56,52)" fg:x="850" fg:w="2"/><text x="30.9692%" y="383.50"></text></g><g><title>vbg_req_perform (2 samples, 0.07%)</title><rect x="30.7192%" y="357" width="0.0723%" height="15" fill="rgb(245,217,50)" fg:x="850" fg:w="2"/><text x="30.9692%" y="367.50"></text></g><g><title>asm_common_interrupt (1 samples, 0.04%)</title><rect x="30.7915%" y="485" width="0.0361%" height="15" fill="rgb(213,201,24)" fg:x="852" fg:w="1"/><text x="31.0415%" y="495.50"></text></g><g><title>common_interrupt (1 samples, 0.04%)</title><rect x="30.7915%" y="469" width="0.0361%" height="15" fill="rgb(248,116,28)" fg:x="852" fg:w="1"/><text x="31.0415%" y="479.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.04%)</title><rect x="30.7915%" y="453" width="0.0361%" height="15" fill="rgb(219,72,43)" fg:x="852" fg:w="1"/><text x="31.0415%" y="463.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.04%)</title><rect x="30.7915%" y="437" width="0.0361%" height="15" fill="rgb(209,138,14)" fg:x="852" fg:w="1"/><text x="31.0415%" y="447.50"></text></g><g><title>core::num::&lt;impl u128&gt;::count_ones (70 samples, 2.53%)</title><rect x="30.7192%" y="501" width="2.5298%" height="15" fill="rgb(222,18,33)" fg:x="850" fg:w="70"/><text x="30.9692%" y="511.50">co..</text></g><g><title>asm_sysvec_apic_timer_interrupt (3 samples, 0.11%)</title><rect x="33.2490%" y="501" width="0.1084%" height="15" fill="rgb(213,199,7)" fg:x="920" fg:w="3"/><text x="33.4990%" y="511.50"></text></g><g><title>sysvec_apic_timer_interrupt (3 samples, 0.11%)</title><rect x="33.2490%" y="485" width="0.1084%" height="15" fill="rgb(250,110,10)" fg:x="920" fg:w="3"/><text x="33.4990%" y="495.50"></text></g><g><title>irq_exit_rcu (3 samples, 0.11%)</title><rect x="33.2490%" y="469" width="0.1084%" height="15" fill="rgb(248,123,6)" fg:x="920" fg:w="3"/><text x="33.4990%" y="479.50"></text></g><g><title>__softirqentry_text_start (3 samples, 0.11%)</title><rect x="33.2490%" y="453" width="0.1084%" height="15" fill="rgb(206,91,31)" fg:x="920" fg:w="3"/><text x="33.4990%" y="463.50"></text></g><g><title>run_timer_softirq (3 samples, 0.11%)</title><rect x="33.2490%" y="437" width="0.1084%" height="15" fill="rgb(211,154,13)" fg:x="920" fg:w="3"/><text x="33.4990%" y="447.50"></text></g><g><title>__run_timers.part.0 (3 samples, 0.11%)</title><rect x="33.2490%" y="421" width="0.1084%" height="15" fill="rgb(225,148,7)" fg:x="920" fg:w="3"/><text x="33.4990%" y="431.50"></text></g><g><title>call_timer_fn (3 samples, 0.11%)</title><rect x="33.2490%" y="405" width="0.1084%" height="15" fill="rgb(220,160,43)" fg:x="920" fg:w="3"/><text x="33.4990%" y="415.50"></text></g><g><title>vbg_heartbeat_timer (3 samples, 0.11%)</title><rect x="33.2490%" y="389" width="0.1084%" height="15" fill="rgb(213,52,39)" fg:x="920" fg:w="3"/><text x="33.4990%" y="399.50"></text></g><g><title>vbg_req_perform (3 samples, 0.11%)</title><rect x="33.2490%" y="373" width="0.1084%" height="15" fill="rgb(243,137,7)" fg:x="920" fg:w="3"/><text x="33.4990%" y="383.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::len (136 samples, 4.92%)</title><rect x="30.7192%" y="517" width="4.9151%" height="15" fill="rgb(230,79,13)" fg:x="850" fg:w="136"/><text x="30.9692%" y="527.50">wfc::w..</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="35.6343%" y="485" width="0.0361%" height="15" fill="rgb(247,105,23)" fg:x="986" fg:w="1"/><text x="35.8843%" y="495.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="35.6343%" y="469" width="0.0361%" height="15" fill="rgb(223,179,41)" fg:x="986" fg:w="1"/><text x="35.8843%" y="479.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.04%)</title><rect x="35.6343%" y="453" width="0.0361%" height="15" fill="rgb(218,9,34)" fg:x="986" fg:w="1"/><text x="35.8843%" y="463.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.04%)</title><rect x="35.6343%" y="437" width="0.0361%" height="15" fill="rgb(222,106,8)" fg:x="986" fg:w="1"/><text x="35.8843%" y="447.50"></text></g><g><title>run_timer_softirq (1 samples, 0.04%)</title><rect x="35.6343%" y="421" width="0.0361%" height="15" fill="rgb(211,220,0)" fg:x="986" fg:w="1"/><text x="35.8843%" y="431.50"></text></g><g><title>__run_timers.part.0 (1 samples, 0.04%)</title><rect x="35.6343%" y="405" width="0.0361%" height="15" fill="rgb(229,52,16)" fg:x="986" fg:w="1"/><text x="35.8843%" y="415.50"></text></g><g><title>call_timer_fn (1 samples, 0.04%)</title><rect x="35.6343%" y="389" width="0.0361%" height="15" fill="rgb(212,155,18)" fg:x="986" fg:w="1"/><text x="35.8843%" y="399.50"></text></g><g><title>vbg_heartbeat_timer (1 samples, 0.04%)</title><rect x="35.6343%" y="373" width="0.0361%" height="15" fill="rgb(242,21,14)" fg:x="986" fg:w="1"/><text x="35.8843%" y="383.50"></text></g><g><title>vbg_req_perform (1 samples, 0.04%)</title><rect x="35.6343%" y="357" width="0.0361%" height="15" fill="rgb(222,19,48)" fg:x="986" fg:w="1"/><text x="35.8843%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by::{{closure}} (150 samples, 5.42%)</title><rect x="30.7192%" y="549" width="5.4210%" height="15" fill="rgb(232,45,27)" fg:x="850" fg:w="150"/><text x="30.9692%" y="559.50">core::s..</text></g><g><title>wfc::wfc::queueprop_bitarrayset::QueuePropBitArraySet::find_minimal::{{closure}} (150 samples, 5.42%)</title><rect x="30.7192%" y="533" width="5.4210%" height="15" fill="rgb(249,103,42)" fg:x="850" fg:w="150"/><text x="30.9692%" y="543.50">wfc::wf..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::partial_cmp (14 samples, 0.51%)</title><rect x="35.6343%" y="517" width="0.5060%" height="15" fill="rgb(246,81,33)" fg:x="986" fg:w="14"/><text x="35.8843%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (14 samples, 0.51%)</title><rect x="35.6343%" y="501" width="0.5060%" height="15" fill="rgb(252,33,42)" fg:x="986" fg:w="14"/><text x="35.8843%" y="511.50"></text></g><g><title>core::ptr::swap (1 samples, 0.04%)</title><rect x="36.1402%" y="549" width="0.0361%" height="15" fill="rgb(209,212,41)" fg:x="1000" fg:w="1"/><text x="36.3902%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="36.1402%" y="533" width="0.0361%" height="15" fill="rgb(207,154,6)" fg:x="1000" fg:w="1"/><text x="36.3902%" y="543.50"></text></g><g><title>core::ptr::read (1 samples, 0.04%)</title><rect x="36.1764%" y="549" width="0.0361%" height="15" fill="rgb(223,64,47)" fg:x="1001" fg:w="1"/><text x="36.4264%" y="559.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (1 samples, 0.04%)</title><rect x="36.1764%" y="533" width="0.0361%" height="15" fill="rgb(211,161,38)" fg:x="1001" fg:w="1"/><text x="36.4264%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.04%)</title><rect x="36.2125%" y="549" width="0.0361%" height="15" fill="rgb(219,138,40)" fg:x="1002" fg:w="1"/><text x="36.4625%" y="559.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (1 samples, 0.04%)</title><rect x="36.2125%" y="533" width="0.0361%" height="15" fill="rgb(241,228,46)" fg:x="1002" fg:w="1"/><text x="36.4625%" y="543.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (1 samples, 0.04%)</title><rect x="36.2125%" y="517" width="0.0361%" height="15" fill="rgb(223,209,38)" fg:x="1002" fg:w="1"/><text x="36.4625%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.04%)</title><rect x="36.2486%" y="549" width="0.0361%" height="15" fill="rgb(236,164,45)" fg:x="1003" fg:w="1"/><text x="36.4986%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.04%)</title><rect x="36.2486%" y="533" width="0.0361%" height="15" fill="rgb(231,15,5)" fg:x="1003" fg:w="1"/><text x="36.4986%" y="543.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.07%)</title><rect x="36.2848%" y="549" width="0.0723%" height="15" fill="rgb(252,35,15)" fg:x="1004" fg:w="2"/><text x="36.5348%" y="559.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.07%)</title><rect x="36.2848%" y="533" width="0.0723%" height="15" fill="rgb(248,181,18)" fg:x="1004" fg:w="2"/><text x="36.5348%" y="543.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (2 samples, 0.07%)</title><rect x="36.2848%" y="517" width="0.0723%" height="15" fill="rgb(233,39,42)" fg:x="1004" fg:w="2"/><text x="36.5348%" y="527.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (2 samples, 0.07%)</title><rect x="36.2848%" y="501" width="0.0723%" height="15" fill="rgb(238,110,33)" fg:x="1004" fg:w="2"/><text x="36.5348%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.07%)</title><rect x="36.3571%" y="549" width="0.0723%" height="15" fill="rgb(233,195,10)" fg:x="1006" fg:w="2"/><text x="36.6071%" y="559.50"></text></g><g><title>core::slice::sort::partition_in_blocks (159 samples, 5.75%)</title><rect x="30.7192%" y="565" width="5.7463%" height="15" fill="rgb(254,105,3)" fg:x="850" fg:w="159"/><text x="30.9692%" y="575.50">core::s..</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="36.4655%" y="501" width="0.0361%" height="15" fill="rgb(221,225,9)" fg:x="1009" fg:w="1"/><text x="36.7155%" y="511.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="36.4655%" y="485" width="0.0361%" height="15" fill="rgb(224,227,45)" fg:x="1009" fg:w="1"/><text x="36.7155%" y="495.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.04%)</title><rect x="36.4655%" y="469" width="0.0361%" height="15" fill="rgb(229,198,43)" fg:x="1009" fg:w="1"/><text x="36.7155%" y="479.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.04%)</title><rect x="36.4655%" y="453" width="0.0361%" height="15" fill="rgb(206,209,35)" fg:x="1009" fg:w="1"/><text x="36.7155%" y="463.50"></text></g><g><title>run_timer_softirq (1 samples, 0.04%)</title><rect x="36.4655%" y="437" width="0.0361%" height="15" fill="rgb(245,195,53)" fg:x="1009" fg:w="1"/><text x="36.7155%" y="447.50"></text></g><g><title>__run_timers.part.0 (1 samples, 0.04%)</title><rect x="36.4655%" y="421" width="0.0361%" height="15" fill="rgb(240,92,26)" fg:x="1009" fg:w="1"/><text x="36.7155%" y="431.50"></text></g><g><title>call_timer_fn (1 samples, 0.04%)</title><rect x="36.4655%" y="405" width="0.0361%" height="15" fill="rgb(207,40,23)" fg:x="1009" fg:w="1"/><text x="36.7155%" y="415.50"></text></g><g><title>vbg_heartbeat_timer (1 samples, 0.04%)</title><rect x="36.4655%" y="389" width="0.0361%" height="15" fill="rgb(223,111,35)" fg:x="1009" fg:w="1"/><text x="36.7155%" y="399.50"></text></g><g><title>vbg_req_perform (1 samples, 0.04%)</title><rect x="36.4655%" y="373" width="0.0361%" height="15" fill="rgb(229,147,28)" fg:x="1009" fg:w="1"/><text x="36.7155%" y="383.50"></text></g><g><title>core::num::&lt;impl u128&gt;::count_ones (27 samples, 0.98%)</title><rect x="36.4655%" y="517" width="0.9758%" height="15" fill="rgb(211,29,28)" fg:x="1009" fg:w="27"/><text x="36.7155%" y="527.50"></text></g><g><title>asm_common_interrupt (1 samples, 0.04%)</title><rect x="37.4413%" y="517" width="0.0361%" height="15" fill="rgb(228,72,33)" fg:x="1036" fg:w="1"/><text x="37.6913%" y="527.50"></text></g><g><title>common_interrupt (1 samples, 0.04%)</title><rect x="37.4413%" y="501" width="0.0361%" height="15" fill="rgb(205,214,31)" fg:x="1036" fg:w="1"/><text x="37.6913%" y="511.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.04%)</title><rect x="37.4413%" y="485" width="0.0361%" height="15" fill="rgb(224,111,15)" fg:x="1036" fg:w="1"/><text x="37.6913%" y="495.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.04%)</title><rect x="37.4413%" y="469" width="0.0361%" height="15" fill="rgb(253,21,26)" fg:x="1036" fg:w="1"/><text x="37.6913%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by::{{closure}} (30 samples, 1.08%)</title><rect x="36.4655%" y="565" width="1.0842%" height="15" fill="rgb(245,139,43)" fg:x="1009" fg:w="30"/><text x="36.7155%" y="575.50"></text></g><g><title>wfc::wfc::queueprop_bitarrayset::QueuePropBitArraySet::find_minimal::{{closure}} (30 samples, 1.08%)</title><rect x="36.4655%" y="549" width="1.0842%" height="15" fill="rgb(252,170,7)" fg:x="1009" fg:w="30"/><text x="36.7155%" y="559.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::len (30 samples, 1.08%)</title><rect x="36.4655%" y="533" width="1.0842%" height="15" fill="rgb(231,118,14)" fg:x="1009" fg:w="30"/><text x="36.7155%" y="543.50"></text></g><g><title>core::slice::sort::partition (195 samples, 7.05%)</title><rect x="30.7192%" y="581" width="7.0473%" height="15" fill="rgb(238,83,0)" fg:x="850" fg:w="195"/><text x="30.9692%" y="591.50">core::sli..</text></g><g><title>core::slice::sort::shift_tail (1 samples, 0.04%)</title><rect x="37.7665%" y="565" width="0.0361%" height="15" fill="rgb(221,39,39)" fg:x="1045" fg:w="1"/><text x="38.0165%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="37.7665%" y="549" width="0.0361%" height="15" fill="rgb(222,119,46)" fg:x="1045" fg:w="1"/><text x="38.0165%" y="559.50"></text></g><g><title>core::num::&lt;impl u128&gt;::count_ones (1 samples, 0.04%)</title><rect x="37.8027%" y="517" width="0.0361%" height="15" fill="rgb(222,165,49)" fg:x="1046" fg:w="1"/><text x="38.0527%" y="527.50"></text></g><g><title>core::slice::sort::partial_insertion_sort (3 samples, 0.11%)</title><rect x="37.7665%" y="581" width="0.1084%" height="15" fill="rgb(219,113,52)" fg:x="1045" fg:w="3"/><text x="38.0165%" y="591.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by::{{closure}} (2 samples, 0.07%)</title><rect x="37.8027%" y="565" width="0.0723%" height="15" fill="rgb(214,7,15)" fg:x="1046" fg:w="2"/><text x="38.0527%" y="575.50"></text></g><g><title>wfc::wfc::queueprop_bitarrayset::QueuePropBitArraySet::find_minimal::{{closure}} (2 samples, 0.07%)</title><rect x="37.8027%" y="549" width="0.0723%" height="15" fill="rgb(235,32,4)" fg:x="1046" fg:w="2"/><text x="38.0527%" y="559.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::len (2 samples, 0.07%)</title><rect x="37.8027%" y="533" width="0.0723%" height="15" fill="rgb(238,90,54)" fg:x="1046" fg:w="2"/><text x="38.0527%" y="543.50"></text></g><g><title>core::slice::sort::choose_pivot (2 samples, 0.07%)</title><rect x="37.8750%" y="581" width="0.0723%" height="15" fill="rgb(213,208,19)" fg:x="1048" fg:w="2"/><text x="38.1250%" y="591.50"></text></g><g><title>core::slice::sort::choose_pivot::{{closure}} (2 samples, 0.07%)</title><rect x="37.8750%" y="565" width="0.0723%" height="15" fill="rgb(233,156,4)" fg:x="1048" fg:w="2"/><text x="38.1250%" y="575.50"></text></g><g><title>core::slice::sort::choose_pivot::{{closure}} (2 samples, 0.07%)</title><rect x="37.8750%" y="549" width="0.0723%" height="15" fill="rgb(207,194,5)" fg:x="1048" fg:w="2"/><text x="38.1250%" y="559.50"></text></g><g><title>core::slice::sort::choose_pivot::{{closure}} (2 samples, 0.07%)</title><rect x="37.8750%" y="533" width="0.0723%" height="15" fill="rgb(206,111,30)" fg:x="1048" fg:w="2"/><text x="38.1250%" y="543.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by::{{closure}} (2 samples, 0.07%)</title><rect x="37.8750%" y="517" width="0.0723%" height="15" fill="rgb(243,70,54)" fg:x="1048" fg:w="2"/><text x="38.1250%" y="527.50"></text></g><g><title>wfc::wfc::queueprop_bitarrayset::QueuePropBitArraySet::find_minimal::{{closure}} (2 samples, 0.07%)</title><rect x="37.8750%" y="501" width="0.0723%" height="15" fill="rgb(242,28,8)" fg:x="1048" fg:w="2"/><text x="38.1250%" y="511.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::len (2 samples, 0.07%)</title><rect x="37.8750%" y="485" width="0.0723%" height="15" fill="rgb(219,106,18)" fg:x="1048" fg:w="2"/><text x="38.1250%" y="495.50"></text></g><g><title>core::num::&lt;impl u128&gt;::count_ones (2 samples, 0.07%)</title><rect x="37.8750%" y="469" width="0.0723%" height="15" fill="rgb(244,222,10)" fg:x="1048" fg:w="2"/><text x="38.1250%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by (498 samples, 18.00%)</title><rect x="19.9855%" y="629" width="17.9978%" height="15" fill="rgb(236,179,52)" fg:x="553" fg:w="498"/><text x="20.2355%" y="639.50">core::slice::&lt;impl [T]&gt;::sor..</text></g><g><title>core::slice::sort::quicksort (498 samples, 18.00%)</title><rect x="19.9855%" y="613" width="17.9978%" height="15" fill="rgb(213,23,39)" fg:x="553" fg:w="498"/><text x="20.2355%" y="623.50">core::slice::sort::quicksort</text></g><g><title>core::slice::sort::recurse (498 samples, 18.00%)</title><rect x="19.9855%" y="597" width="17.9978%" height="15" fill="rgb(238,48,10)" fg:x="553" fg:w="498"/><text x="20.2355%" y="607.50">core::slice::sort::recurse</text></g><g><title>wfc::wfc::queueprop_bitarrayset::QueuePropBitArraySet::find_minimal::{{closure}} (7 samples, 0.25%)</title><rect x="37.9834%" y="485" width="0.2530%" height="15" fill="rgb(251,196,23)" fg:x="1051" fg:w="7"/><text x="38.2334%" y="495.50"></text></g><g><title>wfc::wfc::vec3d::Vec3D&lt;T&gt;::get (7 samples, 0.25%)</title><rect x="37.9834%" y="469" width="0.2530%" height="15" fill="rgb(250,152,24)" fg:x="1051" fg:w="7"/><text x="38.2334%" y="479.50"></text></g><g><title>core::num::&lt;impl u128&gt;::count_ones (12 samples, 0.43%)</title><rect x="38.2364%" y="421" width="0.4337%" height="15" fill="rgb(209,150,17)" fg:x="1058" fg:w="12"/><text x="38.4864%" y="431.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (13 samples, 0.47%)</title><rect x="38.2364%" y="469" width="0.4698%" height="15" fill="rgb(234,202,34)" fg:x="1058" fg:w="13"/><text x="38.4864%" y="479.50"></text></g><g><title>wfc::wfc::queueprop_bitarrayset::QueuePropBitArraySet::find_minimal::{{closure}} (13 samples, 0.47%)</title><rect x="38.2364%" y="453" width="0.4698%" height="15" fill="rgb(253,148,53)" fg:x="1058" fg:w="13"/><text x="38.4864%" y="463.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::len (13 samples, 0.47%)</title><rect x="38.2364%" y="437" width="0.4698%" height="15" fill="rgb(218,129,16)" fg:x="1058" fg:w="13"/><text x="38.4864%" y="447.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (21 samples, 0.76%)</title><rect x="37.9834%" y="501" width="0.7589%" height="15" fill="rgb(216,85,19)" fg:x="1051" fg:w="21"/><text x="38.2334%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (14 samples, 0.51%)</title><rect x="38.2364%" y="485" width="0.5060%" height="15" fill="rgb(235,228,7)" fg:x="1058" fg:w="14"/><text x="38.4864%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 1.16%)</title><rect x="37.9834%" y="565" width="1.1565%" height="15" fill="rgb(245,175,0)" fg:x="1051" fg:w="32"/><text x="38.2334%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (32 samples, 1.16%)</title><rect x="37.9834%" y="549" width="1.1565%" height="15" fill="rgb(208,168,36)" fg:x="1051" fg:w="32"/><text x="38.2334%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (32 samples, 1.16%)</title><rect x="37.9834%" y="533" width="1.1565%" height="15" fill="rgb(246,171,24)" fg:x="1051" fg:w="32"/><text x="38.2334%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (32 samples, 1.16%)</title><rect x="37.9834%" y="517" width="1.1565%" height="15" fill="rgb(215,142,24)" fg:x="1051" fg:w="32"/><text x="38.2334%" y="527.50"></text></g><g><title>&lt;wfc::wfc::vec3d::PosIter3D as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.40%)</title><rect x="38.7423%" y="501" width="0.3975%" height="15" fill="rgb(250,187,7)" fg:x="1072" fg:w="11"/><text x="38.9923%" y="511.50"></text></g><g><title>wfc::wfc::vec3d::get_pos_from_index (11 samples, 0.40%)</title><rect x="38.7423%" y="485" width="0.3975%" height="15" fill="rgb(228,66,33)" fg:x="1072" fg:w="11"/><text x="38.9923%" y="495.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="39.1399%" y="517" width="0.0361%" height="15" fill="rgb(234,215,21)" fg:x="1083" fg:w="1"/><text x="39.3899%" y="527.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="39.1399%" y="501" width="0.0361%" height="15" fill="rgb(222,191,20)" fg:x="1083" fg:w="1"/><text x="39.3899%" y="511.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.04%)</title><rect x="39.1399%" y="485" width="0.0361%" height="15" fill="rgb(245,79,54)" fg:x="1083" fg:w="1"/><text x="39.3899%" y="495.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.04%)</title><rect x="39.1399%" y="469" width="0.0361%" height="15" fill="rgb(240,10,37)" fg:x="1083" fg:w="1"/><text x="39.3899%" y="479.50"></text></g><g><title>core::ptr::write (22 samples, 0.80%)</title><rect x="39.1399%" y="533" width="0.7951%" height="15" fill="rgb(214,192,32)" fg:x="1083" fg:w="22"/><text x="39.3899%" y="543.50"></text></g><g><title>run_timer_softirq (1 samples, 0.04%)</title><rect x="39.9349%" y="469" width="0.0361%" height="15" fill="rgb(209,36,54)" fg:x="1105" fg:w="1"/><text x="40.1849%" y="479.50"></text></g><g><title>__run_timers.part.0 (1 samples, 0.04%)</title><rect x="39.9349%" y="453" width="0.0361%" height="15" fill="rgb(220,10,11)" fg:x="1105" fg:w="1"/><text x="40.1849%" y="463.50"></text></g><g><title>call_timer_fn (1 samples, 0.04%)</title><rect x="39.9349%" y="437" width="0.0361%" height="15" fill="rgb(221,106,17)" fg:x="1105" fg:w="1"/><text x="40.1849%" y="447.50"></text></g><g><title>vbg_heartbeat_timer (1 samples, 0.04%)</title><rect x="39.9349%" y="421" width="0.0361%" height="15" fill="rgb(251,142,44)" fg:x="1105" fg:w="1"/><text x="40.1849%" y="431.50"></text></g><g><title>vbg_req_perform (1 samples, 0.04%)</title><rect x="39.9349%" y="405" width="0.0361%" height="15" fill="rgb(238,13,15)" fg:x="1105" fg:w="1"/><text x="40.1849%" y="415.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (2 samples, 0.07%)</title><rect x="39.9349%" y="533" width="0.0723%" height="15" fill="rgb(208,107,27)" fg:x="1105" fg:w="2"/><text x="40.1849%" y="543.50"></text></g><g><title>sysvec_apic_timer_interrupt (2 samples, 0.07%)</title><rect x="39.9349%" y="517" width="0.0723%" height="15" fill="rgb(205,136,37)" fg:x="1105" fg:w="2"/><text x="40.1849%" y="527.50"></text></g><g><title>irq_exit_rcu (2 samples, 0.07%)</title><rect x="39.9349%" y="501" width="0.0723%" height="15" fill="rgb(250,205,27)" fg:x="1105" fg:w="2"/><text x="40.1849%" y="511.50"></text></g><g><title>__softirqentry_text_start (2 samples, 0.07%)</title><rect x="39.9349%" y="485" width="0.0723%" height="15" fill="rgb(210,80,43)" fg:x="1105" fg:w="2"/><text x="40.1849%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.04%)</title><rect x="40.0072%" y="533" width="0.0361%" height="15" fill="rgb(247,160,36)" fg:x="1107" fg:w="1"/><text x="40.2572%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.04%)</title><rect x="40.0072%" y="517" width="0.0361%" height="15" fill="rgb(234,13,49)" fg:x="1107" fg:w="1"/><text x="40.2572%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.04%)</title><rect x="40.0072%" y="501" width="0.0361%" height="15" fill="rgb(234,122,0)" fg:x="1107" fg:w="1"/><text x="40.2572%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.04%)</title><rect x="40.0072%" y="485" width="0.0361%" height="15" fill="rgb(207,146,38)" fg:x="1107" fg:w="1"/><text x="40.2572%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.04%)</title><rect x="40.0072%" y="469" width="0.0361%" height="15" fill="rgb(207,177,25)" fg:x="1107" fg:w="1"/><text x="40.2572%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.04%)</title><rect x="40.0072%" y="453" width="0.0361%" height="15" fill="rgb(211,178,42)" fg:x="1107" fg:w="1"/><text x="40.2572%" y="463.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.04%)</title><rect x="40.0072%" y="437" width="0.0361%" height="15" fill="rgb(230,69,54)" fg:x="1107" fg:w="1"/><text x="40.2572%" y="447.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.04%)</title><rect x="40.0072%" y="421" width="0.0361%" height="15" fill="rgb(214,135,41)" fg:x="1107" fg:w="1"/><text x="40.2572%" y="431.50"></text></g><g><title>realloc (1 samples, 0.04%)</title><rect x="40.0072%" y="405" width="0.0361%" height="15" fill="rgb(237,67,25)" fg:x="1107" fg:w="1"/><text x="40.2572%" y="415.50"></text></g><g><title>run_timer_softirq (5 samples, 0.18%)</title><rect x="40.0434%" y="357" width="0.1807%" height="15" fill="rgb(222,189,50)" fg:x="1108" fg:w="5"/><text x="40.2934%" y="367.50"></text></g><g><title>__run_timers.part.0 (5 samples, 0.18%)</title><rect x="40.0434%" y="341" width="0.1807%" height="15" fill="rgb(245,148,34)" fg:x="1108" fg:w="5"/><text x="40.2934%" y="351.50"></text></g><g><title>call_timer_fn (5 samples, 0.18%)</title><rect x="40.0434%" y="325" width="0.1807%" height="15" fill="rgb(222,29,6)" fg:x="1108" fg:w="5"/><text x="40.2934%" y="335.50"></text></g><g><title>vbg_heartbeat_timer (5 samples, 0.18%)</title><rect x="40.0434%" y="309" width="0.1807%" height="15" fill="rgb(221,189,43)" fg:x="1108" fg:w="5"/><text x="40.2934%" y="319.50"></text></g><g><title>vbg_req_perform (5 samples, 0.18%)</title><rect x="40.0434%" y="293" width="0.1807%" height="15" fill="rgb(207,36,27)" fg:x="1108" fg:w="5"/><text x="40.2934%" y="303.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (6 samples, 0.22%)</title><rect x="40.0434%" y="421" width="0.2168%" height="15" fill="rgb(217,90,24)" fg:x="1108" fg:w="6"/><text x="40.2934%" y="431.50"></text></g><g><title>sysvec_apic_timer_interrupt (6 samples, 0.22%)</title><rect x="40.0434%" y="405" width="0.2168%" height="15" fill="rgb(224,66,35)" fg:x="1108" fg:w="6"/><text x="40.2934%" y="415.50"></text></g><g><title>irq_exit_rcu (6 samples, 0.22%)</title><rect x="40.0434%" y="389" width="0.2168%" height="15" fill="rgb(221,13,50)" fg:x="1108" fg:w="6"/><text x="40.2934%" y="399.50"></text></g><g><title>__softirqentry_text_start (6 samples, 0.22%)</title><rect x="40.0434%" y="373" width="0.2168%" height="15" fill="rgb(236,68,49)" fg:x="1108" fg:w="6"/><text x="40.2934%" y="383.50"></text></g><g><title>asm_common_interrupt (2 samples, 0.07%)</title><rect x="40.2602%" y="421" width="0.0723%" height="15" fill="rgb(229,146,28)" fg:x="1114" fg:w="2"/><text x="40.5102%" y="431.50"></text></g><g><title>common_interrupt (2 samples, 0.07%)</title><rect x="40.2602%" y="405" width="0.0723%" height="15" fill="rgb(225,31,38)" fg:x="1114" fg:w="2"/><text x="40.5102%" y="415.50"></text></g><g><title>irq_exit_rcu (2 samples, 0.07%)</title><rect x="40.2602%" y="389" width="0.0723%" height="15" fill="rgb(250,208,3)" fg:x="1114" fg:w="2"/><text x="40.5102%" y="399.50"></text></g><g><title>__softirqentry_text_start (2 samples, 0.07%)</title><rect x="40.2602%" y="373" width="0.0723%" height="15" fill="rgb(246,54,23)" fg:x="1114" fg:w="2"/><text x="40.5102%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (39 samples, 1.41%)</title><rect x="40.3325%" y="421" width="1.4095%" height="15" fill="rgb(243,76,11)" fg:x="1116" fg:w="39"/><text x="40.5825%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (39 samples, 1.41%)</title><rect x="40.3325%" y="405" width="1.4095%" height="15" fill="rgb(245,21,50)" fg:x="1116" fg:w="39"/><text x="40.5825%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (39 samples, 1.41%)</title><rect x="40.3325%" y="389" width="1.4095%" height="15" fill="rgb(228,9,43)" fg:x="1116" fg:w="39"/><text x="40.5825%" y="399.50"></text></g><g><title>wfc::wfc::queueprop_bitarrayset::QueuePropBitArraySet::find_minimal::{{closure}} (360 samples, 13.01%)</title><rect x="40.0434%" y="453" width="13.0105%" height="15" fill="rgb(208,100,47)" fg:x="1108" fg:w="360"/><text x="40.2934%" y="463.50">wfc::wfc::queueprop_..</text></g><g><title>wfc::wfc::vec3d::Vec3D&lt;T&gt;::get (360 samples, 13.01%)</title><rect x="40.0434%" y="437" width="13.0105%" height="15" fill="rgb(232,26,8)" fg:x="1108" fg:w="360"/><text x="40.2934%" y="447.50">wfc::wfc::vec3d::Vec..</text></g><g><title>run_timer_softirq (10 samples, 0.36%)</title><rect x="53.0538%" y="309" width="0.3614%" height="15" fill="rgb(216,166,38)" fg:x="1468" fg:w="10"/><text x="53.3038%" y="319.50"></text></g><g><title>__run_timers.part.0 (10 samples, 0.36%)</title><rect x="53.0538%" y="293" width="0.3614%" height="15" fill="rgb(251,202,51)" fg:x="1468" fg:w="10"/><text x="53.3038%" y="303.50"></text></g><g><title>call_timer_fn (10 samples, 0.36%)</title><rect x="53.0538%" y="277" width="0.3614%" height="15" fill="rgb(254,216,34)" fg:x="1468" fg:w="10"/><text x="53.3038%" y="287.50"></text></g><g><title>vbg_heartbeat_timer (10 samples, 0.36%)</title><rect x="53.0538%" y="261" width="0.3614%" height="15" fill="rgb(251,32,27)" fg:x="1468" fg:w="10"/><text x="53.3038%" y="271.50"></text></g><g><title>vbg_req_perform (10 samples, 0.36%)</title><rect x="53.0538%" y="245" width="0.3614%" height="15" fill="rgb(208,127,28)" fg:x="1468" fg:w="10"/><text x="53.3038%" y="255.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (12 samples, 0.43%)</title><rect x="53.0538%" y="373" width="0.4337%" height="15" fill="rgb(224,137,22)" fg:x="1468" fg:w="12"/><text x="53.3038%" y="383.50"></text></g><g><title>sysvec_apic_timer_interrupt (12 samples, 0.43%)</title><rect x="53.0538%" y="357" width="0.4337%" height="15" fill="rgb(254,70,32)" fg:x="1468" fg:w="12"/><text x="53.3038%" y="367.50"></text></g><g><title>irq_exit_rcu (12 samples, 0.43%)</title><rect x="53.0538%" y="341" width="0.4337%" height="15" fill="rgb(229,75,37)" fg:x="1468" fg:w="12"/><text x="53.3038%" y="351.50"></text></g><g><title>__softirqentry_text_start (12 samples, 0.43%)</title><rect x="53.0538%" y="325" width="0.4337%" height="15" fill="rgb(252,64,23)" fg:x="1468" fg:w="12"/><text x="53.3038%" y="335.50"></text></g><g><title>core::num::&lt;impl u128&gt;::count_ones (460 samples, 16.62%)</title><rect x="53.0538%" y="389" width="16.6245%" height="15" fill="rgb(232,162,48)" fg:x="1468" fg:w="460"/><text x="53.3038%" y="399.50">core::num::&lt;impl u128&gt;::co..</text></g><g><title>wfc::wfc::bits256_set::Bits256Set::len (480 samples, 17.35%)</title><rect x="53.0538%" y="405" width="17.3473%" height="15" fill="rgb(246,160,12)" fg:x="1468" fg:w="480"/><text x="53.3038%" y="415.50">wfc::wfc::bits256_set::Bits..</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="70.4012%" y="405" width="0.0361%" height="15" fill="rgb(247,166,0)" fg:x="1948" fg:w="1"/><text x="70.6512%" y="415.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="70.4012%" y="389" width="0.0361%" height="15" fill="rgb(249,219,21)" fg:x="1948" fg:w="1"/><text x="70.6512%" y="399.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.04%)</title><rect x="70.4012%" y="373" width="0.0361%" height="15" fill="rgb(205,209,3)" fg:x="1948" fg:w="1"/><text x="70.6512%" y="383.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.04%)</title><rect x="70.4012%" y="357" width="0.0361%" height="15" fill="rgb(243,44,1)" fg:x="1948" fg:w="1"/><text x="70.6512%" y="367.50"></text></g><g><title>run_timer_softirq (1 samples, 0.04%)</title><rect x="70.4012%" y="341" width="0.0361%" height="15" fill="rgb(206,159,16)" fg:x="1948" fg:w="1"/><text x="70.6512%" y="351.50"></text></g><g><title>__run_timers.part.0 (1 samples, 0.04%)</title><rect x="70.4012%" y="325" width="0.0361%" height="15" fill="rgb(244,77,30)" fg:x="1948" fg:w="1"/><text x="70.6512%" y="335.50"></text></g><g><title>call_timer_fn (1 samples, 0.04%)</title><rect x="70.4012%" y="309" width="0.0361%" height="15" fill="rgb(218,69,12)" fg:x="1948" fg:w="1"/><text x="70.6512%" y="319.50"></text></g><g><title>vbg_heartbeat_timer (1 samples, 0.04%)</title><rect x="70.4012%" y="293" width="0.0361%" height="15" fill="rgb(212,87,7)" fg:x="1948" fg:w="1"/><text x="70.6512%" y="303.50"></text></g><g><title>vbg_req_perform (1 samples, 0.04%)</title><rect x="70.4012%" y="277" width="0.0361%" height="15" fill="rgb(245,114,25)" fg:x="1948" fg:w="1"/><text x="70.6512%" y="287.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (509 samples, 18.40%)</title><rect x="53.0538%" y="437" width="18.3954%" height="15" fill="rgb(210,61,42)" fg:x="1468" fg:w="509"/><text x="53.3038%" y="447.50">core::ops::function::impls::&lt;..</text></g><g><title>wfc::wfc::queueprop_bitarrayset::QueuePropBitArraySet::find_minimal::{{closure}} (509 samples, 18.40%)</title><rect x="53.0538%" y="421" width="18.3954%" height="15" fill="rgb(211,52,33)" fg:x="1468" fg:w="509"/><text x="53.3038%" y="431.50">wfc::wfc::queueprop_bitarrays..</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="71.4492%" y="437" width="0.0361%" height="15" fill="rgb(234,58,33)" fg:x="1977" fg:w="1"/><text x="71.6992%" y="447.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="71.4492%" y="421" width="0.0361%" height="15" fill="rgb(220,115,36)" fg:x="1977" fg:w="1"/><text x="71.6992%" y="431.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.04%)</title><rect x="71.4492%" y="405" width="0.0361%" height="15" fill="rgb(243,153,54)" fg:x="1977" fg:w="1"/><text x="71.6992%" y="415.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.04%)</title><rect x="71.4492%" y="389" width="0.0361%" height="15" fill="rgb(251,47,18)" fg:x="1977" fg:w="1"/><text x="71.6992%" y="399.50"></text></g><g><title>run_timer_softirq (1 samples, 0.04%)</title><rect x="71.4492%" y="373" width="0.0361%" height="15" fill="rgb(242,102,42)" fg:x="1977" fg:w="1"/><text x="71.6992%" y="383.50"></text></g><g><title>__run_timers.part.0 (1 samples, 0.04%)</title><rect x="71.4492%" y="357" width="0.0361%" height="15" fill="rgb(234,31,38)" fg:x="1977" fg:w="1"/><text x="71.6992%" y="367.50"></text></g><g><title>call_timer_fn (1 samples, 0.04%)</title><rect x="71.4492%" y="341" width="0.0361%" height="15" fill="rgb(221,117,51)" fg:x="1977" fg:w="1"/><text x="71.6992%" y="351.50"></text></g><g><title>vbg_heartbeat_timer (1 samples, 0.04%)</title><rect x="71.4492%" y="325" width="0.0361%" height="15" fill="rgb(212,20,18)" fg:x="1977" fg:w="1"/><text x="71.6992%" y="335.50"></text></g><g><title>vbg_req_perform (1 samples, 0.04%)</title><rect x="71.4492%" y="309" width="0.0361%" height="15" fill="rgb(245,133,36)" fg:x="1977" fg:w="1"/><text x="71.6992%" y="319.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (906 samples, 32.74%)</title><rect x="40.0434%" y="469" width="32.7430%" height="15" fill="rgb(212,6,19)" fg:x="1108" fg:w="906"/><text x="40.2934%" y="479.50">core::iter::adapters::map::map_try_fold::{{closure}}</text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (546 samples, 19.73%)</title><rect x="53.0538%" y="453" width="19.7326%" height="15" fill="rgb(218,1,36)" fg:x="1468" fg:w="546"/><text x="53.3038%" y="463.50">core::iter::traits::iterator::I..</text></g><g><title>irqentry_exit (1 samples, 0.04%)</title><rect x="72.7864%" y="405" width="0.0361%" height="15" fill="rgb(246,84,54)" fg:x="2014" fg:w="1"/><text x="73.0364%" y="415.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.04%)</title><rect x="72.7864%" y="389" width="0.0361%" height="15" fill="rgb(242,110,6)" fg:x="2014" fg:w="1"/><text x="73.0364%" y="399.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.04%)</title><rect x="72.7864%" y="373" width="0.0361%" height="15" fill="rgb(214,47,5)" fg:x="2014" fg:w="1"/><text x="73.0364%" y="383.50"></text></g><g><title>exit_to_user_mode_loop (1 samples, 0.04%)</title><rect x="72.7864%" y="357" width="0.0361%" height="15" fill="rgb(218,159,25)" fg:x="2014" fg:w="1"/><text x="73.0364%" y="367.50"></text></g><g><title>schedule (1 samples, 0.04%)</title><rect x="72.7864%" y="341" width="0.0361%" height="15" fill="rgb(215,211,28)" fg:x="2014" fg:w="1"/><text x="73.0364%" y="351.50"></text></g><g><title>__schedule (1 samples, 0.04%)</title><rect x="72.7864%" y="325" width="0.0361%" height="15" fill="rgb(238,59,32)" fg:x="2014" fg:w="1"/><text x="73.0364%" y="335.50"></text></g><g><title>finish_task_switch.isra.0 (1 samples, 0.04%)</title><rect x="72.7864%" y="309" width="0.0361%" height="15" fill="rgb(226,82,3)" fg:x="2014" fg:w="1"/><text x="73.0364%" y="319.50"></text></g><g><title>run_timer_softirq (13 samples, 0.47%)</title><rect x="72.8226%" y="373" width="0.4698%" height="15" fill="rgb(240,164,32)" fg:x="2015" fg:w="13"/><text x="73.0726%" y="383.50"></text></g><g><title>__run_timers.part.0 (13 samples, 0.47%)</title><rect x="72.8226%" y="357" width="0.4698%" height="15" fill="rgb(232,46,7)" fg:x="2015" fg:w="13"/><text x="73.0726%" y="367.50"></text></g><g><title>call_timer_fn (13 samples, 0.47%)</title><rect x="72.8226%" y="341" width="0.4698%" height="15" fill="rgb(229,129,53)" fg:x="2015" fg:w="13"/><text x="73.0726%" y="351.50"></text></g><g><title>vbg_heartbeat_timer (13 samples, 0.47%)</title><rect x="72.8226%" y="325" width="0.4698%" height="15" fill="rgb(234,188,29)" fg:x="2015" fg:w="13"/><text x="73.0726%" y="335.50"></text></g><g><title>vbg_req_perform (13 samples, 0.47%)</title><rect x="72.8226%" y="309" width="0.4698%" height="15" fill="rgb(246,141,4)" fg:x="2015" fg:w="13"/><text x="73.0726%" y="319.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (15 samples, 0.54%)</title><rect x="72.7864%" y="437" width="0.5421%" height="15" fill="rgb(229,23,39)" fg:x="2014" fg:w="15"/><text x="73.0364%" y="447.50"></text></g><g><title>sysvec_apic_timer_interrupt (15 samples, 0.54%)</title><rect x="72.7864%" y="421" width="0.5421%" height="15" fill="rgb(206,12,3)" fg:x="2014" fg:w="15"/><text x="73.0364%" y="431.50"></text></g><g><title>irq_exit_rcu (14 samples, 0.51%)</title><rect x="72.8226%" y="405" width="0.5060%" height="15" fill="rgb(252,226,20)" fg:x="2015" fg:w="14"/><text x="73.0726%" y="415.50"></text></g><g><title>__softirqentry_text_start (14 samples, 0.51%)</title><rect x="72.8226%" y="389" width="0.5060%" height="15" fill="rgb(216,123,35)" fg:x="2015" fg:w="14"/><text x="73.0726%" y="399.50"></text></g><g><title>asm_common_interrupt (1 samples, 0.04%)</title><rect x="73.3285%" y="437" width="0.0361%" height="15" fill="rgb(212,68,40)" fg:x="2029" fg:w="1"/><text x="73.5785%" y="447.50"></text></g><g><title>common_interrupt (1 samples, 0.04%)</title><rect x="73.3285%" y="421" width="0.0361%" height="15" fill="rgb(254,125,32)" fg:x="2029" fg:w="1"/><text x="73.5785%" y="431.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.04%)</title><rect x="73.3285%" y="405" width="0.0361%" height="15" fill="rgb(253,97,22)" fg:x="2029" fg:w="1"/><text x="73.5785%" y="415.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.04%)</title><rect x="73.3285%" y="389" width="0.0361%" height="15" fill="rgb(241,101,14)" fg:x="2029" fg:w="1"/><text x="73.5785%" y="399.50"></text></g><g><title>wfc::wfc::vec3d::get_pos_from_index (673 samples, 24.32%)</title><rect x="72.7864%" y="453" width="24.3224%" height="15" fill="rgb(238,103,29)" fg:x="2014" fg:w="673"/><text x="73.0364%" y="463.50">wfc::wfc::vec3d::get_pos_from_index</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="97.1088%" y="453" width="0.0361%" height="15" fill="rgb(233,195,47)" fg:x="2687" fg:w="1"/><text x="97.3588%" y="463.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="97.1088%" y="437" width="0.0361%" height="15" fill="rgb(246,218,30)" fg:x="2687" fg:w="1"/><text x="97.3588%" y="447.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.04%)</title><rect x="97.1088%" y="421" width="0.0361%" height="15" fill="rgb(219,145,47)" fg:x="2687" fg:w="1"/><text x="97.3588%" y="431.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.04%)</title><rect x="97.1088%" y="405" width="0.0361%" height="15" fill="rgb(243,12,26)" fg:x="2687" fg:w="1"/><text x="97.3588%" y="415.50"></text></g><g><title>run_timer_softirq (1 samples, 0.04%)</title><rect x="97.1088%" y="389" width="0.0361%" height="15" fill="rgb(214,87,16)" fg:x="2687" fg:w="1"/><text x="97.3588%" y="399.50"></text></g><g><title>__run_timers.part.0 (1 samples, 0.04%)</title><rect x="97.1088%" y="373" width="0.0361%" height="15" fill="rgb(208,99,42)" fg:x="2687" fg:w="1"/><text x="97.3588%" y="383.50"></text></g><g><title>call_timer_fn (1 samples, 0.04%)</title><rect x="97.1088%" y="357" width="0.0361%" height="15" fill="rgb(253,99,2)" fg:x="2687" fg:w="1"/><text x="97.3588%" y="367.50"></text></g><g><title>vbg_heartbeat_timer (1 samples, 0.04%)</title><rect x="97.1088%" y="341" width="0.0361%" height="15" fill="rgb(220,168,23)" fg:x="2687" fg:w="1"/><text x="97.3588%" y="351.50"></text></g><g><title>vbg_req_perform (1 samples, 0.04%)</title><rect x="97.1088%" y="325" width="0.0361%" height="15" fill="rgb(242,38,24)" fg:x="2687" fg:w="1"/><text x="97.3588%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,611 samples, 58.22%)</title><rect x="40.0434%" y="533" width="58.2219%" height="15" fill="rgb(225,182,9)" fg:x="1108" fg:w="1611"/><text x="40.2934%" y="543.50">&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::iter::traits::iterator::Iterator::find (1,611 samples, 58.22%)</title><rect x="40.0434%" y="517" width="58.2219%" height="15" fill="rgb(243,178,37)" fg:x="1108" fg:w="1611"/><text x="40.2934%" y="527.50">core::iter::traits::iterator::Iterator::find</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1,611 samples, 58.22%)</title><rect x="40.0434%" y="501" width="58.2219%" height="15" fill="rgb(232,139,19)" fg:x="1108" fg:w="1611"/><text x="40.2934%" y="511.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1,611 samples, 58.22%)</title><rect x="40.0434%" y="485" width="58.2219%" height="15" fill="rgb(225,201,24)" fg:x="1108" fg:w="1611"/><text x="40.2934%" y="495.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>&lt;wfc::wfc::vec3d::PosIter3D as core::iter::traits::iterator::Iterator&gt;::next (705 samples, 25.48%)</title><rect x="72.7864%" y="469" width="25.4789%" height="15" fill="rgb(221,47,46)" fg:x="2014" fg:w="705"/><text x="73.0364%" y="479.50">&lt;wfc::wfc::vec3d::PosIter3D as core::iter..</text></g><g><title>wfc::wfc::queueprop_bitarrayset::QueuePropBitArraySet::find_minimal (2,210 samples, 79.87%)</title><rect x="19.9855%" y="645" width="79.8699%" height="15" fill="rgb(249,23,13)" fg:x="553" fg:w="2210"/><text x="20.2355%" y="655.50">wfc::wfc::queueprop_bitarrayset::QueuePropBitArraySet::find_minimal</text></g><g><title>core::iter::traits::iterator::Iterator::collect (1,712 samples, 61.87%)</title><rect x="37.9834%" y="629" width="61.8721%" height="15" fill="rgb(219,9,5)" fg:x="1051" fg:w="1712"/><text x="38.2334%" y="639.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1,712 samples, 61.87%)</title><rect x="37.9834%" y="613" width="61.8721%" height="15" fill="rgb(254,171,16)" fg:x="1051" fg:w="1712"/><text x="38.2334%" y="623.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,712 samples, 61.87%)</title><rect x="37.9834%" y="597" width="61.8721%" height="15" fill="rgb(230,171,20)" fg:x="1051" fg:w="1712"/><text x="38.2334%" y="607.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1,712 samples, 61.87%)</title><rect x="37.9834%" y="581" width="61.8721%" height="15" fill="rgb(210,71,41)" fg:x="1051" fg:w="1712"/><text x="38.2334%" y="591.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,680 samples, 60.72%)</title><rect x="39.1399%" y="565" width="60.7156%" height="15" fill="rgb(206,173,20)" fg:x="1083" fg:w="1680"/><text x="39.3899%" y="575.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1,680 samples, 60.72%)</title><rect x="39.1399%" y="549" width="60.7156%" height="15" fill="rgb(233,88,34)" fg:x="1083" fg:w="1680"/><text x="39.3899%" y="559.50">alloc::vec::Vec&lt;T,A&gt;::extend_desugared</text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (3 samples, 0.11%)</title><rect x="99.8554%" y="485" width="0.1084%" height="15" fill="rgb(223,209,46)" fg:x="2763" fg:w="3"/><text x="100.1054%" y="495.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3 samples, 0.11%)</title><rect x="99.8554%" y="469" width="0.1084%" height="15" fill="rgb(250,43,18)" fg:x="2763" fg:w="3"/><text x="100.1054%" y="479.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::items::{{closure}} (3 samples, 0.11%)</title><rect x="99.8554%" y="453" width="0.1084%" height="15" fill="rgb(208,13,10)" fg:x="2763" fg:w="3"/><text x="100.1054%" y="463.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::contains (3 samples, 0.11%)</title><rect x="99.8554%" y="437" width="0.1084%" height="15" fill="rgb(212,200,36)" fg:x="2763" fg:w="3"/><text x="100.1054%" y="447.50"></text></g><g><title>core::num::&lt;impl u128&gt;::pow (3 samples, 0.11%)</title><rect x="99.8554%" y="421" width="0.1084%" height="15" fill="rgb(225,90,30)" fg:x="2763" fg:w="3"/><text x="100.1054%" y="431.50"></text></g><g><title>all (2,767 samples, 100%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(236,182,39)" fg:x="0" fg:w="2767"/><text x="0.2500%" y="975.50"></text></g><g><title>queueprop_bitar (2,767 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(212,144,35)" fg:x="0" fg:w="2767"/><text x="0.2500%" y="959.50">queueprop_bitar</text></g><g><title>_start (2,767 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(228,63,44)" fg:x="0" fg:w="2767"/><text x="0.2500%" y="943.50">_start</text></g><g><title>__libc_start_main (2,767 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(228,109,6)" fg:x="0" fg:w="2767"/><text x="0.2500%" y="927.50">__libc_start_main</text></g><g><title>[libc.so.6] (2,767 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(238,117,24)" fg:x="0" fg:w="2767"/><text x="0.2500%" y="911.50">[libc.so.6]</text></g><g><title>main (2,767 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(242,26,26)" fg:x="0" fg:w="2767"/><text x="0.2500%" y="895.50">main</text></g><g><title>std::rt::lang_start_internal (2,767 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(221,92,48)" fg:x="0" fg:w="2767"/><text x="0.2500%" y="879.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (2,767 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(209,209,32)" fg:x="0" fg:w="2767"/><text x="0.2500%" y="863.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,767 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(221,70,22)" fg:x="0" fg:w="2767"/><text x="0.2500%" y="847.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,767 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(248,145,5)" fg:x="0" fg:w="2767"/><text x="0.2500%" y="831.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (2,767 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(226,116,26)" fg:x="0" fg:w="2767"/><text x="0.2500%" y="815.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (2,767 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(244,5,17)" fg:x="0" fg:w="2767"/><text x="0.2500%" y="799.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,767 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(252,159,33)" fg:x="0" fg:w="2767"/><text x="0.2500%" y="783.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,767 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(206,71,0)" fg:x="0" fg:w="2767"/><text x="0.2500%" y="767.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2,767 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(233,118,54)" fg:x="0" fg:w="2767"/><text x="0.2500%" y="751.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (2,767 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(234,83,48)" fg:x="0" fg:w="2767"/><text x="0.2500%" y="735.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2,767 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(228,3,54)" fg:x="0" fg:w="2767"/><text x="0.2500%" y="719.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (2,767 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(226,155,13)" fg:x="0" fg:w="2767"/><text x="0.2500%" y="703.50">core::ops::function::FnOnce::call_once</text></g><g><title>queueprop_bitarrayset::main (2,767 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(241,28,37)" fg:x="0" fg:w="2767"/><text x="0.2500%" y="687.50">queueprop_bitarrayset::main</text></g><g><title>&lt;wfc::wfc::queueprop_bitarrayset::QueuePropBitArraySet as wfc::wfc::traits::WFC&gt;::solve (2,666 samples, 96.35%)</title><rect x="3.6502%" y="661" width="96.3498%" height="15" fill="rgb(233,93,10)" fg:x="101" fg:w="2666"/><text x="3.9002%" y="671.50">&lt;wfc::wfc::queueprop_bitarrayset::QueuePropBitArraySet as wfc::wfc::traits::WFC&gt;::solve</text></g><g><title>wfc::wfc::bits256_set::Bits256Set::items (4 samples, 0.14%)</title><rect x="99.8554%" y="645" width="0.1446%" height="15" fill="rgb(225,113,19)" fg:x="2763" fg:w="4"/><text x="100.1054%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (4 samples, 0.14%)</title><rect x="99.8554%" y="629" width="0.1446%" height="15" fill="rgb(241,2,18)" fg:x="2763" fg:w="4"/><text x="100.1054%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (4 samples, 0.14%)</title><rect x="99.8554%" y="613" width="0.1446%" height="15" fill="rgb(228,207,21)" fg:x="2763" fg:w="4"/><text x="100.1054%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.14%)</title><rect x="99.8554%" y="597" width="0.1446%" height="15" fill="rgb(213,211,35)" fg:x="2763" fg:w="4"/><text x="100.1054%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (4 samples, 0.14%)</title><rect x="99.8554%" y="581" width="0.1446%" height="15" fill="rgb(209,83,10)" fg:x="2763" fg:w="4"/><text x="100.1054%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4 samples, 0.14%)</title><rect x="99.8554%" y="565" width="0.1446%" height="15" fill="rgb(209,164,1)" fg:x="2763" fg:w="4"/><text x="100.1054%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (4 samples, 0.14%)</title><rect x="99.8554%" y="549" width="0.1446%" height="15" fill="rgb(213,184,43)" fg:x="2763" fg:w="4"/><text x="100.1054%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.14%)</title><rect x="99.8554%" y="533" width="0.1446%" height="15" fill="rgb(231,61,34)" fg:x="2763" fg:w="4"/><text x="100.1054%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (4 samples, 0.14%)</title><rect x="99.8554%" y="517" width="0.1446%" height="15" fill="rgb(235,75,3)" fg:x="2763" fg:w="4"/><text x="100.1054%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (4 samples, 0.14%)</title><rect x="99.8554%" y="501" width="0.1446%" height="15" fill="rgb(220,106,47)" fg:x="2763" fg:w="4"/><text x="100.1054%" y="511.50"></text></g></svg></svg>