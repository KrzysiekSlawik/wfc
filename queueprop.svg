<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="902" onload="init(evt)" viewBox="0 0 1200 902" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#ffffff" offset="5%"/><stop stop-color="#ffffff" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="902" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="885.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="885.00"> </text><svg id="frames" x="10" width="1180" total_samples="4129"><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (1 samples, 0.02%)</title><rect x="0.0000%" y="453" width="0.0242%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="463.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.02%)</title><rect x="0.0000%" y="437" width="0.0242%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="447.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="0.0000%" y="421" width="0.0242%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="431.50"></text></g><g><title>asm_common_interrupt (4 samples, 0.10%)</title><rect x="0.0242%" y="181" width="0.0969%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="4"/><text x="0.2742%" y="191.50"></text></g><g><title>common_interrupt (4 samples, 0.10%)</title><rect x="0.0242%" y="165" width="0.0969%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="4"/><text x="0.2742%" y="175.50"></text></g><g><title>irq_exit_rcu (4 samples, 0.10%)</title><rect x="0.0242%" y="149" width="0.0969%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="4"/><text x="0.2742%" y="159.50"></text></g><g><title>__softirqentry_text_start (4 samples, 0.10%)</title><rect x="0.0242%" y="133" width="0.0969%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="4"/><text x="0.2742%" y="143.50"></text></g><g><title>syscall_exit_to_user_mode (13 samples, 0.31%)</title><rect x="0.0242%" y="277" width="0.3148%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="13"/><text x="0.2742%" y="287.50"></text></g><g><title>exit_to_user_mode_prepare (13 samples, 0.31%)</title><rect x="0.0242%" y="261" width="0.3148%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="13"/><text x="0.2742%" y="271.50"></text></g><g><title>exit_to_user_mode_loop (13 samples, 0.31%)</title><rect x="0.0242%" y="245" width="0.3148%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="13"/><text x="0.2742%" y="255.50"></text></g><g><title>schedule (13 samples, 0.31%)</title><rect x="0.0242%" y="229" width="0.3148%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="13"/><text x="0.2742%" y="239.50"></text></g><g><title>__schedule (13 samples, 0.31%)</title><rect x="0.0242%" y="213" width="0.3148%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="13"/><text x="0.2742%" y="223.50"></text></g><g><title>finish_task_switch.isra.0 (13 samples, 0.31%)</title><rect x="0.0242%" y="197" width="0.3148%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="13"/><text x="0.2742%" y="207.50"></text></g><g><title>queue_work_on (3 samples, 0.07%)</title><rect x="0.3391%" y="101" width="0.0727%" height="15" fill="rgb(206,188,39)" fg:x="14" fg:w="3"/><text x="0.5891%" y="111.50"></text></g><g><title>process_output_block (4 samples, 0.10%)</title><rect x="0.3391%" y="149" width="0.0969%" height="15" fill="rgb(217,207,13)" fg:x="14" fg:w="4"/><text x="0.5891%" y="159.50"></text></g><g><title>pty_write (4 samples, 0.10%)</title><rect x="0.3391%" y="133" width="0.0969%" height="15" fill="rgb(231,73,38)" fg:x="14" fg:w="4"/><text x="0.5891%" y="143.50"></text></g><g><title>tty_insert_flip_string_and_push_buffer (4 samples, 0.10%)</title><rect x="0.3391%" y="117" width="0.0969%" height="15" fill="rgb(225,20,46)" fg:x="14" fg:w="4"/><text x="0.5891%" y="127.50"></text></g><g><title>__lock_text_start (1 samples, 0.02%)</title><rect x="0.4117%" y="101" width="0.0242%" height="15" fill="rgb(210,31,41)" fg:x="17" fg:w="1"/><text x="0.6617%" y="111.50"></text></g><g><title>asm_common_interrupt (1 samples, 0.02%)</title><rect x="0.4359%" y="85" width="0.0242%" height="15" fill="rgb(221,200,47)" fg:x="18" fg:w="1"/><text x="0.6859%" y="95.50"></text></g><g><title>common_interrupt (1 samples, 0.02%)</title><rect x="0.4359%" y="69" width="0.0242%" height="15" fill="rgb(226,26,5)" fg:x="18" fg:w="1"/><text x="0.6859%" y="79.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.02%)</title><rect x="0.4359%" y="53" width="0.0242%" height="15" fill="rgb(249,33,26)" fg:x="18" fg:w="1"/><text x="0.6859%" y="63.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="0.4359%" y="37" width="0.0242%" height="15" fill="rgb(235,183,28)" fg:x="18" fg:w="1"/><text x="0.6859%" y="47.50"></text></g><g><title>mutex_lock (10 samples, 0.24%)</title><rect x="0.4359%" y="149" width="0.2422%" height="15" fill="rgb(221,5,38)" fg:x="18" fg:w="10"/><text x="0.6859%" y="159.50"></text></g><g><title>__cond_resched (10 samples, 0.24%)</title><rect x="0.4359%" y="133" width="0.2422%" height="15" fill="rgb(247,18,42)" fg:x="18" fg:w="10"/><text x="0.6859%" y="143.50"></text></g><g><title>__schedule (10 samples, 0.24%)</title><rect x="0.4359%" y="117" width="0.2422%" height="15" fill="rgb(241,131,45)" fg:x="18" fg:w="10"/><text x="0.6859%" y="127.50"></text></g><g><title>finish_task_switch.isra.0 (10 samples, 0.24%)</title><rect x="0.4359%" y="101" width="0.2422%" height="15" fill="rgb(249,31,29)" fg:x="18" fg:w="10"/><text x="0.6859%" y="111.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (28 samples, 0.68%)</title><rect x="0.0242%" y="309" width="0.6781%" height="15" fill="rgb(225,111,53)" fg:x="1" fg:w="28"/><text x="0.2742%" y="319.50"></text></g><g><title>do_syscall_64 (28 samples, 0.68%)</title><rect x="0.0242%" y="293" width="0.6781%" height="15" fill="rgb(238,160,17)" fg:x="1" fg:w="28"/><text x="0.2742%" y="303.50"></text></g><g><title>__x64_sys_write (15 samples, 0.36%)</title><rect x="0.3391%" y="277" width="0.3633%" height="15" fill="rgb(214,148,48)" fg:x="14" fg:w="15"/><text x="0.5891%" y="287.50"></text></g><g><title>ksys_write (15 samples, 0.36%)</title><rect x="0.3391%" y="261" width="0.3633%" height="15" fill="rgb(232,36,49)" fg:x="14" fg:w="15"/><text x="0.5891%" y="271.50"></text></g><g><title>vfs_write (15 samples, 0.36%)</title><rect x="0.3391%" y="245" width="0.3633%" height="15" fill="rgb(209,103,24)" fg:x="14" fg:w="15"/><text x="0.5891%" y="255.50"></text></g><g><title>new_sync_write (15 samples, 0.36%)</title><rect x="0.3391%" y="229" width="0.3633%" height="15" fill="rgb(229,88,8)" fg:x="14" fg:w="15"/><text x="0.5891%" y="239.50"></text></g><g><title>tty_write (15 samples, 0.36%)</title><rect x="0.3391%" y="213" width="0.3633%" height="15" fill="rgb(213,181,19)" fg:x="14" fg:w="15"/><text x="0.5891%" y="223.50"></text></g><g><title>file_tty_write.constprop.0 (15 samples, 0.36%)</title><rect x="0.3391%" y="197" width="0.3633%" height="15" fill="rgb(254,191,54)" fg:x="14" fg:w="15"/><text x="0.5891%" y="207.50"></text></g><g><title>do_tty_write (15 samples, 0.36%)</title><rect x="0.3391%" y="181" width="0.3633%" height="15" fill="rgb(241,83,37)" fg:x="14" fg:w="15"/><text x="0.5891%" y="191.50"></text></g><g><title>n_tty_write (15 samples, 0.36%)</title><rect x="0.3391%" y="165" width="0.3633%" height="15" fill="rgb(233,36,39)" fg:x="14" fg:w="15"/><text x="0.5891%" y="175.50"></text></g><g><title>do_output_char (1 samples, 0.02%)</title><rect x="0.6781%" y="149" width="0.0242%" height="15" fill="rgb(226,3,54)" fg:x="28" fg:w="1"/><text x="0.9281%" y="159.50"></text></g><g><title>pty_write (1 samples, 0.02%)</title><rect x="0.6781%" y="133" width="0.0242%" height="15" fill="rgb(245,192,40)" fg:x="28" fg:w="1"/><text x="0.9281%" y="143.50"></text></g><g><title>tty_insert_flip_string_and_push_buffer (1 samples, 0.02%)</title><rect x="0.6781%" y="117" width="0.0242%" height="15" fill="rgb(238,167,29)" fg:x="28" fg:w="1"/><text x="0.9281%" y="127.50"></text></g><g><title>queue_work_on (1 samples, 0.02%)</title><rect x="0.6781%" y="101" width="0.0242%" height="15" fill="rgb(232,182,51)" fg:x="28" fg:w="1"/><text x="0.9281%" y="111.50"></text></g><g><title>write (29 samples, 0.70%)</title><rect x="0.0242%" y="325" width="0.7023%" height="15" fill="rgb(231,60,39)" fg:x="1" fg:w="29"/><text x="0.2742%" y="335.50"></text></g><g><title>std::io::stdio::_print (31 samples, 0.75%)</title><rect x="0.0000%" y="549" width="0.7508%" height="15" fill="rgb(208,69,12)" fg:x="0" fg:w="31"/><text x="0.2500%" y="559.50"></text></g><g><title>std::io::stdio::print_to (31 samples, 0.75%)</title><rect x="0.0000%" y="533" width="0.7508%" height="15" fill="rgb(235,93,37)" fg:x="0" fg:w="31"/><text x="0.2500%" y="543.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (31 samples, 0.75%)</title><rect x="0.0000%" y="517" width="0.7508%" height="15" fill="rgb(213,116,39)" fg:x="0" fg:w="31"/><text x="0.2500%" y="527.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (31 samples, 0.75%)</title><rect x="0.0000%" y="501" width="0.7508%" height="15" fill="rgb(222,207,29)" fg:x="0" fg:w="31"/><text x="0.2500%" y="511.50"></text></g><g><title>std::io::Write::write_fmt (31 samples, 0.75%)</title><rect x="0.0000%" y="485" width="0.7508%" height="15" fill="rgb(206,96,30)" fg:x="0" fg:w="31"/><text x="0.2500%" y="495.50"></text></g><g><title>core::fmt::write (31 samples, 0.75%)</title><rect x="0.0000%" y="469" width="0.7508%" height="15" fill="rgb(218,138,4)" fg:x="0" fg:w="31"/><text x="0.2500%" y="479.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (30 samples, 0.73%)</title><rect x="0.0242%" y="453" width="0.7266%" height="15" fill="rgb(250,191,14)" fg:x="1" fg:w="30"/><text x="0.2742%" y="463.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (30 samples, 0.73%)</title><rect x="0.0242%" y="437" width="0.7266%" height="15" fill="rgb(239,60,40)" fg:x="1" fg:w="30"/><text x="0.2742%" y="447.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (30 samples, 0.73%)</title><rect x="0.0242%" y="421" width="0.7266%" height="15" fill="rgb(206,27,48)" fg:x="1" fg:w="30"/><text x="0.2742%" y="431.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (30 samples, 0.73%)</title><rect x="0.0242%" y="405" width="0.7266%" height="15" fill="rgb(225,35,8)" fg:x="1" fg:w="30"/><text x="0.2742%" y="415.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (30 samples, 0.73%)</title><rect x="0.0242%" y="389" width="0.7266%" height="15" fill="rgb(250,213,24)" fg:x="1" fg:w="30"/><text x="0.2742%" y="399.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (30 samples, 0.73%)</title><rect x="0.0242%" y="373" width="0.7266%" height="15" fill="rgb(247,123,22)" fg:x="1" fg:w="30"/><text x="0.2742%" y="383.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (30 samples, 0.73%)</title><rect x="0.0242%" y="357" width="0.7266%" height="15" fill="rgb(231,138,38)" fg:x="1" fg:w="30"/><text x="0.2742%" y="367.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (30 samples, 0.73%)</title><rect x="0.0242%" y="341" width="0.7266%" height="15" fill="rgb(231,145,46)" fg:x="1" fg:w="30"/><text x="0.2742%" y="351.50"></text></g><g><title>std::sys::unix::cvt (1 samples, 0.02%)</title><rect x="0.7266%" y="325" width="0.0242%" height="15" fill="rgb(251,118,11)" fg:x="30" fg:w="1"/><text x="0.9766%" y="335.50"></text></g><g><title>&lt;isize as std::sys::unix::IsMinusOne&gt;::is_minus_one (1 samples, 0.02%)</title><rect x="0.7266%" y="309" width="0.0242%" height="15" fill="rgb(217,147,25)" fg:x="30" fg:w="1"/><text x="0.9766%" y="319.50"></text></g><g><title>&lt;wfc::wfc::vec3d::PosIter3D as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="0.7508%" y="549" width="0.0242%" height="15" fill="rgb(247,81,37)" fg:x="31" fg:w="1"/><text x="1.0008%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.02%)</title><rect x="0.7750%" y="469" width="0.0242%" height="15" fill="rgb(209,12,38)" fg:x="32" fg:w="1"/><text x="1.0250%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="0.7750%" y="453" width="0.0242%" height="15" fill="rgb(227,1,9)" fg:x="32" fg:w="1"/><text x="1.0250%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="0.7750%" y="437" width="0.0242%" height="15" fill="rgb(248,47,43)" fg:x="32" fg:w="1"/><text x="1.0250%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="0.7750%" y="421" width="0.0242%" height="15" fill="rgb(221,10,30)" fg:x="32" fg:w="1"/><text x="1.0250%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="0.7750%" y="405" width="0.0242%" height="15" fill="rgb(210,229,1)" fg:x="32" fg:w="1"/><text x="1.0250%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="0.7750%" y="389" width="0.0242%" height="15" fill="rgb(222,148,37)" fg:x="32" fg:w="1"/><text x="1.0250%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="0.7750%" y="373" width="0.0242%" height="15" fill="rgb(234,67,33)" fg:x="32" fg:w="1"/><text x="1.0250%" y="383.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="0.7750%" y="357" width="0.0242%" height="15" fill="rgb(247,98,35)" fg:x="32" fg:w="1"/><text x="1.0250%" y="367.50"></text></g><g><title>wfc::wfc::utils::get_random (3 samples, 0.07%)</title><rect x="0.7750%" y="533" width="0.0727%" height="15" fill="rgb(247,138,52)" fg:x="32" fg:w="3"/><text x="1.0250%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.07%)</title><rect x="0.7750%" y="517" width="0.0727%" height="15" fill="rgb(213,79,30)" fg:x="32" fg:w="3"/><text x="1.0250%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.07%)</title><rect x="0.7750%" y="501" width="0.0727%" height="15" fill="rgb(246,177,23)" fg:x="32" fg:w="3"/><text x="1.0250%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3 samples, 0.07%)</title><rect x="0.7750%" y="485" width="0.0727%" height="15" fill="rgb(230,62,27)" fg:x="32" fg:w="3"/><text x="1.0250%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.05%)</title><rect x="0.7992%" y="469" width="0.0484%" height="15" fill="rgb(216,154,8)" fg:x="33" fg:w="2"/><text x="1.0492%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (2 samples, 0.05%)</title><rect x="0.7992%" y="453" width="0.0484%" height="15" fill="rgb(244,35,45)" fg:x="33" fg:w="2"/><text x="1.0492%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="0.7992%" y="437" width="0.0484%" height="15" fill="rgb(251,115,12)" fg:x="33" fg:w="2"/><text x="1.0492%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (2 samples, 0.05%)</title><rect x="0.7992%" y="421" width="0.0484%" height="15" fill="rgb(240,54,50)" fg:x="33" fg:w="2"/><text x="1.0492%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.05%)</title><rect x="0.7992%" y="405" width="0.0484%" height="15" fill="rgb(233,84,52)" fg:x="33" fg:w="2"/><text x="1.0492%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="0.7992%" y="389" width="0.0484%" height="15" fill="rgb(207,117,47)" fg:x="33" fg:w="2"/><text x="1.0492%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (2 samples, 0.05%)</title><rect x="0.7992%" y="373" width="0.0484%" height="15" fill="rgb(249,43,39)" fg:x="33" fg:w="2"/><text x="1.0492%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.02%)</title><rect x="0.8477%" y="501" width="0.0242%" height="15" fill="rgb(209,38,44)" fg:x="35" fg:w="1"/><text x="1.0977%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.02%)</title><rect x="0.8477%" y="485" width="0.0242%" height="15" fill="rgb(236,212,23)" fg:x="35" fg:w="1"/><text x="1.0977%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="0.8477%" y="469" width="0.0242%" height="15" fill="rgb(242,79,21)" fg:x="35" fg:w="1"/><text x="1.0977%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.07%)</title><rect x="0.8719%" y="437" width="0.0727%" height="15" fill="rgb(211,96,35)" fg:x="36" fg:w="3"/><text x="1.1219%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.07%)</title><rect x="0.8719%" y="421" width="0.0727%" height="15" fill="rgb(253,215,40)" fg:x="36" fg:w="3"/><text x="1.1219%" y="431.50"></text></g><g><title>[libc.so.6] (3 samples, 0.07%)</title><rect x="0.8719%" y="405" width="0.0727%" height="15" fill="rgb(211,81,21)" fg:x="36" fg:w="3"/><text x="1.1219%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="0.9445%" y="389" width="0.0242%" height="15" fill="rgb(208,190,38)" fg:x="39" fg:w="1"/><text x="1.1945%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="0.9445%" y="373" width="0.0242%" height="15" fill="rgb(235,213,38)" fg:x="39" fg:w="1"/><text x="1.1945%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="0.9445%" y="357" width="0.0242%" height="15" fill="rgb(237,122,38)" fg:x="39" fg:w="1"/><text x="1.1945%" y="367.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="0.9445%" y="341" width="0.0242%" height="15" fill="rgb(244,218,35)" fg:x="39" fg:w="1"/><text x="1.1945%" y="351.50"></text></g><g><title>wfc::wfc::vec3d::Vec3D&lt;T&gt;::get (6 samples, 0.15%)</title><rect x="0.8477%" y="517" width="0.1453%" height="15" fill="rgb(240,68,47)" fg:x="35" fg:w="6"/><text x="1.0977%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.12%)</title><rect x="0.8719%" y="501" width="0.1211%" height="15" fill="rgb(210,16,53)" fg:x="36" fg:w="5"/><text x="1.1219%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.12%)</title><rect x="0.8719%" y="485" width="0.1211%" height="15" fill="rgb(235,124,12)" fg:x="36" fg:w="5"/><text x="1.1219%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.12%)</title><rect x="0.8719%" y="469" width="0.1211%" height="15" fill="rgb(224,169,11)" fg:x="36" fg:w="5"/><text x="1.1219%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.12%)</title><rect x="0.8719%" y="453" width="0.1211%" height="15" fill="rgb(250,166,2)" fg:x="36" fg:w="5"/><text x="1.1219%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.05%)</title><rect x="0.9445%" y="437" width="0.0484%" height="15" fill="rgb(242,216,29)" fg:x="39" fg:w="2"/><text x="1.1945%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.05%)</title><rect x="0.9445%" y="421" width="0.0484%" height="15" fill="rgb(230,116,27)" fg:x="39" fg:w="2"/><text x="1.1945%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.05%)</title><rect x="0.9445%" y="405" width="0.0484%" height="15" fill="rgb(228,99,48)" fg:x="39" fg:w="2"/><text x="1.1945%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (7 samples, 0.17%)</title><rect x="0.9930%" y="421" width="0.1695%" height="15" fill="rgb(253,11,6)" fg:x="41" fg:w="7"/><text x="1.2430%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.17%)</title><rect x="0.9930%" y="405" width="0.1695%" height="15" fill="rgb(247,143,39)" fg:x="41" fg:w="7"/><text x="1.2430%" y="415.50"></text></g><g><title>[libc.so.6] (7 samples, 0.17%)</title><rect x="0.9930%" y="389" width="0.1695%" height="15" fill="rgb(236,97,10)" fg:x="41" fg:w="7"/><text x="1.2430%" y="399.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="1.1625%" y="325" width="0.0242%" height="15" fill="rgb(233,208,19)" fg:x="48" fg:w="1"/><text x="1.4125%" y="335.50"></text></g><g><title>wfc::wfc::vec3d::Vec3D&lt;T&gt;::get (11 samples, 0.27%)</title><rect x="0.9930%" y="501" width="0.2664%" height="15" fill="rgb(216,164,2)" fg:x="41" fg:w="11"/><text x="1.2430%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.27%)</title><rect x="0.9930%" y="485" width="0.2664%" height="15" fill="rgb(220,129,5)" fg:x="41" fg:w="11"/><text x="1.2430%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (11 samples, 0.27%)</title><rect x="0.9930%" y="469" width="0.2664%" height="15" fill="rgb(242,17,10)" fg:x="41" fg:w="11"/><text x="1.2430%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (11 samples, 0.27%)</title><rect x="0.9930%" y="453" width="0.2664%" height="15" fill="rgb(242,107,0)" fg:x="41" fg:w="11"/><text x="1.2430%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (11 samples, 0.27%)</title><rect x="0.9930%" y="437" width="0.2664%" height="15" fill="rgb(251,28,31)" fg:x="41" fg:w="11"/><text x="1.2430%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.10%)</title><rect x="1.1625%" y="421" width="0.0969%" height="15" fill="rgb(233,223,10)" fg:x="48" fg:w="4"/><text x="1.4125%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.10%)</title><rect x="1.1625%" y="405" width="0.0969%" height="15" fill="rgb(215,21,27)" fg:x="48" fg:w="4"/><text x="1.4125%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.10%)</title><rect x="1.1625%" y="389" width="0.0969%" height="15" fill="rgb(232,23,21)" fg:x="48" fg:w="4"/><text x="1.4125%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.10%)</title><rect x="1.1625%" y="373" width="0.0969%" height="15" fill="rgb(244,5,23)" fg:x="48" fg:w="4"/><text x="1.4125%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.10%)</title><rect x="1.1625%" y="357" width="0.0969%" height="15" fill="rgb(226,81,46)" fg:x="48" fg:w="4"/><text x="1.4125%" y="367.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.10%)</title><rect x="1.1625%" y="341" width="0.0969%" height="15" fill="rgb(247,70,30)" fg:x="48" fg:w="4"/><text x="1.4125%" y="351.50"></text></g><g><title>__rdl_alloc (3 samples, 0.07%)</title><rect x="1.1867%" y="325" width="0.0727%" height="15" fill="rgb(212,68,19)" fg:x="49" fg:w="3"/><text x="1.4367%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bool&gt;&gt; (1 samples, 0.02%)</title><rect x="1.2594%" y="501" width="0.0242%" height="15" fill="rgb(240,187,13)" fg:x="52" fg:w="1"/><text x="1.5094%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;bool&gt;&gt; (1 samples, 0.02%)</title><rect x="1.2594%" y="485" width="0.0242%" height="15" fill="rgb(223,113,26)" fg:x="52" fg:w="1"/><text x="1.5094%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="1.2594%" y="469" width="0.0242%" height="15" fill="rgb(206,192,2)" fg:x="52" fg:w="1"/><text x="1.5094%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="1.2594%" y="453" width="0.0242%" height="15" fill="rgb(241,108,4)" fg:x="52" fg:w="1"/><text x="1.5094%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="1.2594%" y="437" width="0.0242%" height="15" fill="rgb(247,173,49)" fg:x="52" fg:w="1"/><text x="1.5094%" y="447.50"></text></g><g><title>free (1 samples, 0.02%)</title><rect x="1.2594%" y="421" width="0.0242%" height="15" fill="rgb(224,114,35)" fg:x="52" fg:w="1"/><text x="1.5094%" y="431.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="1.2594%" y="405" width="0.0242%" height="15" fill="rgb(245,159,27)" fg:x="52" fg:w="1"/><text x="1.5094%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;bool&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="1.2836%" y="485" width="0.0242%" height="15" fill="rgb(245,172,44)" fg:x="53" fg:w="1"/><text x="1.5336%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="1.2836%" y="469" width="0.0242%" height="15" fill="rgb(236,23,11)" fg:x="53" fg:w="1"/><text x="1.5336%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="1.2836%" y="453" width="0.0242%" height="15" fill="rgb(205,117,38)" fg:x="53" fg:w="1"/><text x="1.5336%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="1.2836%" y="437" width="0.0242%" height="15" fill="rgb(237,72,25)" fg:x="53" fg:w="1"/><text x="1.5336%" y="447.50"></text></g><g><title>free (1 samples, 0.02%)</title><rect x="1.2836%" y="421" width="0.0242%" height="15" fill="rgb(244,70,9)" fg:x="53" fg:w="1"/><text x="1.5336%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;bool&gt;&gt;&gt; (2 samples, 0.05%)</title><rect x="1.2836%" y="501" width="0.0484%" height="15" fill="rgb(217,125,39)" fg:x="53" fg:w="2"/><text x="1.5336%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="1.3078%" y="485" width="0.0242%" height="15" fill="rgb(235,36,10)" fg:x="54" fg:w="1"/><text x="1.5578%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;bool&gt;]&gt; (1 samples, 0.02%)</title><rect x="1.3078%" y="469" width="0.0242%" height="15" fill="rgb(251,123,47)" fg:x="54" fg:w="1"/><text x="1.5578%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bool&gt;&gt; (1 samples, 0.02%)</title><rect x="1.3078%" y="453" width="0.0242%" height="15" fill="rgb(221,13,13)" fg:x="54" fg:w="1"/><text x="1.5578%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;bool&gt;&gt; (1 samples, 0.02%)</title><rect x="1.3078%" y="437" width="0.0242%" height="15" fill="rgb(238,131,9)" fg:x="54" fg:w="1"/><text x="1.5578%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="1.3078%" y="421" width="0.0242%" height="15" fill="rgb(211,50,8)" fg:x="54" fg:w="1"/><text x="1.5578%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="1.3078%" y="405" width="0.0242%" height="15" fill="rgb(245,182,24)" fg:x="54" fg:w="1"/><text x="1.5578%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="1.3078%" y="389" width="0.0242%" height="15" fill="rgb(242,14,37)" fg:x="54" fg:w="1"/><text x="1.5578%" y="399.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.02%)</title><rect x="1.3078%" y="373" width="0.0242%" height="15" fill="rgb(246,228,12)" fg:x="54" fg:w="1"/><text x="1.5578%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.02%)</title><rect x="1.3078%" y="357" width="0.0242%" height="15" fill="rgb(213,55,15)" fg:x="54" fg:w="1"/><text x="1.5578%" y="367.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="1.3320%" y="373" width="0.0484%" height="15" fill="rgb(209,9,3)" fg:x="55" fg:w="2"/><text x="1.5820%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bool&gt;&gt; (5 samples, 0.12%)</title><rect x="1.3320%" y="469" width="0.1211%" height="15" fill="rgb(230,59,30)" fg:x="55" fg:w="5"/><text x="1.5820%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;bool&gt;&gt; (5 samples, 0.12%)</title><rect x="1.3320%" y="453" width="0.1211%" height="15" fill="rgb(209,121,21)" fg:x="55" fg:w="5"/><text x="1.5820%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.12%)</title><rect x="1.3320%" y="437" width="0.1211%" height="15" fill="rgb(220,109,13)" fg:x="55" fg:w="5"/><text x="1.5820%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.12%)</title><rect x="1.3320%" y="421" width="0.1211%" height="15" fill="rgb(232,18,1)" fg:x="55" fg:w="5"/><text x="1.5820%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.12%)</title><rect x="1.3320%" y="405" width="0.1211%" height="15" fill="rgb(215,41,42)" fg:x="55" fg:w="5"/><text x="1.5820%" y="415.50"></text></g><g><title>free (5 samples, 0.12%)</title><rect x="1.3320%" y="389" width="0.1211%" height="15" fill="rgb(224,123,36)" fg:x="55" fg:w="5"/><text x="1.5820%" y="399.50"></text></g><g><title>malloc (2 samples, 0.05%)</title><rect x="1.4531%" y="293" width="0.0484%" height="15" fill="rgb(240,125,3)" fg:x="60" fg:w="2"/><text x="1.7031%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.07%)</title><rect x="1.4531%" y="341" width="0.0727%" height="15" fill="rgb(205,98,50)" fg:x="60" fg:w="3"/><text x="1.7031%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.07%)</title><rect x="1.4531%" y="325" width="0.0727%" height="15" fill="rgb(205,185,37)" fg:x="60" fg:w="3"/><text x="1.7031%" y="335.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.07%)</title><rect x="1.4531%" y="309" width="0.0727%" height="15" fill="rgb(238,207,15)" fg:x="60" fg:w="3"/><text x="1.7031%" y="319.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="1.5016%" y="293" width="0.0242%" height="15" fill="rgb(213,199,42)" fg:x="62" fg:w="1"/><text x="1.7516%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4 samples, 0.10%)</title><rect x="1.4531%" y="405" width="0.0969%" height="15" fill="rgb(235,201,11)" fg:x="60" fg:w="4"/><text x="1.7031%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.10%)</title><rect x="1.4531%" y="389" width="0.0969%" height="15" fill="rgb(207,46,11)" fg:x="60" fg:w="4"/><text x="1.7031%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.10%)</title><rect x="1.4531%" y="373" width="0.0969%" height="15" fill="rgb(241,35,35)" fg:x="60" fg:w="4"/><text x="1.7031%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.10%)</title><rect x="1.4531%" y="357" width="0.0969%" height="15" fill="rgb(243,32,47)" fg:x="60" fg:w="4"/><text x="1.7031%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (10 samples, 0.24%)</title><rect x="1.3320%" y="501" width="0.2422%" height="15" fill="rgb(247,202,23)" fg:x="55" fg:w="10"/><text x="1.5820%" y="511.50"></text></g><g><title>wfc::wfc::queueprop::QueueProp::legal_tiles::{{closure}} (10 samples, 0.24%)</title><rect x="1.3320%" y="485" width="0.2422%" height="15" fill="rgb(219,102,11)" fg:x="55" fg:w="10"/><text x="1.5820%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (5 samples, 0.12%)</title><rect x="1.4531%" y="469" width="0.1211%" height="15" fill="rgb(243,110,44)" fg:x="60" fg:w="5"/><text x="1.7031%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (5 samples, 0.12%)</title><rect x="1.4531%" y="453" width="0.1211%" height="15" fill="rgb(222,74,54)" fg:x="60" fg:w="5"/><text x="1.7031%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.12%)</title><rect x="1.4531%" y="437" width="0.1211%" height="15" fill="rgb(216,99,12)" fg:x="60" fg:w="5"/><text x="1.7031%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (5 samples, 0.12%)</title><rect x="1.4531%" y="421" width="0.1211%" height="15" fill="rgb(226,22,26)" fg:x="60" fg:w="5"/><text x="1.7031%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="1.5500%" y="405" width="0.0242%" height="15" fill="rgb(217,163,10)" fg:x="64" fg:w="1"/><text x="1.8000%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.02%)</title><rect x="1.5500%" y="389" width="0.0242%" height="15" fill="rgb(213,25,53)" fg:x="64" fg:w="1"/><text x="1.8000%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.02%)</title><rect x="1.5500%" y="373" width="0.0242%" height="15" fill="rgb(252,105,26)" fg:x="64" fg:w="1"/><text x="1.8000%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="1.5500%" y="357" width="0.0242%" height="15" fill="rgb(220,39,43)" fg:x="64" fg:w="1"/><text x="1.8000%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.02%)</title><rect x="1.5500%" y="341" width="0.0242%" height="15" fill="rgb(229,68,48)" fg:x="64" fg:w="1"/><text x="1.8000%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 0.02%)</title><rect x="1.5742%" y="469" width="0.0242%" height="15" fill="rgb(252,8,32)" fg:x="65" fg:w="1"/><text x="1.8242%" y="479.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="1.5742%" y="453" width="0.0242%" height="15" fill="rgb(223,20,43)" fg:x="65" fg:w="1"/><text x="1.8242%" y="463.50"></text></g><g><title>__rdl_alloc_zeroed (1 samples, 0.02%)</title><rect x="1.5984%" y="389" width="0.0242%" height="15" fill="rgb(229,81,49)" fg:x="66" fg:w="1"/><text x="1.8484%" y="399.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="1.6227%" y="373" width="0.0484%" height="15" fill="rgb(236,28,36)" fg:x="67" fg:w="2"/><text x="1.8727%" y="383.50"></text></g><g><title>__libc_calloc (5 samples, 0.12%)</title><rect x="1.6227%" y="389" width="0.1211%" height="15" fill="rgb(249,185,26)" fg:x="67" fg:w="5"/><text x="1.8727%" y="399.50"></text></g><g><title>alloc::vec::from_elem (9 samples, 0.22%)</title><rect x="1.5742%" y="501" width="0.2180%" height="15" fill="rgb(249,174,33)" fg:x="65" fg:w="9"/><text x="1.8242%" y="511.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (9 samples, 0.22%)</title><rect x="1.5742%" y="485" width="0.2180%" height="15" fill="rgb(233,201,37)" fg:x="65" fg:w="9"/><text x="1.8242%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (8 samples, 0.19%)</title><rect x="1.5984%" y="469" width="0.1938%" height="15" fill="rgb(221,78,26)" fg:x="66" fg:w="8"/><text x="1.8484%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8 samples, 0.19%)</title><rect x="1.5984%" y="453" width="0.1938%" height="15" fill="rgb(250,127,30)" fg:x="66" fg:w="8"/><text x="1.8484%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (8 samples, 0.19%)</title><rect x="1.5984%" y="437" width="0.1938%" height="15" fill="rgb(230,49,44)" fg:x="66" fg:w="8"/><text x="1.8484%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.19%)</title><rect x="1.5984%" y="421" width="0.1938%" height="15" fill="rgb(229,67,23)" fg:x="66" fg:w="8"/><text x="1.8484%" y="431.50"></text></g><g><title>alloc::alloc::alloc_zeroed (8 samples, 0.19%)</title><rect x="1.5984%" y="405" width="0.1938%" height="15" fill="rgb(249,83,47)" fg:x="66" fg:w="8"/><text x="1.8484%" y="415.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="1.7438%" y="389" width="0.0484%" height="15" fill="rgb(215,43,3)" fg:x="72" fg:w="2"/><text x="1.9938%" y="399.50"></text></g><g><title>wfc::wfc::direction_mapping::DirectionMapping&lt;T&gt;::up (1 samples, 0.02%)</title><rect x="1.7922%" y="405" width="0.0242%" height="15" fill="rgb(238,154,13)" fg:x="74" fg:w="1"/><text x="2.0422%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.02%)</title><rect x="1.7922%" y="389" width="0.0242%" height="15" fill="rgb(219,56,2)" fg:x="74" fg:w="1"/><text x="2.0422%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.02%)</title><rect x="1.7922%" y="373" width="0.0242%" height="15" fill="rgb(233,0,4)" fg:x="74" fg:w="1"/><text x="2.0422%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="1.7922%" y="357" width="0.0242%" height="15" fill="rgb(235,30,7)" fg:x="74" fg:w="1"/><text x="2.0422%" y="367.50"></text></g><g><title>wfc::wfc::direction_mapping::DirectionMapping&lt;T&gt;::down (3 samples, 0.07%)</title><rect x="1.8164%" y="405" width="0.0727%" height="15" fill="rgb(250,79,13)" fg:x="75" fg:w="3"/><text x="2.0664%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.07%)</title><rect x="1.8164%" y="389" width="0.0727%" height="15" fill="rgb(211,146,34)" fg:x="75" fg:w="3"/><text x="2.0664%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.07%)</title><rect x="1.8164%" y="373" width="0.0727%" height="15" fill="rgb(228,22,38)" fg:x="75" fg:w="3"/><text x="2.0664%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.07%)</title><rect x="1.8164%" y="357" width="0.0727%" height="15" fill="rgb(235,168,5)" fg:x="75" fg:w="3"/><text x="2.0664%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (3 samples, 0.07%)</title><rect x="1.8891%" y="357" width="0.0727%" height="15" fill="rgb(221,155,16)" fg:x="78" fg:w="3"/><text x="2.1391%" y="367.50"></text></g><g><title>[libc.so.6] (59 samples, 1.43%)</title><rect x="1.9617%" y="309" width="1.4289%" height="15" fill="rgb(215,215,53)" fg:x="81" fg:w="59"/><text x="2.2117%" y="319.50"></text></g><g><title>free (179 samples, 4.34%)</title><rect x="1.9617%" y="325" width="4.3352%" height="15" fill="rgb(223,4,10)" fg:x="81" fg:w="179"/><text x="2.2117%" y="335.50">free</text></g><g><title>__rust_dealloc (2 samples, 0.05%)</title><rect x="6.2969%" y="325" width="0.0484%" height="15" fill="rgb(234,103,6)" fg:x="260" fg:w="2"/><text x="6.5469%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bool&gt;&gt; (224 samples, 5.43%)</title><rect x="1.8891%" y="405" width="5.4250%" height="15" fill="rgb(227,97,0)" fg:x="78" fg:w="224"/><text x="2.1391%" y="415.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;bool&gt;&gt; (224 samples, 5.43%)</title><rect x="1.8891%" y="389" width="5.4250%" height="15" fill="rgb(234,150,53)" fg:x="78" fg:w="224"/><text x="2.1391%" y="399.50">core::p..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (224 samples, 5.43%)</title><rect x="1.8891%" y="373" width="5.4250%" height="15" fill="rgb(228,201,54)" fg:x="78" fg:w="224"/><text x="2.1391%" y="383.50">&lt;alloc:..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (221 samples, 5.35%)</title><rect x="1.9617%" y="357" width="5.3524%" height="15" fill="rgb(222,22,37)" fg:x="81" fg:w="221"/><text x="2.2117%" y="367.50">&lt;alloc:..</text></g><g><title>alloc::alloc::dealloc (221 samples, 5.35%)</title><rect x="1.9617%" y="341" width="5.3524%" height="15" fill="rgb(237,53,32)" fg:x="81" fg:w="221"/><text x="2.2117%" y="351.50">alloc::..</text></g><g><title>__rdl_dealloc (40 samples, 0.97%)</title><rect x="6.3454%" y="325" width="0.9688%" height="15" fill="rgb(233,25,53)" fg:x="262" fg:w="40"/><text x="6.5954%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (40 samples, 0.97%)</title><rect x="6.3454%" y="309" width="0.9688%" height="15" fill="rgb(210,40,34)" fg:x="262" fg:w="40"/><text x="6.5954%" y="319.50"></text></g><g><title>asm_common_interrupt (1 samples, 0.02%)</title><rect x="7.3141%" y="309" width="0.0242%" height="15" fill="rgb(241,220,44)" fg:x="302" fg:w="1"/><text x="7.5641%" y="319.50"></text></g><g><title>common_interrupt (1 samples, 0.02%)</title><rect x="7.3141%" y="293" width="0.0242%" height="15" fill="rgb(235,28,35)" fg:x="302" fg:w="1"/><text x="7.5641%" y="303.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.02%)</title><rect x="7.3141%" y="277" width="0.0242%" height="15" fill="rgb(210,56,17)" fg:x="302" fg:w="1"/><text x="7.5641%" y="287.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="7.3141%" y="261" width="0.0242%" height="15" fill="rgb(224,130,29)" fg:x="302" fg:w="1"/><text x="7.5641%" y="271.50"></text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (12 samples, 0.29%)</title><rect x="7.3141%" y="389" width="0.2906%" height="15" fill="rgb(235,212,8)" fg:x="302" fg:w="12"/><text x="7.5641%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (12 samples, 0.29%)</title><rect x="7.3141%" y="373" width="0.2906%" height="15" fill="rgb(223,33,50)" fg:x="302" fg:w="12"/><text x="7.5641%" y="383.50"></text></g><g><title>core::cmp::min (12 samples, 0.29%)</title><rect x="7.3141%" y="357" width="0.2906%" height="15" fill="rgb(219,149,13)" fg:x="302" fg:w="12"/><text x="7.5641%" y="367.50"></text></g><g><title>core::cmp::Ord::min (12 samples, 0.29%)</title><rect x="7.3141%" y="341" width="0.2906%" height="15" fill="rgb(250,156,29)" fg:x="302" fg:w="12"/><text x="7.5641%" y="351.50"></text></g><g><title>core::cmp::min_by (12 samples, 0.29%)</title><rect x="7.3141%" y="325" width="0.2906%" height="15" fill="rgb(216,193,19)" fg:x="302" fg:w="12"/><text x="7.5641%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (26 samples, 0.63%)</title><rect x="7.3141%" y="405" width="0.6297%" height="15" fill="rgb(216,135,14)" fg:x="302" fg:w="26"/><text x="7.5641%" y="415.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (14 samples, 0.34%)</title><rect x="7.6047%" y="389" width="0.3391%" height="15" fill="rgb(241,47,5)" fg:x="314" fg:w="14"/><text x="7.8547%" y="399.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="7.9438%" y="213" width="0.0242%" height="15" fill="rgb(233,42,35)" fg:x="328" fg:w="1"/><text x="8.1938%" y="223.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="7.9438%" y="197" width="0.0242%" height="15" fill="rgb(231,13,6)" fg:x="328" fg:w="1"/><text x="8.1938%" y="207.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.02%)</title><rect x="7.9438%" y="181" width="0.0242%" height="15" fill="rgb(207,181,40)" fg:x="328" fg:w="1"/><text x="8.1938%" y="191.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="7.9438%" y="165" width="0.0242%" height="15" fill="rgb(254,173,49)" fg:x="328" fg:w="1"/><text x="8.1938%" y="175.50"></text></g><g><title>run_timer_softirq (1 samples, 0.02%)</title><rect x="7.9438%" y="149" width="0.0242%" height="15" fill="rgb(221,1,38)" fg:x="328" fg:w="1"/><text x="8.1938%" y="159.50"></text></g><g><title>__run_timers.part.0 (1 samples, 0.02%)</title><rect x="7.9438%" y="133" width="0.0242%" height="15" fill="rgb(206,124,46)" fg:x="328" fg:w="1"/><text x="8.1938%" y="143.50"></text></g><g><title>call_timer_fn (1 samples, 0.02%)</title><rect x="7.9438%" y="117" width="0.0242%" height="15" fill="rgb(249,21,11)" fg:x="328" fg:w="1"/><text x="8.1938%" y="127.50"></text></g><g><title>vbg_heartbeat_timer (1 samples, 0.02%)</title><rect x="7.9438%" y="101" width="0.0242%" height="15" fill="rgb(222,201,40)" fg:x="328" fg:w="1"/><text x="8.1938%" y="111.50"></text></g><g><title>vbg_req_perform (1 samples, 0.02%)</title><rect x="7.9438%" y="85" width="0.0242%" height="15" fill="rgb(235,61,29)" fg:x="328" fg:w="1"/><text x="8.1938%" y="95.50"></text></g><g><title>malloc (144 samples, 3.49%)</title><rect x="7.9438%" y="229" width="3.4875%" height="15" fill="rgb(219,207,3)" fg:x="328" fg:w="144"/><text x="8.1938%" y="239.50">mal..</text></g><g><title>__rust_alloc (9 samples, 0.22%)</title><rect x="11.4313%" y="229" width="0.2180%" height="15" fill="rgb(222,56,46)" fg:x="472" fg:w="9"/><text x="11.6813%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (33 samples, 0.80%)</title><rect x="11.6493%" y="213" width="0.7992%" height="15" fill="rgb(239,76,54)" fg:x="481" fg:w="33"/><text x="11.8993%" y="223.50"></text></g><g><title>__rdl_alloc (92 samples, 2.23%)</title><rect x="11.6493%" y="229" width="2.2281%" height="15" fill="rgb(231,124,27)" fg:x="481" fg:w="92"/><text x="11.8993%" y="239.50">_..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (247 samples, 5.98%)</title><rect x="7.9438%" y="277" width="5.9821%" height="15" fill="rgb(249,195,6)" fg:x="328" fg:w="247"/><text x="8.1938%" y="287.50">&lt;alloc::..</text></g><g><title>alloc::alloc::Global::alloc_impl (247 samples, 5.98%)</title><rect x="7.9438%" y="261" width="5.9821%" height="15" fill="rgb(237,174,47)" fg:x="328" fg:w="247"/><text x="8.1938%" y="271.50">alloc::a..</text></g><g><title>alloc::alloc::alloc (247 samples, 5.98%)</title><rect x="7.9438%" y="245" width="5.9821%" height="15" fill="rgb(206,201,31)" fg:x="328" fg:w="247"/><text x="8.1938%" y="255.50">alloc::a..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (248 samples, 6.01%)</title><rect x="7.9438%" y="341" width="6.0063%" height="15" fill="rgb(231,57,52)" fg:x="328" fg:w="248"/><text x="8.1938%" y="351.50">alloc::v..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (248 samples, 6.01%)</title><rect x="7.9438%" y="325" width="6.0063%" height="15" fill="rgb(248,177,22)" fg:x="328" fg:w="248"/><text x="8.1938%" y="335.50">alloc::v..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (248 samples, 6.01%)</title><rect x="7.9438%" y="309" width="6.0063%" height="15" fill="rgb(215,211,37)" fg:x="328" fg:w="248"/><text x="8.1938%" y="319.50">alloc::r..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (248 samples, 6.01%)</title><rect x="7.9438%" y="293" width="6.0063%" height="15" fill="rgb(241,128,51)" fg:x="328" fg:w="248"/><text x="8.1938%" y="303.50">alloc::r..</text></g><g><title>wfc::wfc::queueprop::QueueProp::legal_tiles::{{closure}}::{{closure}} (38 samples, 0.92%)</title><rect x="13.9501%" y="245" width="0.9203%" height="15" fill="rgb(227,165,31)" fg:x="576" fg:w="38"/><text x="14.2001%" y="255.50"></text></g><g><title>core::ptr::write (26 samples, 0.63%)</title><rect x="14.8704%" y="213" width="0.6297%" height="15" fill="rgb(228,167,24)" fg:x="614" fg:w="26"/><text x="15.1204%" y="223.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="15.5001%" y="213" width="0.0242%" height="15" fill="rgb(228,143,12)" fg:x="640" fg:w="1"/><text x="15.7501%" y="223.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="15.5001%" y="197" width="0.0242%" height="15" fill="rgb(249,149,8)" fg:x="640" fg:w="1"/><text x="15.7501%" y="207.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.02%)</title><rect x="15.5001%" y="181" width="0.0242%" height="15" fill="rgb(243,35,44)" fg:x="640" fg:w="1"/><text x="15.7501%" y="191.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="15.5001%" y="165" width="0.0242%" height="15" fill="rgb(246,89,9)" fg:x="640" fg:w="1"/><text x="15.7501%" y="175.50"></text></g><g><title>run_timer_softirq (1 samples, 0.02%)</title><rect x="15.5001%" y="149" width="0.0242%" height="15" fill="rgb(233,213,13)" fg:x="640" fg:w="1"/><text x="15.7501%" y="159.50"></text></g><g><title>__run_timers.part.0 (1 samples, 0.02%)</title><rect x="15.5001%" y="133" width="0.0242%" height="15" fill="rgb(233,141,41)" fg:x="640" fg:w="1"/><text x="15.7501%" y="143.50"></text></g><g><title>call_timer_fn (1 samples, 0.02%)</title><rect x="15.5001%" y="117" width="0.0242%" height="15" fill="rgb(239,167,4)" fg:x="640" fg:w="1"/><text x="15.7501%" y="127.50"></text></g><g><title>vbg_heartbeat_timer (1 samples, 0.02%)</title><rect x="15.5001%" y="101" width="0.0242%" height="15" fill="rgb(209,217,16)" fg:x="640" fg:w="1"/><text x="15.7501%" y="111.50"></text></g><g><title>vbg_req_perform (1 samples, 0.02%)</title><rect x="15.5001%" y="85" width="0.0242%" height="15" fill="rgb(219,88,35)" fg:x="640" fg:w="1"/><text x="15.7501%" y="95.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (158 samples, 3.83%)</title><rect x="13.9501%" y="261" width="3.8266%" height="15" fill="rgb(220,193,23)" fg:x="576" fg:w="158"/><text x="14.2001%" y="271.50">core..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (120 samples, 2.91%)</title><rect x="14.8704%" y="245" width="2.9063%" height="15" fill="rgb(230,90,52)" fg:x="614" fg:w="120"/><text x="15.1204%" y="255.50">co..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::{{closure}} (120 samples, 2.91%)</title><rect x="14.8704%" y="229" width="2.9063%" height="15" fill="rgb(252,106,19)" fg:x="614" fg:w="120"/><text x="15.1204%" y="239.50">al..</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="17.7767%" y="261" width="0.0242%" height="15" fill="rgb(206,74,20)" fg:x="734" fg:w="1"/><text x="18.0267%" y="271.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="17.7767%" y="245" width="0.0242%" height="15" fill="rgb(230,138,44)" fg:x="734" fg:w="1"/><text x="18.0267%" y="255.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.02%)</title><rect x="17.7767%" y="229" width="0.0242%" height="15" fill="rgb(235,182,43)" fg:x="734" fg:w="1"/><text x="18.0267%" y="239.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="17.7767%" y="213" width="0.0242%" height="15" fill="rgb(242,16,51)" fg:x="734" fg:w="1"/><text x="18.0267%" y="223.50"></text></g><g><title>run_timer_softirq (1 samples, 0.02%)</title><rect x="17.7767%" y="197" width="0.0242%" height="15" fill="rgb(248,9,4)" fg:x="734" fg:w="1"/><text x="18.0267%" y="207.50"></text></g><g><title>__run_timers.part.0 (1 samples, 0.02%)</title><rect x="17.7767%" y="181" width="0.0242%" height="15" fill="rgb(210,31,22)" fg:x="734" fg:w="1"/><text x="18.0267%" y="191.50"></text></g><g><title>call_timer_fn (1 samples, 0.02%)</title><rect x="17.7767%" y="165" width="0.0242%" height="15" fill="rgb(239,54,39)" fg:x="734" fg:w="1"/><text x="18.0267%" y="175.50"></text></g><g><title>vbg_heartbeat_timer (1 samples, 0.02%)</title><rect x="17.7767%" y="149" width="0.0242%" height="15" fill="rgb(230,99,41)" fg:x="734" fg:w="1"/><text x="18.0267%" y="159.50"></text></g><g><title>vbg_req_perform (1 samples, 0.02%)</title><rect x="17.7767%" y="133" width="0.0242%" height="15" fill="rgb(253,106,12)" fg:x="734" fg:w="1"/><text x="18.0267%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.94%)</title><rect x="17.8009%" y="261" width="0.9445%" height="15" fill="rgb(213,46,41)" fg:x="735" fg:w="39"/><text x="18.0509%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (39 samples, 0.94%)</title><rect x="17.8009%" y="245" width="0.9445%" height="15" fill="rgb(215,133,35)" fg:x="735" fg:w="39"/><text x="18.0509%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (491 samples, 11.89%)</title><rect x="7.9438%" y="405" width="11.8915%" height="15" fill="rgb(213,28,5)" fg:x="328" fg:w="491"/><text x="8.1938%" y="415.50">core::iter::traits..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (491 samples, 11.89%)</title><rect x="7.9438%" y="389" width="11.8915%" height="15" fill="rgb(215,77,49)" fg:x="328" fg:w="491"/><text x="8.1938%" y="399.50">&lt;alloc::vec::Vec&lt;T..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (491 samples, 11.89%)</title><rect x="7.9438%" y="373" width="11.8915%" height="15" fill="rgb(248,100,22)" fg:x="328" fg:w="491"/><text x="8.1938%" y="383.50">&lt;alloc::vec::Vec&lt;T..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (491 samples, 11.89%)</title><rect x="7.9438%" y="357" width="11.8915%" height="15" fill="rgb(208,67,9)" fg:x="328" fg:w="491"/><text x="8.1938%" y="367.50">&lt;alloc::vec::Vec&lt;T..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (243 samples, 5.89%)</title><rect x="13.9501%" y="341" width="5.8852%" height="15" fill="rgb(219,133,21)" fg:x="576" fg:w="243"/><text x="14.2001%" y="351.50">&lt;alloc:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (243 samples, 5.89%)</title><rect x="13.9501%" y="325" width="5.8852%" height="15" fill="rgb(246,46,29)" fg:x="576" fg:w="243"/><text x="14.2001%" y="335.50">alloc::..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (243 samples, 5.89%)</title><rect x="13.9501%" y="309" width="5.8852%" height="15" fill="rgb(246,185,52)" fg:x="576" fg:w="243"/><text x="14.2001%" y="319.50">core::i..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (243 samples, 5.89%)</title><rect x="13.9501%" y="293" width="5.8852%" height="15" fill="rgb(252,136,11)" fg:x="576" fg:w="243"/><text x="14.2001%" y="303.50">&lt;core::..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (243 samples, 5.89%)</title><rect x="13.9501%" y="277" width="5.8852%" height="15" fill="rgb(219,138,53)" fg:x="576" fg:w="243"/><text x="14.2001%" y="287.50">core::i..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (10 samples, 0.24%)</title><rect x="19.8353%" y="405" width="0.2422%" height="15" fill="rgb(211,51,23)" fg:x="819" fg:w="10"/><text x="20.0853%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (10 samples, 0.24%)</title><rect x="19.8353%" y="389" width="0.2422%" height="15" fill="rgb(247,221,28)" fg:x="819" fg:w="10"/><text x="20.0853%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (10 samples, 0.24%)</title><rect x="19.8353%" y="373" width="0.2422%" height="15" fill="rgb(251,222,45)" fg:x="819" fg:w="10"/><text x="20.0853%" y="383.50"></text></g><g><title>wfc::wfc::queueprop::QueueProp::legal_tiles::{{closure}} (757 samples, 18.33%)</title><rect x="1.7922%" y="421" width="18.3337%" height="15" fill="rgb(217,162,53)" fg:x="74" fg:w="757"/><text x="2.0422%" y="431.50">wfc::wfc::queueprop::QueuePro..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (819 samples, 19.84%)</title><rect x="1.7922%" y="437" width="19.8353%" height="15" fill="rgb(229,93,14)" fg:x="74" fg:w="819"/><text x="2.0422%" y="447.50">core::iter::adapters::map::map_..</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="21.6275%" y="437" width="0.0242%" height="15" fill="rgb(209,67,49)" fg:x="893" fg:w="1"/><text x="21.8775%" y="447.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="21.6275%" y="421" width="0.0242%" height="15" fill="rgb(213,87,29)" fg:x="893" fg:w="1"/><text x="21.8775%" y="431.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.02%)</title><rect x="21.6275%" y="405" width="0.0242%" height="15" fill="rgb(205,151,52)" fg:x="893" fg:w="1"/><text x="21.8775%" y="415.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="21.6275%" y="389" width="0.0242%" height="15" fill="rgb(253,215,39)" fg:x="893" fg:w="1"/><text x="21.8775%" y="399.50"></text></g><g><title>run_timer_softirq (1 samples, 0.02%)</title><rect x="21.6275%" y="373" width="0.0242%" height="15" fill="rgb(221,220,41)" fg:x="893" fg:w="1"/><text x="21.8775%" y="383.50"></text></g><g><title>__run_timers.part.0 (1 samples, 0.02%)</title><rect x="21.6275%" y="357" width="0.0242%" height="15" fill="rgb(218,133,21)" fg:x="893" fg:w="1"/><text x="21.8775%" y="367.50"></text></g><g><title>call_timer_fn (1 samples, 0.02%)</title><rect x="21.6275%" y="341" width="0.0242%" height="15" fill="rgb(221,193,43)" fg:x="893" fg:w="1"/><text x="21.8775%" y="351.50"></text></g><g><title>vbg_heartbeat_timer (1 samples, 0.02%)</title><rect x="21.6275%" y="325" width="0.0242%" height="15" fill="rgb(240,128,52)" fg:x="893" fg:w="1"/><text x="21.8775%" y="335.50"></text></g><g><title>vbg_req_perform (1 samples, 0.02%)</title><rect x="21.6275%" y="309" width="0.0242%" height="15" fill="rgb(253,114,12)" fg:x="893" fg:w="1"/><text x="21.8775%" y="319.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_fold::{{closure}} (837 samples, 20.27%)</title><rect x="1.7922%" y="453" width="20.2713%" height="15" fill="rgb(215,223,47)" fg:x="74" fg:w="837"/><text x="2.0422%" y="463.50">core::iter::adapters::filter_map..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::__iterator_get_unchecked (1 samples, 0.02%)</title><rect x="22.0635%" y="421" width="0.0242%" height="15" fill="rgb(248,225,23)" fg:x="911" fg:w="1"/><text x="22.3135%" y="431.50"></text></g><g><title>&lt;u8 as core::iter::range::Step&gt;::forward_unchecked (1 samples, 0.02%)</title><rect x="22.0635%" y="405" width="0.0242%" height="15" fill="rgb(250,108,0)" fg:x="911" fg:w="1"/><text x="22.3135%" y="415.50"></text></g><g><title>core::num::&lt;impl u8&gt;::unchecked_add (1 samples, 0.02%)</title><rect x="22.0635%" y="389" width="0.0242%" height="15" fill="rgb(228,208,7)" fg:x="911" fg:w="1"/><text x="22.3135%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.22%)</title><rect x="22.0635%" y="453" width="0.2180%" height="15" fill="rgb(244,45,10)" fg:x="911" fg:w="9"/><text x="22.3135%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (9 samples, 0.22%)</title><rect x="22.0635%" y="437" width="0.2180%" height="15" fill="rgb(207,125,25)" fg:x="911" fg:w="9"/><text x="22.3135%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (856 samples, 20.73%)</title><rect x="1.7922%" y="469" width="20.7314%" height="15" fill="rgb(210,195,18)" fg:x="74" fg:w="856"/><text x="2.0422%" y="479.50">core::iter::traits::iterator::Ite..</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (858 samples, 20.78%)</title><rect x="1.7922%" y="485" width="20.7798%" height="15" fill="rgb(249,80,12)" fg:x="74" fg:w="858"/><text x="2.0422%" y="495.50">&lt;core::iter::adapters::filter_map..</text></g><g><title>wfc::wfc::queueprop::QueueProp::legal_tiles (894 samples, 21.65%)</title><rect x="0.9930%" y="517" width="21.6517%" height="15" fill="rgb(221,65,9)" fg:x="41" fg:w="894"/><text x="1.2430%" y="527.50">wfc::wfc::queueprop::QueueProp::le..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (861 samples, 20.85%)</title><rect x="1.7922%" y="501" width="20.8525%" height="15" fill="rgb(235,49,36)" fg:x="74" fg:w="861"/><text x="2.0422%" y="511.50">&lt;core::iter::adapters::map::Map&lt;I..</text></g><g><title>free (6 samples, 0.15%)</title><rect x="22.6447%" y="437" width="0.1453%" height="15" fill="rgb(225,32,20)" fg:x="935" fg:w="6"/><text x="22.8947%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bool&gt;&gt; (7 samples, 0.17%)</title><rect x="22.6447%" y="517" width="0.1695%" height="15" fill="rgb(215,141,46)" fg:x="935" fg:w="7"/><text x="22.8947%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;bool&gt;&gt; (7 samples, 0.17%)</title><rect x="22.6447%" y="501" width="0.1695%" height="15" fill="rgb(250,160,47)" fg:x="935" fg:w="7"/><text x="22.8947%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.17%)</title><rect x="22.6447%" y="485" width="0.1695%" height="15" fill="rgb(216,222,40)" fg:x="935" fg:w="7"/><text x="22.8947%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.17%)</title><rect x="22.6447%" y="469" width="0.1695%" height="15" fill="rgb(234,217,39)" fg:x="935" fg:w="7"/><text x="22.8947%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.17%)</title><rect x="22.6447%" y="453" width="0.1695%" height="15" fill="rgb(207,178,40)" fg:x="935" fg:w="7"/><text x="22.8947%" y="463.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.02%)</title><rect x="22.7900%" y="437" width="0.0242%" height="15" fill="rgb(221,136,13)" fg:x="941" fg:w="1"/><text x="23.0400%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.02%)</title><rect x="22.7900%" y="421" width="0.0242%" height="15" fill="rgb(249,199,10)" fg:x="941" fg:w="1"/><text x="23.0400%" y="431.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::ne (1 samples, 0.02%)</title><rect x="22.8142%" y="517" width="0.0242%" height="15" fill="rgb(249,222,13)" fg:x="942" fg:w="1"/><text x="23.0642%" y="527.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::ne (1 samples, 0.02%)</title><rect x="22.8142%" y="501" width="0.0242%" height="15" fill="rgb(244,185,38)" fg:x="942" fg:w="1"/><text x="23.0642%" y="511.50"></text></g><g><title>core::slice::cmp::SlicePartialEq::not_equal (1 samples, 0.02%)</title><rect x="22.8142%" y="485" width="0.0242%" height="15" fill="rgb(236,202,9)" fg:x="942" fg:w="1"/><text x="23.0642%" y="495.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.02%)</title><rect x="22.8142%" y="469" width="0.0242%" height="15" fill="rgb(250,229,37)" fg:x="942" fg:w="1"/><text x="23.0642%" y="479.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="22.8142%" y="453" width="0.0242%" height="15" fill="rgb(206,174,23)" fg:x="942" fg:w="1"/><text x="23.0642%" y="463.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (1 samples, 0.02%)</title><rect x="22.8385%" y="517" width="0.0242%" height="15" fill="rgb(211,33,43)" fg:x="943" fg:w="1"/><text x="23.0885%" y="527.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="22.8385%" y="501" width="0.0242%" height="15" fill="rgb(245,58,50)" fg:x="943" fg:w="1"/><text x="23.0885%" y="511.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="22.8627%" y="437" width="0.0242%" height="15" fill="rgb(244,68,36)" fg:x="944" fg:w="1"/><text x="23.1127%" y="447.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="22.8627%" y="421" width="0.0242%" height="15" fill="rgb(232,229,15)" fg:x="944" fg:w="1"/><text x="23.1127%" y="431.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.02%)</title><rect x="22.8627%" y="405" width="0.0242%" height="15" fill="rgb(254,30,23)" fg:x="944" fg:w="1"/><text x="23.1127%" y="415.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="22.8627%" y="389" width="0.0242%" height="15" fill="rgb(235,160,14)" fg:x="944" fg:w="1"/><text x="23.1127%" y="399.50"></text></g><g><title>run_timer_softirq (1 samples, 0.02%)</title><rect x="22.8627%" y="373" width="0.0242%" height="15" fill="rgb(212,155,44)" fg:x="944" fg:w="1"/><text x="23.1127%" y="383.50"></text></g><g><title>__run_timers.part.0 (1 samples, 0.02%)</title><rect x="22.8627%" y="357" width="0.0242%" height="15" fill="rgb(226,2,50)" fg:x="944" fg:w="1"/><text x="23.1127%" y="367.50"></text></g><g><title>call_timer_fn (1 samples, 0.02%)</title><rect x="22.8627%" y="341" width="0.0242%" height="15" fill="rgb(234,177,6)" fg:x="944" fg:w="1"/><text x="23.1127%" y="351.50"></text></g><g><title>vbg_heartbeat_timer (1 samples, 0.02%)</title><rect x="22.8627%" y="325" width="0.0242%" height="15" fill="rgb(217,24,9)" fg:x="944" fg:w="1"/><text x="23.1127%" y="335.50"></text></g><g><title>vbg_req_perform (1 samples, 0.02%)</title><rect x="22.8627%" y="309" width="0.0242%" height="15" fill="rgb(220,13,46)" fg:x="944" fg:w="1"/><text x="23.1127%" y="319.50"></text></g><g><title>wfc::wfc::queueprop::QueueProp::propagate (912 samples, 22.09%)</title><rect x="0.8477%" y="533" width="22.0877%" height="15" fill="rgb(239,221,27)" fg:x="35" fg:w="912"/><text x="1.0977%" y="543.50">wfc::wfc::queueprop::QueueProp::pro..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (3 samples, 0.07%)</title><rect x="22.8627%" y="517" width="0.0727%" height="15" fill="rgb(222,198,25)" fg:x="944" fg:w="3"/><text x="23.1127%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (3 samples, 0.07%)</title><rect x="22.8627%" y="501" width="0.0727%" height="15" fill="rgb(211,99,13)" fg:x="944" fg:w="3"/><text x="23.1127%" y="511.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (3 samples, 0.07%)</title><rect x="22.8627%" y="485" width="0.0727%" height="15" fill="rgb(232,111,31)" fg:x="944" fg:w="3"/><text x="23.1127%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.07%)</title><rect x="22.8627%" y="469" width="0.0727%" height="15" fill="rgb(245,82,37)" fg:x="944" fg:w="3"/><text x="23.1127%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (3 samples, 0.07%)</title><rect x="22.8627%" y="453" width="0.0727%" height="15" fill="rgb(227,149,46)" fg:x="944" fg:w="3"/><text x="23.1127%" y="463.50"></text></g><g><title>wfc::wfc::queueprop::QueueProp::prepare_map (1 samples, 0.02%)</title><rect x="22.9353%" y="533" width="0.0242%" height="15" fill="rgb(218,36,50)" fg:x="947" fg:w="1"/><text x="23.1853%" y="543.50"></text></g><g><title>wfc::wfc::vec3d::Vec3D&lt;T&gt;::set (1 samples, 0.02%)</title><rect x="22.9353%" y="517" width="0.0242%" height="15" fill="rgb(226,80,48)" fg:x="947" fg:w="1"/><text x="23.1853%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bool&gt;&gt; (1 samples, 0.02%)</title><rect x="22.9353%" y="501" width="0.0242%" height="15" fill="rgb(238,224,15)" fg:x="947" fg:w="1"/><text x="23.1853%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;bool&gt;&gt; (1 samples, 0.02%)</title><rect x="22.9353%" y="485" width="0.0242%" height="15" fill="rgb(241,136,10)" fg:x="947" fg:w="1"/><text x="23.1853%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="22.9353%" y="469" width="0.0242%" height="15" fill="rgb(208,32,45)" fg:x="947" fg:w="1"/><text x="23.1853%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="22.9353%" y="453" width="0.0242%" height="15" fill="rgb(207,135,9)" fg:x="947" fg:w="1"/><text x="23.1853%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="22.9353%" y="437" width="0.0242%" height="15" fill="rgb(206,86,44)" fg:x="947" fg:w="1"/><text x="23.1853%" y="447.50"></text></g><g><title>free (1 samples, 0.02%)</title><rect x="22.9353%" y="421" width="0.0242%" height="15" fill="rgb(245,177,15)" fg:x="947" fg:w="1"/><text x="23.1853%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (13 samples, 0.31%)</title><rect x="22.9596%" y="437" width="0.3148%" height="15" fill="rgb(206,64,50)" fg:x="948" fg:w="13"/><text x="23.2096%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (13 samples, 0.31%)</title><rect x="22.9596%" y="421" width="0.3148%" height="15" fill="rgb(234,36,40)" fg:x="948" fg:w="13"/><text x="23.2096%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (13 samples, 0.31%)</title><rect x="22.9596%" y="405" width="0.3148%" height="15" fill="rgb(213,64,8)" fg:x="948" fg:w="13"/><text x="23.2096%" y="415.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (3 samples, 0.07%)</title><rect x="23.2744%" y="325" width="0.0727%" height="15" fill="rgb(210,75,36)" fg:x="961" fg:w="3"/><text x="23.5244%" y="335.50"></text></g><g><title>sysvec_apic_timer_interrupt (3 samples, 0.07%)</title><rect x="23.2744%" y="309" width="0.0727%" height="15" fill="rgb(229,88,21)" fg:x="961" fg:w="3"/><text x="23.5244%" y="319.50"></text></g><g><title>irq_exit_rcu (3 samples, 0.07%)</title><rect x="23.2744%" y="293" width="0.0727%" height="15" fill="rgb(252,204,47)" fg:x="961" fg:w="3"/><text x="23.5244%" y="303.50"></text></g><g><title>__softirqentry_text_start (3 samples, 0.07%)</title><rect x="23.2744%" y="277" width="0.0727%" height="15" fill="rgb(208,77,27)" fg:x="961" fg:w="3"/><text x="23.5244%" y="287.50"></text></g><g><title>run_timer_softirq (3 samples, 0.07%)</title><rect x="23.2744%" y="261" width="0.0727%" height="15" fill="rgb(221,76,26)" fg:x="961" fg:w="3"/><text x="23.5244%" y="271.50"></text></g><g><title>__run_timers.part.0 (3 samples, 0.07%)</title><rect x="23.2744%" y="245" width="0.0727%" height="15" fill="rgb(225,139,18)" fg:x="961" fg:w="3"/><text x="23.5244%" y="255.50"></text></g><g><title>call_timer_fn (3 samples, 0.07%)</title><rect x="23.2744%" y="229" width="0.0727%" height="15" fill="rgb(230,137,11)" fg:x="961" fg:w="3"/><text x="23.5244%" y="239.50"></text></g><g><title>vbg_heartbeat_timer (3 samples, 0.07%)</title><rect x="23.2744%" y="213" width="0.0727%" height="15" fill="rgb(212,28,1)" fg:x="961" fg:w="3"/><text x="23.5244%" y="223.50"></text></g><g><title>vbg_req_perform (3 samples, 0.07%)</title><rect x="23.2744%" y="197" width="0.0727%" height="15" fill="rgb(248,164,17)" fg:x="961" fg:w="3"/><text x="23.5244%" y="207.50"></text></g><g><title>asm_common_interrupt (2 samples, 0.05%)</title><rect x="23.3471%" y="325" width="0.0484%" height="15" fill="rgb(222,171,42)" fg:x="964" fg:w="2"/><text x="23.5971%" y="335.50"></text></g><g><title>common_interrupt (2 samples, 0.05%)</title><rect x="23.3471%" y="309" width="0.0484%" height="15" fill="rgb(243,84,45)" fg:x="964" fg:w="2"/><text x="23.5971%" y="319.50"></text></g><g><title>irq_exit_rcu (2 samples, 0.05%)</title><rect x="23.3471%" y="293" width="0.0484%" height="15" fill="rgb(252,49,23)" fg:x="964" fg:w="2"/><text x="23.5971%" y="303.50"></text></g><g><title>__softirqentry_text_start (2 samples, 0.05%)</title><rect x="23.3471%" y="277" width="0.0484%" height="15" fill="rgb(215,19,7)" fg:x="964" fg:w="2"/><text x="23.5971%" y="287.50"></text></g><g><title>[libc.so.6] (298 samples, 7.22%)</title><rect x="23.2744%" y="341" width="7.2172%" height="15" fill="rgb(238,81,41)" fg:x="961" fg:w="298"/><text x="23.5244%" y="351.50">[libc.so.6]</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (300 samples, 7.27%)</title><rect x="23.2744%" y="373" width="7.2657%" height="15" fill="rgb(210,199,37)" fg:x="961" fg:w="300"/><text x="23.5244%" y="383.50">core::ptr:..</text></g><g><title>core::intrinsics::copy_nonoverlapping (300 samples, 7.27%)</title><rect x="23.2744%" y="357" width="7.2657%" height="15" fill="rgb(244,192,49)" fg:x="961" fg:w="300"/><text x="23.5244%" y="367.50">core::intr..</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="30.5401%" y="261" width="0.0242%" height="15" fill="rgb(226,211,11)" fg:x="1261" fg:w="1"/><text x="30.7901%" y="271.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="30.5401%" y="245" width="0.0242%" height="15" fill="rgb(236,162,54)" fg:x="1261" fg:w="1"/><text x="30.7901%" y="255.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.02%)</title><rect x="30.5401%" y="229" width="0.0242%" height="15" fill="rgb(220,229,9)" fg:x="1261" fg:w="1"/><text x="30.7901%" y="239.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="30.5401%" y="213" width="0.0242%" height="15" fill="rgb(250,87,22)" fg:x="1261" fg:w="1"/><text x="30.7901%" y="223.50"></text></g><g><title>run_timer_softirq (1 samples, 0.02%)</title><rect x="30.5401%" y="197" width="0.0242%" height="15" fill="rgb(239,43,17)" fg:x="1261" fg:w="1"/><text x="30.7901%" y="207.50"></text></g><g><title>__run_timers.part.0 (1 samples, 0.02%)</title><rect x="30.5401%" y="181" width="0.0242%" height="15" fill="rgb(231,177,25)" fg:x="1261" fg:w="1"/><text x="30.7901%" y="191.50"></text></g><g><title>call_timer_fn (1 samples, 0.02%)</title><rect x="30.5401%" y="165" width="0.0242%" height="15" fill="rgb(219,179,1)" fg:x="1261" fg:w="1"/><text x="30.7901%" y="175.50"></text></g><g><title>vbg_heartbeat_timer (1 samples, 0.02%)</title><rect x="30.5401%" y="149" width="0.0242%" height="15" fill="rgb(238,219,53)" fg:x="1261" fg:w="1"/><text x="30.7901%" y="159.50"></text></g><g><title>vbg_req_perform (1 samples, 0.02%)</title><rect x="30.5401%" y="133" width="0.0242%" height="15" fill="rgb(232,167,36)" fg:x="1261" fg:w="1"/><text x="30.7901%" y="143.50"></text></g><g><title>asm_common_interrupt (1 samples, 0.02%)</title><rect x="30.5643%" y="261" width="0.0242%" height="15" fill="rgb(244,19,51)" fg:x="1262" fg:w="1"/><text x="30.8143%" y="271.50"></text></g><g><title>common_interrupt (1 samples, 0.02%)</title><rect x="30.5643%" y="245" width="0.0242%" height="15" fill="rgb(224,6,22)" fg:x="1262" fg:w="1"/><text x="30.8143%" y="255.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.02%)</title><rect x="30.5643%" y="229" width="0.0242%" height="15" fill="rgb(224,145,5)" fg:x="1262" fg:w="1"/><text x="30.8143%" y="239.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="30.5643%" y="213" width="0.0242%" height="15" fill="rgb(234,130,49)" fg:x="1262" fg:w="1"/><text x="30.8143%" y="223.50"></text></g><g><title>malloc (179 samples, 4.34%)</title><rect x="30.5401%" y="277" width="4.3352%" height="15" fill="rgb(254,6,2)" fg:x="1261" fg:w="179"/><text x="30.7901%" y="287.50">malloc</text></g><g><title>__rust_alloc (6 samples, 0.15%)</title><rect x="34.8753%" y="277" width="0.1453%" height="15" fill="rgb(208,96,46)" fg:x="1440" fg:w="6"/><text x="35.1253%" y="287.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="35.0206%" y="245" width="0.0242%" height="15" fill="rgb(239,3,39)" fg:x="1446" fg:w="1"/><text x="35.2706%" y="255.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="35.0206%" y="229" width="0.0242%" height="15" fill="rgb(233,210,1)" fg:x="1446" fg:w="1"/><text x="35.2706%" y="239.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.02%)</title><rect x="35.0206%" y="213" width="0.0242%" height="15" fill="rgb(244,137,37)" fg:x="1446" fg:w="1"/><text x="35.2706%" y="223.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="35.0206%" y="197" width="0.0242%" height="15" fill="rgb(240,136,2)" fg:x="1446" fg:w="1"/><text x="35.2706%" y="207.50"></text></g><g><title>run_timer_softirq (1 samples, 0.02%)</title><rect x="35.0206%" y="181" width="0.0242%" height="15" fill="rgb(239,18,37)" fg:x="1446" fg:w="1"/><text x="35.2706%" y="191.50"></text></g><g><title>__run_timers.part.0 (1 samples, 0.02%)</title><rect x="35.0206%" y="165" width="0.0242%" height="15" fill="rgb(218,185,22)" fg:x="1446" fg:w="1"/><text x="35.2706%" y="175.50"></text></g><g><title>call_timer_fn (1 samples, 0.02%)</title><rect x="35.0206%" y="149" width="0.0242%" height="15" fill="rgb(225,218,4)" fg:x="1446" fg:w="1"/><text x="35.2706%" y="159.50"></text></g><g><title>vbg_heartbeat_timer (1 samples, 0.02%)</title><rect x="35.0206%" y="133" width="0.0242%" height="15" fill="rgb(230,182,32)" fg:x="1446" fg:w="1"/><text x="35.2706%" y="143.50"></text></g><g><title>vbg_req_perform (1 samples, 0.02%)</title><rect x="35.0206%" y="117" width="0.0242%" height="15" fill="rgb(242,56,43)" fg:x="1446" fg:w="1"/><text x="35.2706%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (27 samples, 0.65%)</title><rect x="35.0206%" y="261" width="0.6539%" height="15" fill="rgb(233,99,24)" fg:x="1446" fg:w="27"/><text x="35.2706%" y="271.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="35.6745%" y="261" width="0.0242%" height="15" fill="rgb(234,209,42)" fg:x="1473" fg:w="1"/><text x="35.9245%" y="271.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="35.6745%" y="245" width="0.0242%" height="15" fill="rgb(227,7,12)" fg:x="1473" fg:w="1"/><text x="35.9245%" y="255.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.02%)</title><rect x="35.6745%" y="229" width="0.0242%" height="15" fill="rgb(245,203,43)" fg:x="1473" fg:w="1"/><text x="35.9245%" y="239.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="35.6745%" y="213" width="0.0242%" height="15" fill="rgb(238,205,33)" fg:x="1473" fg:w="1"/><text x="35.9245%" y="223.50"></text></g><g><title>run_timer_softirq (1 samples, 0.02%)</title><rect x="35.6745%" y="197" width="0.0242%" height="15" fill="rgb(231,56,7)" fg:x="1473" fg:w="1"/><text x="35.9245%" y="207.50"></text></g><g><title>__run_timers.part.0 (1 samples, 0.02%)</title><rect x="35.6745%" y="181" width="0.0242%" height="15" fill="rgb(244,186,29)" fg:x="1473" fg:w="1"/><text x="35.9245%" y="191.50"></text></g><g><title>call_timer_fn (1 samples, 0.02%)</title><rect x="35.6745%" y="165" width="0.0242%" height="15" fill="rgb(234,111,31)" fg:x="1473" fg:w="1"/><text x="35.9245%" y="175.50"></text></g><g><title>vbg_heartbeat_timer (1 samples, 0.02%)</title><rect x="35.6745%" y="149" width="0.0242%" height="15" fill="rgb(241,149,10)" fg:x="1473" fg:w="1"/><text x="35.9245%" y="159.50"></text></g><g><title>vbg_req_perform (1 samples, 0.02%)</title><rect x="35.6745%" y="133" width="0.0242%" height="15" fill="rgb(249,206,44)" fg:x="1473" fg:w="1"/><text x="35.9245%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (290 samples, 7.02%)</title><rect x="30.5401%" y="325" width="7.0235%" height="15" fill="rgb(251,153,30)" fg:x="1261" fg:w="290"/><text x="30.7901%" y="335.50">&lt;alloc::a..</text></g><g><title>alloc::alloc::Global::alloc_impl (290 samples, 7.02%)</title><rect x="30.5401%" y="309" width="7.0235%" height="15" fill="rgb(239,152,38)" fg:x="1261" fg:w="290"/><text x="30.7901%" y="319.50">alloc::al..</text></g><g><title>alloc::alloc::alloc (290 samples, 7.02%)</title><rect x="30.5401%" y="293" width="7.0235%" height="15" fill="rgb(249,139,47)" fg:x="1261" fg:w="290"/><text x="30.7901%" y="303.50">alloc::al..</text></g><g><title>__rdl_alloc (105 samples, 2.54%)</title><rect x="35.0206%" y="277" width="2.5430%" height="15" fill="rgb(244,64,35)" fg:x="1446" fg:w="105"/><text x="35.2706%" y="287.50">__..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (598 samples, 14.48%)</title><rect x="23.2744%" y="421" width="14.4829%" height="15" fill="rgb(216,46,15)" fg:x="961" fg:w="598"/><text x="23.5244%" y="431.50">alloc::slice::&lt;impl [T..</text></g><g><title>alloc::slice::hack::to_vec (598 samples, 14.48%)</title><rect x="23.2744%" y="405" width="14.4829%" height="15" fill="rgb(250,74,19)" fg:x="961" fg:w="598"/><text x="23.5244%" y="415.50">alloc::slice::hack::to..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (598 samples, 14.48%)</title><rect x="23.2744%" y="389" width="14.4829%" height="15" fill="rgb(249,42,33)" fg:x="961" fg:w="598"/><text x="23.5244%" y="399.50">&lt;T as alloc::slice::ha..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (298 samples, 7.22%)</title><rect x="30.5401%" y="373" width="7.2172%" height="15" fill="rgb(242,149,17)" fg:x="1261" fg:w="298"/><text x="30.7901%" y="383.50">alloc::vec..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (298 samples, 7.22%)</title><rect x="30.5401%" y="357" width="7.2172%" height="15" fill="rgb(244,29,21)" fg:x="1261" fg:w="298"/><text x="30.7901%" y="367.50">alloc::raw..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (298 samples, 7.22%)</title><rect x="30.5401%" y="341" width="7.2172%" height="15" fill="rgb(220,130,37)" fg:x="1261" fg:w="298"/><text x="30.7901%" y="351.50">alloc::raw..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (627 samples, 15.19%)</title><rect x="23.2744%" y="437" width="15.1853%" height="15" fill="rgb(211,67,2)" fg:x="961" fg:w="627"/><text x="23.5244%" y="447.50">&lt;alloc::vec::Vec&lt;T,A&gt; a..</text></g><g><title>wfc::wfc::vec3d::Vec3D&lt;T&gt;::get (656 samples, 15.89%)</title><rect x="22.9596%" y="453" width="15.8876%" height="15" fill="rgb(235,68,52)" fg:x="948" fg:w="656"/><text x="23.2096%" y="463.50">wfc::wfc::vec3d::Vec3D&lt;T..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (5 samples, 0.12%)</title><rect x="38.8472%" y="389" width="0.1211%" height="15" fill="rgb(246,142,3)" fg:x="1604" fg:w="5"/><text x="39.0972%" y="399.50"></text></g><g><title>core::alloc::layout::Layout::array (5 samples, 0.12%)</title><rect x="38.8472%" y="373" width="0.1211%" height="15" fill="rgb(241,25,7)" fg:x="1604" fg:w="5"/><text x="39.0972%" y="383.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (5 samples, 0.12%)</title><rect x="38.8472%" y="357" width="0.1211%" height="15" fill="rgb(242,119,39)" fg:x="1604" fg:w="5"/><text x="39.0972%" y="367.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="38.9683%" y="341" width="0.0242%" height="15" fill="rgb(241,98,45)" fg:x="1609" fg:w="1"/><text x="39.2183%" y="351.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="38.9683%" y="325" width="0.0242%" height="15" fill="rgb(254,28,30)" fg:x="1609" fg:w="1"/><text x="39.2183%" y="335.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.02%)</title><rect x="38.9683%" y="309" width="0.0242%" height="15" fill="rgb(241,142,54)" fg:x="1609" fg:w="1"/><text x="39.2183%" y="319.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="38.9683%" y="293" width="0.0242%" height="15" fill="rgb(222,85,15)" fg:x="1609" fg:w="1"/><text x="39.2183%" y="303.50"></text></g><g><title>run_timer_softirq (1 samples, 0.02%)</title><rect x="38.9683%" y="277" width="0.0242%" height="15" fill="rgb(210,85,47)" fg:x="1609" fg:w="1"/><text x="39.2183%" y="287.50"></text></g><g><title>__run_timers.part.0 (1 samples, 0.02%)</title><rect x="38.9683%" y="261" width="0.0242%" height="15" fill="rgb(224,206,25)" fg:x="1609" fg:w="1"/><text x="39.2183%" y="271.50"></text></g><g><title>call_timer_fn (1 samples, 0.02%)</title><rect x="38.9683%" y="245" width="0.0242%" height="15" fill="rgb(243,201,19)" fg:x="1609" fg:w="1"/><text x="39.2183%" y="255.50"></text></g><g><title>vbg_heartbeat_timer (1 samples, 0.02%)</title><rect x="38.9683%" y="229" width="0.0242%" height="15" fill="rgb(236,59,4)" fg:x="1609" fg:w="1"/><text x="39.2183%" y="239.50"></text></g><g><title>vbg_req_perform (1 samples, 0.02%)</title><rect x="38.9683%" y="213" width="0.0242%" height="15" fill="rgb(254,179,45)" fg:x="1609" fg:w="1"/><text x="39.2183%" y="223.50"></text></g><g><title>[libc.so.6] (76 samples, 1.84%)</title><rect x="38.9925%" y="341" width="1.8406%" height="15" fill="rgb(226,14,10)" fg:x="1610" fg:w="76"/><text x="39.2425%" y="351.50">[..</text></g><g><title>free (228 samples, 5.52%)</title><rect x="38.9683%" y="357" width="5.5219%" height="15" fill="rgb(244,27,41)" fg:x="1609" fg:w="228"/><text x="39.2183%" y="367.50">free</text></g><g><title>__rust_dealloc (6 samples, 0.15%)</title><rect x="44.4902%" y="357" width="0.1453%" height="15" fill="rgb(235,35,32)" fg:x="1837" fg:w="6"/><text x="44.7402%" y="367.50"></text></g><g><title>__rdl_dealloc (47 samples, 1.14%)</title><rect x="44.6355%" y="357" width="1.1383%" height="15" fill="rgb(218,68,31)" fg:x="1843" fg:w="47"/><text x="44.8855%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (47 samples, 1.14%)</title><rect x="44.6355%" y="341" width="1.1383%" height="15" fill="rgb(207,120,37)" fg:x="1843" fg:w="47"/><text x="44.8855%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,usize,usize,alloc::vec::Vec&lt;bool&gt;)&gt; (290 samples, 7.02%)</title><rect x="38.8472%" y="453" width="7.0235%" height="15" fill="rgb(227,98,0)" fg:x="1604" fg:w="290"/><text x="39.0972%" y="463.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bool&gt;&gt; (290 samples, 7.02%)</title><rect x="38.8472%" y="437" width="7.0235%" height="15" fill="rgb(207,7,3)" fg:x="1604" fg:w="290"/><text x="39.0972%" y="447.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;bool&gt;&gt; (290 samples, 7.02%)</title><rect x="38.8472%" y="421" width="7.0235%" height="15" fill="rgb(206,98,19)" fg:x="1604" fg:w="290"/><text x="39.0972%" y="431.50">core::ptr..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (290 samples, 7.02%)</title><rect x="38.8472%" y="405" width="7.0235%" height="15" fill="rgb(217,5,26)" fg:x="1604" fg:w="290"/><text x="39.0972%" y="415.50">&lt;alloc::r..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (285 samples, 6.90%)</title><rect x="38.9683%" y="389" width="6.9024%" height="15" fill="rgb(235,190,38)" fg:x="1609" fg:w="285"/><text x="39.2183%" y="399.50">&lt;alloc::a..</text></g><g><title>alloc::alloc::dealloc (285 samples, 6.90%)</title><rect x="38.9683%" y="373" width="6.9024%" height="15" fill="rgb(247,86,24)" fg:x="1609" fg:w="285"/><text x="39.2183%" y="383.50">alloc::al..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1 samples, 0.02%)</title><rect x="45.8707%" y="453" width="0.0242%" height="15" fill="rgb(205,101,16)" fg:x="1894" fg:w="1"/><text x="46.1207%" y="463.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (28 samples, 0.68%)</title><rect x="45.8949%" y="373" width="0.6781%" height="15" fill="rgb(246,168,33)" fg:x="1895" fg:w="28"/><text x="46.1449%" y="383.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (28 samples, 0.68%)</title><rect x="45.8949%" y="357" width="0.6781%" height="15" fill="rgb(231,114,1)" fg:x="1895" fg:w="28"/><text x="46.1449%" y="367.50"></text></g><g><title>irqentry_exit (2 samples, 0.05%)</title><rect x="46.5730%" y="341" width="0.0484%" height="15" fill="rgb(207,184,53)" fg:x="1923" fg:w="2"/><text x="46.8230%" y="351.50"></text></g><g><title>irqentry_exit_to_user_mode (2 samples, 0.05%)</title><rect x="46.5730%" y="325" width="0.0484%" height="15" fill="rgb(224,95,51)" fg:x="1923" fg:w="2"/><text x="46.8230%" y="335.50"></text></g><g><title>exit_to_user_mode_prepare (2 samples, 0.05%)</title><rect x="46.5730%" y="309" width="0.0484%" height="15" fill="rgb(212,188,45)" fg:x="1923" fg:w="2"/><text x="46.8230%" y="319.50"></text></g><g><title>exit_to_user_mode_loop (2 samples, 0.05%)</title><rect x="46.5730%" y="293" width="0.0484%" height="15" fill="rgb(223,154,38)" fg:x="1923" fg:w="2"/><text x="46.8230%" y="303.50"></text></g><g><title>schedule (2 samples, 0.05%)</title><rect x="46.5730%" y="277" width="0.0484%" height="15" fill="rgb(251,22,52)" fg:x="1923" fg:w="2"/><text x="46.8230%" y="287.50"></text></g><g><title>__schedule (2 samples, 0.05%)</title><rect x="46.5730%" y="261" width="0.0484%" height="15" fill="rgb(229,209,22)" fg:x="1923" fg:w="2"/><text x="46.8230%" y="271.50"></text></g><g><title>finish_task_switch.isra.0 (2 samples, 0.05%)</title><rect x="46.5730%" y="245" width="0.0484%" height="15" fill="rgb(234,138,34)" fg:x="1923" fg:w="2"/><text x="46.8230%" y="255.50"></text></g><g><title>run_timer_softirq (7 samples, 0.17%)</title><rect x="46.6215%" y="309" width="0.1695%" height="15" fill="rgb(212,95,11)" fg:x="1925" fg:w="7"/><text x="46.8715%" y="319.50"></text></g><g><title>__run_timers.part.0 (7 samples, 0.17%)</title><rect x="46.6215%" y="293" width="0.1695%" height="15" fill="rgb(240,179,47)" fg:x="1925" fg:w="7"/><text x="46.8715%" y="303.50"></text></g><g><title>call_timer_fn (7 samples, 0.17%)</title><rect x="46.6215%" y="277" width="0.1695%" height="15" fill="rgb(240,163,11)" fg:x="1925" fg:w="7"/><text x="46.8715%" y="287.50"></text></g><g><title>vbg_heartbeat_timer (7 samples, 0.17%)</title><rect x="46.6215%" y="261" width="0.1695%" height="15" fill="rgb(236,37,12)" fg:x="1925" fg:w="7"/><text x="46.8715%" y="271.50"></text></g><g><title>vbg_req_perform (7 samples, 0.17%)</title><rect x="46.6215%" y="245" width="0.1695%" height="15" fill="rgb(232,164,16)" fg:x="1925" fg:w="7"/><text x="46.8715%" y="255.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (10 samples, 0.24%)</title><rect x="46.5730%" y="373" width="0.2422%" height="15" fill="rgb(244,205,15)" fg:x="1923" fg:w="10"/><text x="46.8230%" y="383.50"></text></g><g><title>sysvec_apic_timer_interrupt (10 samples, 0.24%)</title><rect x="46.5730%" y="357" width="0.2422%" height="15" fill="rgb(223,117,47)" fg:x="1923" fg:w="10"/><text x="46.8230%" y="367.50"></text></g><g><title>irq_exit_rcu (8 samples, 0.19%)</title><rect x="46.6215%" y="341" width="0.1938%" height="15" fill="rgb(244,107,35)" fg:x="1925" fg:w="8"/><text x="46.8715%" y="351.50"></text></g><g><title>__softirqentry_text_start (8 samples, 0.19%)</title><rect x="46.6215%" y="325" width="0.1938%" height="15" fill="rgb(205,140,8)" fg:x="1925" fg:w="8"/><text x="46.8715%" y="335.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 0.02%)</title><rect x="46.8152%" y="357" width="0.0242%" height="15" fill="rgb(228,84,46)" fg:x="1933" fg:w="1"/><text x="47.0652%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.02%)</title><rect x="46.8152%" y="341" width="0.0242%" height="15" fill="rgb(254,188,9)" fg:x="1933" fg:w="1"/><text x="47.0652%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.02%)</title><rect x="46.8152%" y="325" width="0.0242%" height="15" fill="rgb(206,112,54)" fg:x="1933" fg:w="1"/><text x="47.0652%" y="335.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (2 samples, 0.05%)</title><rect x="46.8394%" y="357" width="0.0484%" height="15" fill="rgb(216,84,49)" fg:x="1934" fg:w="2"/><text x="47.0894%" y="367.50"></text></g><g><title>sysvec_apic_timer_interrupt (2 samples, 0.05%)</title><rect x="46.8394%" y="341" width="0.0484%" height="15" fill="rgb(214,194,35)" fg:x="1934" fg:w="2"/><text x="47.0894%" y="351.50"></text></g><g><title>irq_exit_rcu (2 samples, 0.05%)</title><rect x="46.8394%" y="325" width="0.0484%" height="15" fill="rgb(249,28,3)" fg:x="1934" fg:w="2"/><text x="47.0894%" y="335.50"></text></g><g><title>__softirqentry_text_start (2 samples, 0.05%)</title><rect x="46.8394%" y="309" width="0.0484%" height="15" fill="rgb(222,56,52)" fg:x="1934" fg:w="2"/><text x="47.0894%" y="319.50"></text></g><g><title>run_timer_softirq (2 samples, 0.05%)</title><rect x="46.8394%" y="293" width="0.0484%" height="15" fill="rgb(245,217,50)" fg:x="1934" fg:w="2"/><text x="47.0894%" y="303.50"></text></g><g><title>__run_timers.part.0 (2 samples, 0.05%)</title><rect x="46.8394%" y="277" width="0.0484%" height="15" fill="rgb(213,201,24)" fg:x="1934" fg:w="2"/><text x="47.0894%" y="287.50"></text></g><g><title>call_timer_fn (2 samples, 0.05%)</title><rect x="46.8394%" y="261" width="0.0484%" height="15" fill="rgb(248,116,28)" fg:x="1934" fg:w="2"/><text x="47.0894%" y="271.50"></text></g><g><title>vbg_heartbeat_timer (2 samples, 0.05%)</title><rect x="46.8394%" y="245" width="0.0484%" height="15" fill="rgb(219,72,43)" fg:x="1934" fg:w="2"/><text x="47.0894%" y="255.50"></text></g><g><title>vbg_req_perform (2 samples, 0.05%)</title><rect x="46.8394%" y="229" width="0.0484%" height="15" fill="rgb(209,138,14)" fg:x="1934" fg:w="2"/><text x="47.0894%" y="239.50"></text></g><g><title>asm_common_interrupt (1 samples, 0.02%)</title><rect x="46.8879%" y="357" width="0.0242%" height="15" fill="rgb(222,18,33)" fg:x="1936" fg:w="1"/><text x="47.1379%" y="367.50"></text></g><g><title>common_interrupt (1 samples, 0.02%)</title><rect x="46.8879%" y="341" width="0.0242%" height="15" fill="rgb(213,199,7)" fg:x="1936" fg:w="1"/><text x="47.1379%" y="351.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.02%)</title><rect x="46.8879%" y="325" width="0.0242%" height="15" fill="rgb(250,110,10)" fg:x="1936" fg:w="1"/><text x="47.1379%" y="335.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="46.8879%" y="309" width="0.0242%" height="15" fill="rgb(248,123,6)" fg:x="1936" fg:w="1"/><text x="47.1379%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (287 samples, 6.95%)</title><rect x="46.8152%" y="373" width="6.9508%" height="15" fill="rgb(206,91,31)" fg:x="1933" fg:w="287"/><text x="47.0652%" y="383.50">&lt;core::sl..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (1,938 samples, 46.94%)</title><rect x="45.8949%" y="453" width="46.9363%" height="15" fill="rgb(211,154,13)" fg:x="1895" fg:w="1938"/><text x="46.1449%" y="463.50">&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::I..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (1,938 samples, 46.94%)</title><rect x="45.8949%" y="437" width="46.9363%" height="15" fill="rgb(225,148,7)" fg:x="1895" fg:w="1938"/><text x="46.1449%" y="447.50">core::iter::traits::iterator::Iterator::sum</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1,938 samples, 46.94%)</title><rect x="45.8949%" y="421" width="46.9363%" height="15" fill="rgb(220,160,43)" fg:x="1895" fg:w="1938"/><text x="46.1449%" y="431.50">&lt;usize as core::iter::traits::accum::Sum&gt;::sum</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,938 samples, 46.94%)</title><rect x="45.8949%" y="405" width="46.9363%" height="15" fill="rgb(213,52,39)" fg:x="1895" fg:w="1938"/><text x="46.1449%" y="415.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterato..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (1,938 samples, 46.94%)</title><rect x="45.8949%" y="389" width="46.9363%" height="15" fill="rgb(243,137,7)" fg:x="1895" fg:w="1938"/><text x="46.1449%" y="399.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2,893 samples, 70.07%)</title><rect x="22.9596%" y="485" width="70.0654%" height="15" fill="rgb(230,79,13)" fg:x="948" fg:w="2893"/><text x="23.2096%" y="495.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>wfc::wfc::queueprop::QueueProp::find_minimal::{{closure}} (2,893 samples, 70.07%)</title><rect x="22.9596%" y="469" width="70.0654%" height="15" fill="rgb(247,105,23)" fg:x="948" fg:w="2893"/><text x="23.2096%" y="479.50">wfc::wfc::queueprop::QueueProp::find_minimal::{{closure}}</text></g><g><title>asm_sysvec_apic_timer_interrupt (2 samples, 0.05%)</title><rect x="93.0249%" y="485" width="0.0484%" height="15" fill="rgb(223,179,41)" fg:x="3841" fg:w="2"/><text x="93.2749%" y="495.50"></text></g><g><title>sysvec_apic_timer_interrupt (2 samples, 0.05%)</title><rect x="93.0249%" y="469" width="0.0484%" height="15" fill="rgb(218,9,34)" fg:x="3841" fg:w="2"/><text x="93.2749%" y="479.50"></text></g><g><title>irq_exit_rcu (2 samples, 0.05%)</title><rect x="93.0249%" y="453" width="0.0484%" height="15" fill="rgb(222,106,8)" fg:x="3841" fg:w="2"/><text x="93.2749%" y="463.50"></text></g><g><title>__softirqentry_text_start (2 samples, 0.05%)</title><rect x="93.0249%" y="437" width="0.0484%" height="15" fill="rgb(211,220,0)" fg:x="3841" fg:w="2"/><text x="93.2749%" y="447.50"></text></g><g><title>run_timer_softirq (2 samples, 0.05%)</title><rect x="93.0249%" y="421" width="0.0484%" height="15" fill="rgb(229,52,16)" fg:x="3841" fg:w="2"/><text x="93.2749%" y="431.50"></text></g><g><title>__run_timers.part.0 (2 samples, 0.05%)</title><rect x="93.0249%" y="405" width="0.0484%" height="15" fill="rgb(212,155,18)" fg:x="3841" fg:w="2"/><text x="93.2749%" y="415.50"></text></g><g><title>call_timer_fn (2 samples, 0.05%)</title><rect x="93.0249%" y="389" width="0.0484%" height="15" fill="rgb(242,21,14)" fg:x="3841" fg:w="2"/><text x="93.2749%" y="399.50"></text></g><g><title>vbg_heartbeat_timer (2 samples, 0.05%)</title><rect x="93.0249%" y="373" width="0.0484%" height="15" fill="rgb(222,19,48)" fg:x="3841" fg:w="2"/><text x="93.2749%" y="383.50"></text></g><g><title>vbg_req_perform (2 samples, 0.05%)</title><rect x="93.0249%" y="357" width="0.0484%" height="15" fill="rgb(232,45,27)" fg:x="3841" fg:w="2"/><text x="93.2749%" y="367.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="93.0734%" y="453" width="0.0242%" height="15" fill="rgb(249,103,42)" fg:x="3843" fg:w="1"/><text x="93.3234%" y="463.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="93.0734%" y="437" width="0.0242%" height="15" fill="rgb(246,81,33)" fg:x="3843" fg:w="1"/><text x="93.3234%" y="447.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.02%)</title><rect x="93.0734%" y="421" width="0.0242%" height="15" fill="rgb(252,33,42)" fg:x="3843" fg:w="1"/><text x="93.3234%" y="431.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="93.0734%" y="405" width="0.0242%" height="15" fill="rgb(209,212,41)" fg:x="3843" fg:w="1"/><text x="93.3234%" y="415.50"></text></g><g><title>run_timer_softirq (1 samples, 0.02%)</title><rect x="93.0734%" y="389" width="0.0242%" height="15" fill="rgb(207,154,6)" fg:x="3843" fg:w="1"/><text x="93.3234%" y="399.50"></text></g><g><title>__run_timers.part.0 (1 samples, 0.02%)</title><rect x="93.0734%" y="373" width="0.0242%" height="15" fill="rgb(223,64,47)" fg:x="3843" fg:w="1"/><text x="93.3234%" y="383.50"></text></g><g><title>call_timer_fn (1 samples, 0.02%)</title><rect x="93.0734%" y="357" width="0.0242%" height="15" fill="rgb(211,161,38)" fg:x="3843" fg:w="1"/><text x="93.3234%" y="367.50"></text></g><g><title>vbg_heartbeat_timer (1 samples, 0.02%)</title><rect x="93.0734%" y="341" width="0.0242%" height="15" fill="rgb(219,138,40)" fg:x="3843" fg:w="1"/><text x="93.3234%" y="351.50"></text></g><g><title>vbg_req_perform (1 samples, 0.02%)</title><rect x="93.0734%" y="325" width="0.0242%" height="15" fill="rgb(241,228,46)" fg:x="3843" fg:w="1"/><text x="93.3234%" y="335.50"></text></g><g><title>asm_common_interrupt (1 samples, 0.02%)</title><rect x="93.0976%" y="453" width="0.0242%" height="15" fill="rgb(223,209,38)" fg:x="3844" fg:w="1"/><text x="93.3476%" y="463.50"></text></g><g><title>common_interrupt (1 samples, 0.02%)</title><rect x="93.0976%" y="437" width="0.0242%" height="15" fill="rgb(236,164,45)" fg:x="3844" fg:w="1"/><text x="93.3476%" y="447.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.02%)</title><rect x="93.0976%" y="421" width="0.0242%" height="15" fill="rgb(231,15,5)" fg:x="3844" fg:w="1"/><text x="93.3476%" y="431.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="93.0976%" y="405" width="0.0242%" height="15" fill="rgb(252,35,15)" fg:x="3844" fg:w="1"/><text x="93.3476%" y="415.50"></text></g><g><title>wfc::wfc::vec3d::get_pos_from_index (209 samples, 5.06%)</title><rect x="93.0734%" y="469" width="5.0618%" height="15" fill="rgb(248,181,18)" fg:x="3843" fg:w="209"/><text x="93.3234%" y="479.50">wfc::w..</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="98.1351%" y="469" width="0.0242%" height="15" fill="rgb(233,39,42)" fg:x="4052" fg:w="1"/><text x="98.3851%" y="479.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="98.1351%" y="453" width="0.0242%" height="15" fill="rgb(238,110,33)" fg:x="4052" fg:w="1"/><text x="98.3851%" y="463.50"></text></g><g><title>irqentry_exit (1 samples, 0.02%)</title><rect x="98.1351%" y="437" width="0.0242%" height="15" fill="rgb(233,195,10)" fg:x="4052" fg:w="1"/><text x="98.3851%" y="447.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.02%)</title><rect x="98.1351%" y="421" width="0.0242%" height="15" fill="rgb(254,105,3)" fg:x="4052" fg:w="1"/><text x="98.3851%" y="431.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.02%)</title><rect x="98.1351%" y="405" width="0.0242%" height="15" fill="rgb(221,225,9)" fg:x="4052" fg:w="1"/><text x="98.3851%" y="415.50"></text></g><g><title>exit_to_user_mode_loop (1 samples, 0.02%)</title><rect x="98.1351%" y="389" width="0.0242%" height="15" fill="rgb(224,227,45)" fg:x="4052" fg:w="1"/><text x="98.3851%" y="399.50"></text></g><g><title>schedule (1 samples, 0.02%)</title><rect x="98.1351%" y="373" width="0.0242%" height="15" fill="rgb(229,198,43)" fg:x="4052" fg:w="1"/><text x="98.3851%" y="383.50"></text></g><g><title>__schedule (1 samples, 0.02%)</title><rect x="98.1351%" y="357" width="0.0242%" height="15" fill="rgb(206,209,35)" fg:x="4052" fg:w="1"/><text x="98.3851%" y="367.50"></text></g><g><title>finish_task_switch.isra.0 (1 samples, 0.02%)</title><rect x="98.1351%" y="341" width="0.0242%" height="15" fill="rgb(245,195,53)" fg:x="4052" fg:w="1"/><text x="98.3851%" y="351.50"></text></g><g><title>&lt;wfc::wfc::vec3d::PosIter3D as core::iter::traits::iterator::Iterator&gt;::next (247 samples, 5.98%)</title><rect x="93.0734%" y="485" width="5.9821%" height="15" fill="rgb(240,92,26)" fg:x="3843" fg:w="247"/><text x="93.3234%" y="495.50">&lt;wfc::wf..</text></g><g><title>wfc::wfc::queueprop::QueueProp::find_minimal (3,180 samples, 77.02%)</title><rect x="22.9596%" y="533" width="77.0162%" height="15" fill="rgb(207,40,23)" fg:x="948" fg:w="3180"/><text x="23.2096%" y="543.50">wfc::wfc::queueprop::QueueProp::find_minimal</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,180 samples, 77.02%)</title><rect x="22.9596%" y="517" width="77.0162%" height="15" fill="rgb(223,111,35)" fg:x="948" fg:w="3180"/><text x="23.2096%" y="527.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (3,180 samples, 77.02%)</title><rect x="22.9596%" y="501" width="77.0162%" height="15" fill="rgb(229,147,28)" fg:x="948" fg:w="3180"/><text x="23.2096%" y="511.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>all (4,129 samples, 100%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(211,29,28)" fg:x="0" fg:w="4129"/><text x="0.2500%" y="863.50"></text></g><g><title>queueprop (4,129 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(228,72,33)" fg:x="0" fg:w="4129"/><text x="0.2500%" y="847.50">queueprop</text></g><g><title>_start (4,129 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(205,214,31)" fg:x="0" fg:w="4129"/><text x="0.2500%" y="831.50">_start</text></g><g><title>__libc_start_main (4,129 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(224,111,15)" fg:x="0" fg:w="4129"/><text x="0.2500%" y="815.50">__libc_start_main</text></g><g><title>[libc.so.6] (4,129 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(253,21,26)" fg:x="0" fg:w="4129"/><text x="0.2500%" y="799.50">[libc.so.6]</text></g><g><title>main (4,129 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(245,139,43)" fg:x="0" fg:w="4129"/><text x="0.2500%" y="783.50">main</text></g><g><title>std::rt::lang_start_internal (4,129 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(252,170,7)" fg:x="0" fg:w="4129"/><text x="0.2500%" y="767.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (4,129 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(231,118,14)" fg:x="0" fg:w="4129"/><text x="0.2500%" y="751.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (4,129 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(238,83,0)" fg:x="0" fg:w="4129"/><text x="0.2500%" y="735.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (4,129 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(221,39,39)" fg:x="0" fg:w="4129"/><text x="0.2500%" y="719.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (4,129 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(222,119,46)" fg:x="0" fg:w="4129"/><text x="0.2500%" y="703.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (4,129 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(222,165,49)" fg:x="0" fg:w="4129"/><text x="0.2500%" y="687.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (4,129 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(219,113,52)" fg:x="0" fg:w="4129"/><text x="0.2500%" y="671.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (4,129 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(214,7,15)" fg:x="0" fg:w="4129"/><text x="0.2500%" y="655.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (4,129 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(235,32,4)" fg:x="0" fg:w="4129"/><text x="0.2500%" y="639.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (4,129 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(238,90,54)" fg:x="0" fg:w="4129"/><text x="0.2500%" y="623.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (4,129 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(213,208,19)" fg:x="0" fg:w="4129"/><text x="0.2500%" y="607.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (4,129 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(233,156,4)" fg:x="0" fg:w="4129"/><text x="0.2500%" y="591.50">core::ops::function::FnOnce::call_once</text></g><g><title>queueprop::main (4,129 samples, 100.00%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(207,194,5)" fg:x="0" fg:w="4129"/><text x="0.2500%" y="575.50">queueprop::main</text></g><g><title>&lt;wfc::wfc::queueprop::QueueProp as wfc::wfc::traits::WFC&gt;::solve (4,097 samples, 99.22%)</title><rect x="0.7750%" y="549" width="99.2250%" height="15" fill="rgb(206,111,30)" fg:x="32" fg:w="4097"/><text x="1.0250%" y="559.50">&lt;wfc::wfc::queueprop::QueueProp as wfc::wfc::traits::WFC&gt;::solve</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;(usize,usize,usize)&gt;&gt; (1 samples, 0.02%)</title><rect x="99.9758%" y="533" width="0.0242%" height="15" fill="rgb(243,70,54)" fg:x="4128" fg:w="1"/><text x="100.2258%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(usize,usize,usize)&gt;&gt; (1 samples, 0.02%)</title><rect x="99.9758%" y="517" width="0.0242%" height="15" fill="rgb(242,28,8)" fg:x="4128" fg:w="1"/><text x="100.2258%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="99.9758%" y="501" width="0.0242%" height="15" fill="rgb(219,106,18)" fg:x="4128" fg:w="1"/><text x="100.2258%" y="511.50"></text></g></svg></svg>