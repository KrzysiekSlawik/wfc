<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="918" onload="init(evt)" viewBox="0 0 1200 918" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="918" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="901.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="901.00"> </text><svg id="frames" x="10" width="1180" total_samples="97090"><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::FromResidual&gt;::from_residual (20 samples, 0.02%)</title><rect x="0.0587%" y="357" width="0.0206%" height="15" fill="rgb(227,0,7)" fg:x="57" fg:w="20"/><text x="0.3087%" y="367.50"></text></g><g><title>[libc.so.6] (19 samples, 0.02%)</title><rect x="0.0597%" y="341" width="0.0196%" height="15" fill="rgb(217,0,24)" fg:x="58" fg:w="19"/><text x="0.3097%" y="351.50"></text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::Try&gt;::branch (16 samples, 0.02%)</title><rect x="0.0793%" y="357" width="0.0165%" height="15" fill="rgb(221,193,54)" fg:x="77" fg:w="16"/><text x="0.3293%" y="367.50"></text></g><g><title>[libc.so.6] (14 samples, 0.01%)</title><rect x="0.0814%" y="341" width="0.0144%" height="15" fill="rgb(248,212,6)" fg:x="79" fg:w="14"/><text x="0.3314%" y="351.50"></text></g><g><title>&lt;wfc::vec3d::PosIter3D as core::iter::traits::iterator::Iterator&gt;::next (85 samples, 0.09%)</title><rect x="0.0958%" y="357" width="0.0875%" height="15" fill="rgb(208,68,35)" fg:x="93" fg:w="85"/><text x="0.3458%" y="367.50"></text></g><g><title>wfc::vec3d::get_pos_from_index (61 samples, 0.06%)</title><rect x="0.1205%" y="341" width="0.0628%" height="15" fill="rgb(232,128,0)" fg:x="117" fg:w="61"/><text x="0.3705%" y="351.50"></text></g><g><title>[libc.so.6] (23 samples, 0.02%)</title><rect x="0.2194%" y="325" width="0.0237%" height="15" fill="rgb(207,160,47)" fg:x="213" fg:w="23"/><text x="0.4694%" y="335.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (17 samples, 0.02%)</title><rect x="0.2431%" y="325" width="0.0175%" height="15" fill="rgb(228,23,34)" fg:x="236" fg:w="17"/><text x="0.4931%" y="335.50"></text></g><g><title>wfc::wfc::queueprop::QueueProp::find_minimal::{{closure}} (13 samples, 0.01%)</title><rect x="0.2472%" y="309" width="0.0134%" height="15" fill="rgb(218,30,26)" fg:x="240" fg:w="13"/><text x="0.4972%" y="319.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::len (10 samples, 0.01%)</title><rect x="0.2503%" y="293" width="0.0103%" height="15" fill="rgb(220,122,19)" fg:x="243" fg:w="10"/><text x="0.5003%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (28 samples, 0.03%)</title><rect x="0.2729%" y="197" width="0.0288%" height="15" fill="rgb(250,228,42)" fg:x="265" fg:w="28"/><text x="0.5229%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (24 samples, 0.02%)</title><rect x="0.2771%" y="181" width="0.0247%" height="15" fill="rgb(240,193,28)" fg:x="269" fg:w="24"/><text x="0.5271%" y="191.50"></text></g><g><title>free (15 samples, 0.02%)</title><rect x="0.2863%" y="165" width="0.0154%" height="15" fill="rgb(216,20,37)" fg:x="278" fg:w="15"/><text x="0.5363%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (16 samples, 0.02%)</title><rect x="0.3121%" y="181" width="0.0165%" height="15" fill="rgb(206,188,39)" fg:x="303" fg:w="16"/><text x="0.5621%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (83 samples, 0.09%)</title><rect x="0.2688%" y="213" width="0.0855%" height="15" fill="rgb(217,207,13)" fg:x="261" fg:w="83"/><text x="0.5188%" y="223.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (49 samples, 0.05%)</title><rect x="0.3038%" y="197" width="0.0505%" height="15" fill="rgb(231,73,38)" fg:x="295" fg:w="49"/><text x="0.5538%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (25 samples, 0.03%)</title><rect x="0.3286%" y="181" width="0.0257%" height="15" fill="rgb(225,20,46)" fg:x="319" fg:w="25"/><text x="0.5786%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (15 samples, 0.02%)</title><rect x="0.3389%" y="165" width="0.0154%" height="15" fill="rgb(210,31,41)" fg:x="329" fg:w="15"/><text x="0.5889%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (165 samples, 0.17%)</title><rect x="0.2060%" y="341" width="0.1699%" height="15" fill="rgb(221,200,47)" fg:x="200" fg:w="165"/><text x="0.4560%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,usize,usize,std::collections::hash::set::HashSet&lt;u8&gt;)&gt; (112 samples, 0.12%)</title><rect x="0.2606%" y="325" width="0.1154%" height="15" fill="rgb(226,26,5)" fg:x="253" fg:w="112"/><text x="0.5106%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;u8&gt;&gt; (110 samples, 0.11%)</title><rect x="0.2626%" y="309" width="0.1133%" height="15" fill="rgb(249,33,26)" fg:x="255" fg:w="110"/><text x="0.5126%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;u8,std::collections::hash::map::RandomState&gt;&gt; (110 samples, 0.11%)</title><rect x="0.2626%" y="293" width="0.1133%" height="15" fill="rgb(235,183,28)" fg:x="255" fg:w="110"/><text x="0.5126%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u8,(),std::collections::hash::map::RandomState&gt;&gt; (108 samples, 0.11%)</title><rect x="0.2647%" y="277" width="0.1112%" height="15" fill="rgb(221,5,38)" fg:x="257" fg:w="108"/><text x="0.5147%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u8,())&gt;&gt; (107 samples, 0.11%)</title><rect x="0.2657%" y="261" width="0.1102%" height="15" fill="rgb(247,18,42)" fg:x="258" fg:w="107"/><text x="0.5157%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (105 samples, 0.11%)</title><rect x="0.2678%" y="245" width="0.1081%" height="15" fill="rgb(241,131,45)" fg:x="260" fg:w="105"/><text x="0.5178%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::free_buckets (104 samples, 0.11%)</title><rect x="0.2688%" y="229" width="0.1071%" height="15" fill="rgb(249,31,29)" fg:x="261" fg:w="104"/><text x="0.5188%" y="239.50"></text></g><g><title>hashbrown::raw::TableLayout::new (21 samples, 0.02%)</title><rect x="0.3543%" y="213" width="0.0216%" height="15" fill="rgb(225,111,53)" fg:x="344" fg:w="21"/><text x="0.6043%" y="223.50"></text></g><g><title>core::cmp::Ord::max (15 samples, 0.02%)</title><rect x="0.3605%" y="197" width="0.0154%" height="15" fill="rgb(238,160,17)" fg:x="350" fg:w="15"/><text x="0.6105%" y="207.50"></text></g><g><title>[libc.so.6] (11 samples, 0.01%)</title><rect x="0.3821%" y="325" width="0.0113%" height="15" fill="rgb(214,148,48)" fg:x="371" fg:w="11"/><text x="0.6321%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (34 samples, 0.04%)</title><rect x="0.4110%" y="245" width="0.0350%" height="15" fill="rgb(232,36,49)" fg:x="399" fg:w="34"/><text x="0.6610%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::guaranteed_eq (16 samples, 0.02%)</title><rect x="0.4295%" y="229" width="0.0165%" height="15" fill="rgb(209,103,24)" fg:x="417" fg:w="16"/><text x="0.6795%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (47 samples, 0.05%)</title><rect x="0.3996%" y="277" width="0.0484%" height="15" fill="rgb(229,88,8)" fg:x="388" fg:w="47"/><text x="0.6496%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (47 samples, 0.05%)</title><rect x="0.3996%" y="261" width="0.0484%" height="15" fill="rgb(213,181,19)" fg:x="388" fg:w="47"/><text x="0.6496%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (50 samples, 0.05%)</title><rect x="0.3986%" y="309" width="0.0515%" height="15" fill="rgb(254,191,54)" fg:x="387" fg:w="50"/><text x="0.6486%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (49 samples, 0.05%)</title><rect x="0.3996%" y="293" width="0.0505%" height="15" fill="rgb(241,83,37)" fg:x="388" fg:w="49"/><text x="0.6496%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_to_nonoverlapping (124 samples, 0.13%)</title><rect x="0.5191%" y="229" width="0.1277%" height="15" fill="rgb(233,36,39)" fg:x="504" fg:w="124"/><text x="0.7691%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (119 samples, 0.12%)</title><rect x="0.5243%" y="213" width="0.1226%" height="15" fill="rgb(226,3,54)" fg:x="509" fg:w="119"/><text x="0.7743%" y="223.50"></text></g><g><title>[libc.so.6] (118 samples, 0.12%)</title><rect x="0.5253%" y="197" width="0.1215%" height="15" fill="rgb(245,192,40)" fg:x="510" fg:w="118"/><text x="0.7753%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::data_start (14 samples, 0.01%)</title><rect x="0.6468%" y="229" width="0.0144%" height="15" fill="rgb(238,167,29)" fg:x="628" fg:w="14"/><text x="0.8968%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (148 samples, 0.15%)</title><rect x="0.5140%" y="245" width="0.1524%" height="15" fill="rgb(232,182,51)" fg:x="499" fg:w="148"/><text x="0.7640%" y="255.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::into_inner (10 samples, 0.01%)</title><rect x="0.6664%" y="245" width="0.0103%" height="15" fill="rgb(231,60,39)" fg:x="647" fg:w="10"/><text x="0.9164%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (34 samples, 0.04%)</title><rect x="0.7539%" y="197" width="0.0350%" height="15" fill="rgb(208,69,12)" fg:x="732" fg:w="34"/><text x="1.0039%" y="207.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (77 samples, 0.08%)</title><rect x="0.7375%" y="213" width="0.0793%" height="15" fill="rgb(235,93,37)" fg:x="716" fg:w="77"/><text x="0.9875%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (27 samples, 0.03%)</title><rect x="0.7890%" y="197" width="0.0278%" height="15" fill="rgb(213,116,39)" fg:x="766" fg:w="27"/><text x="1.0390%" y="207.50"></text></g><g><title>__rdl_alloc (12 samples, 0.01%)</title><rect x="0.8291%" y="149" width="0.0124%" height="15" fill="rgb(222,207,29)" fg:x="805" fg:w="12"/><text x="1.0791%" y="159.50"></text></g><g><title>[libc.so.6] (13 samples, 0.01%)</title><rect x="0.8755%" y="117" width="0.0134%" height="15" fill="rgb(206,96,30)" fg:x="850" fg:w="13"/><text x="1.1255%" y="127.50"></text></g><g><title>alloc::alloc::alloc (63 samples, 0.06%)</title><rect x="0.8281%" y="165" width="0.0649%" height="15" fill="rgb(218,138,4)" fg:x="804" fg:w="63"/><text x="1.0781%" y="175.50"></text></g><g><title>malloc (49 samples, 0.05%)</title><rect x="0.8425%" y="149" width="0.0505%" height="15" fill="rgb(250,191,14)" fg:x="818" fg:w="49"/><text x="1.0925%" y="159.50"></text></g><g><title>[libc.so.6] (35 samples, 0.04%)</title><rect x="0.8569%" y="133" width="0.0360%" height="15" fill="rgb(239,60,40)" fg:x="832" fg:w="35"/><text x="1.1069%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (36 samples, 0.04%)</title><rect x="0.9476%" y="133" width="0.0371%" height="15" fill="rgb(206,27,48)" fg:x="920" fg:w="36"/><text x="1.1976%" y="143.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::guaranteed_eq (14 samples, 0.01%)</title><rect x="0.9702%" y="117" width="0.0144%" height="15" fill="rgb(225,35,8)" fg:x="942" fg:w="14"/><text x="1.2202%" y="127.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (95 samples, 0.10%)</title><rect x="0.8940%" y="165" width="0.0978%" height="15" fill="rgb(250,213,24)" fg:x="868" fg:w="95"/><text x="1.1440%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (77 samples, 0.08%)</title><rect x="0.9126%" y="149" width="0.0793%" height="15" fill="rgb(247,123,22)" fg:x="886" fg:w="77"/><text x="1.1626%" y="159.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (174 samples, 0.18%)</title><rect x="0.8168%" y="213" width="0.1792%" height="15" fill="rgb(231,138,38)" fg:x="793" fg:w="174"/><text x="1.0668%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (170 samples, 0.18%)</title><rect x="0.8209%" y="197" width="0.1751%" height="15" fill="rgb(231,145,46)" fg:x="797" fg:w="170"/><text x="1.0709%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (169 samples, 0.17%)</title><rect x="0.8219%" y="181" width="0.1741%" height="15" fill="rgb(251,118,11)" fg:x="798" fg:w="169"/><text x="1.0719%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (279 samples, 0.29%)</title><rect x="0.7097%" y="229" width="0.2874%" height="15" fill="rgb(217,147,25)" fg:x="689" fg:w="279"/><text x="0.9597%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (340 samples, 0.35%)</title><rect x="0.6849%" y="245" width="0.3502%" height="15" fill="rgb(247,81,37)" fg:x="665" fg:w="340"/><text x="0.9349%" y="255.50"></text></g><g><title>hashbrown::raw::TableLayout::new (37 samples, 0.04%)</title><rect x="0.9970%" y="229" width="0.0381%" height="15" fill="rgb(209,12,38)" fg:x="968" fg:w="37"/><text x="1.2470%" y="239.50"></text></g><g><title>core::cmp::Ord::max (23 samples, 0.02%)</title><rect x="1.0114%" y="213" width="0.0237%" height="15" fill="rgb(227,1,9)" fg:x="982" fg:w="23"/><text x="1.2614%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (582 samples, 0.60%)</title><rect x="0.4573%" y="261" width="0.5994%" height="15" fill="rgb(248,47,43)" fg:x="444" fg:w="582"/><text x="0.7073%" y="271.50"></text></g><g><title>hashbrown::scopeguard::guard (13 samples, 0.01%)</title><rect x="1.0434%" y="245" width="0.0134%" height="15" fill="rgb(221,10,30)" fg:x="1013" fg:w="13"/><text x="1.2934%" y="255.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (595 samples, 0.61%)</title><rect x="0.4501%" y="277" width="0.6128%" height="15" fill="rgb(210,229,1)" fg:x="437" fg:w="595"/><text x="0.7001%" y="287.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::clone::Clone&gt;::clone (619 samples, 0.64%)</title><rect x="0.4501%" y="293" width="0.6376%" height="15" fill="rgb(222,148,37)" fg:x="437" fg:w="619"/><text x="0.7001%" y="303.50"></text></g><g><title>[libc.so.6] (24 samples, 0.02%)</title><rect x="1.0629%" y="277" width="0.0247%" height="15" fill="rgb(234,67,33)" fg:x="1032" fg:w="24"/><text x="1.3129%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1,057 samples, 1.09%)</title><rect x="0.0124%" y="389" width="1.0887%" height="15" fill="rgb(247,98,35)" fg:x="12" fg:w="1057"/><text x="0.2624%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1,054 samples, 1.09%)</title><rect x="0.0154%" y="373" width="1.0856%" height="15" fill="rgb(247,138,52)" fg:x="15" fg:w="1054"/><text x="0.2654%" y="383.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (890 samples, 0.92%)</title><rect x="0.1844%" y="357" width="0.9167%" height="15" fill="rgb(213,79,30)" fg:x="179" fg:w="890"/><text x="0.4344%" y="367.50"></text></g><g><title>wfc::wfc::queueprop::QueueProp::find_minimal::{{closure}} (704 samples, 0.73%)</title><rect x="0.3759%" y="341" width="0.7251%" height="15" fill="rgb(246,177,23)" fg:x="365" fg:w="704"/><text x="0.6259%" y="351.50"></text></g><g><title>wfc::vec3d::Vec3D&lt;T&gt;::get (687 samples, 0.71%)</title><rect x="0.3934%" y="325" width="0.7076%" height="15" fill="rgb(230,62,27)" fg:x="382" fg:w="687"/><text x="0.6434%" y="335.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::clone::Clone&gt;::clone (632 samples, 0.65%)</title><rect x="0.4501%" y="309" width="0.6509%" height="15" fill="rgb(216,154,8)" fg:x="437" fg:w="632"/><text x="0.7001%" y="319.50"></text></g><g><title>[libc.so.6] (13 samples, 0.01%)</title><rect x="1.0877%" y="293" width="0.0134%" height="15" fill="rgb(244,35,45)" fg:x="1056" fg:w="13"/><text x="1.3377%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,075 samples, 1.11%)</title><rect x="0.0113%" y="421" width="1.1072%" height="15" fill="rgb(251,115,12)" fg:x="11" fg:w="1075"/><text x="0.2613%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (1,075 samples, 1.11%)</title><rect x="0.0113%" y="405" width="1.1072%" height="15" fill="rgb(240,54,50)" fg:x="11" fg:w="1075"/><text x="0.2613%" y="415.50"></text></g><g><title>core::ops::control_flow::ControlFlow&lt;B,C&gt;::break_value (17 samples, 0.02%)</title><rect x="1.1010%" y="389" width="0.0175%" height="15" fill="rgb(233,84,52)" fg:x="1069" fg:w="17"/><text x="1.3510%" y="399.50"></text></g><g><title>[libc.so.6] (12 samples, 0.01%)</title><rect x="1.1062%" y="373" width="0.0124%" height="15" fill="rgb(207,117,47)" fg:x="1074" fg:w="12"/><text x="1.3562%" y="383.50"></text></g><g><title>[libc.so.6] (16 samples, 0.02%)</title><rect x="1.1185%" y="421" width="0.0165%" height="15" fill="rgb(249,43,39)" fg:x="1086" fg:w="16"/><text x="1.3685%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (12 samples, 0.01%)</title><rect x="1.1350%" y="421" width="0.0124%" height="15" fill="rgb(209,38,44)" fg:x="1102" fg:w="12"/><text x="1.3850%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (12 samples, 0.01%)</title><rect x="1.1350%" y="405" width="0.0124%" height="15" fill="rgb(236,212,23)" fg:x="1102" fg:w="12"/><text x="1.3850%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (10 samples, 0.01%)</title><rect x="1.1371%" y="389" width="0.0103%" height="15" fill="rgb(242,79,21)" fg:x="1104" fg:w="10"/><text x="1.3871%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,126 samples, 1.16%)</title><rect x="0.0093%" y="453" width="1.1597%" height="15" fill="rgb(211,96,35)" fg:x="9" fg:w="1126"/><text x="0.2593%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1,126 samples, 1.16%)</title><rect x="0.0093%" y="437" width="1.1597%" height="15" fill="rgb(253,215,40)" fg:x="9" fg:w="1126"/><text x="0.2593%" y="447.50"></text></g><g><title>core::ptr::write (10 samples, 0.01%)</title><rect x="1.1587%" y="421" width="0.0103%" height="15" fill="rgb(211,81,21)" fg:x="1125" fg:w="10"/><text x="1.4087%" y="431.50"></text></g><g><title>[libc.so.6] (10 samples, 0.01%)</title><rect x="1.1587%" y="405" width="0.0103%" height="15" fill="rgb(208,190,38)" fg:x="1125" fg:w="10"/><text x="1.4087%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (17 samples, 0.02%)</title><rect x="1.1865%" y="373" width="0.0175%" height="15" fill="rgb(235,213,38)" fg:x="1152" fg:w="17"/><text x="1.4365%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,usize,usize,std::collections::hash::set::HashSet&lt;u8&gt;)&gt; (13 samples, 0.01%)</title><rect x="1.1906%" y="357" width="0.0134%" height="15" fill="rgb(237,122,38)" fg:x="1156" fg:w="13"/><text x="1.4406%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;u8&gt;&gt; (13 samples, 0.01%)</title><rect x="1.1906%" y="341" width="0.0134%" height="15" fill="rgb(244,218,35)" fg:x="1156" fg:w="13"/><text x="1.4406%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;u8,std::collections::hash::map::RandomState&gt;&gt; (13 samples, 0.01%)</title><rect x="1.1906%" y="325" width="0.0134%" height="15" fill="rgb(240,68,47)" fg:x="1156" fg:w="13"/><text x="1.4406%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u8,(),std::collections::hash::map::RandomState&gt;&gt; (13 samples, 0.01%)</title><rect x="1.1906%" y="309" width="0.0134%" height="15" fill="rgb(210,16,53)" fg:x="1156" fg:w="13"/><text x="1.4406%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u8,())&gt;&gt; (13 samples, 0.01%)</title><rect x="1.1906%" y="293" width="0.0134%" height="15" fill="rgb(235,124,12)" fg:x="1156" fg:w="13"/><text x="1.4406%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="1.1906%" y="277" width="0.0134%" height="15" fill="rgb(224,169,11)" fg:x="1156" fg:w="13"/><text x="1.4406%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::free_buckets (11 samples, 0.01%)</title><rect x="1.1927%" y="261" width="0.0113%" height="15" fill="rgb(250,166,2)" fg:x="1158" fg:w="11"/><text x="1.4427%" y="271.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (10 samples, 0.01%)</title><rect x="1.2288%" y="245" width="0.0103%" height="15" fill="rgb(242,216,29)" fg:x="1193" fg:w="10"/><text x="1.4788%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (10 samples, 0.01%)</title><rect x="1.2288%" y="229" width="0.0103%" height="15" fill="rgb(230,116,27)" fg:x="1193" fg:w="10"/><text x="1.4788%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (16 samples, 0.02%)</title><rect x="1.2236%" y="261" width="0.0165%" height="15" fill="rgb(228,99,48)" fg:x="1188" fg:w="16"/><text x="1.4736%" y="271.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (31 samples, 0.03%)</title><rect x="1.2174%" y="309" width="0.0319%" height="15" fill="rgb(253,11,6)" fg:x="1182" fg:w="31"/><text x="1.4674%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (31 samples, 0.03%)</title><rect x="1.2174%" y="293" width="0.0319%" height="15" fill="rgb(247,143,39)" fg:x="1182" fg:w="31"/><text x="1.4674%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (26 samples, 0.03%)</title><rect x="1.2226%" y="277" width="0.0268%" height="15" fill="rgb(236,97,10)" fg:x="1187" fg:w="26"/><text x="1.4726%" y="287.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::clone::Clone&gt;::clone (34 samples, 0.04%)</title><rect x="1.2174%" y="325" width="0.0350%" height="15" fill="rgb(233,208,19)" fg:x="1182" fg:w="34"/><text x="1.4674%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1,211 samples, 1.25%)</title><rect x="0.0093%" y="517" width="1.2473%" height="15" fill="rgb(216,164,2)" fg:x="9" fg:w="1211"/><text x="0.2593%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1,211 samples, 1.25%)</title><rect x="0.0093%" y="501" width="1.2473%" height="15" fill="rgb(220,129,5)" fg:x="9" fg:w="1211"/><text x="0.2593%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,211 samples, 1.25%)</title><rect x="0.0093%" y="485" width="1.2473%" height="15" fill="rgb(242,17,10)" fg:x="9" fg:w="1211"/><text x="0.2593%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1,211 samples, 1.25%)</title><rect x="0.0093%" y="469" width="1.2473%" height="15" fill="rgb(242,107,0)" fg:x="9" fg:w="1211"/><text x="0.2593%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (85 samples, 0.09%)</title><rect x="1.1690%" y="453" width="0.0875%" height="15" fill="rgb(251,28,31)" fg:x="1135" fg:w="85"/><text x="1.4190%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (85 samples, 0.09%)</title><rect x="1.1690%" y="437" width="0.0875%" height="15" fill="rgb(233,223,10)" fg:x="1135" fg:w="85"/><text x="1.4190%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (85 samples, 0.09%)</title><rect x="1.1690%" y="421" width="0.0875%" height="15" fill="rgb(215,21,27)" fg:x="1135" fg:w="85"/><text x="1.4190%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (85 samples, 0.09%)</title><rect x="1.1690%" y="405" width="0.0875%" height="15" fill="rgb(232,23,21)" fg:x="1135" fg:w="85"/><text x="1.4190%" y="415.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (72 samples, 0.07%)</title><rect x="1.1824%" y="389" width="0.0742%" height="15" fill="rgb(244,5,23)" fg:x="1148" fg:w="72"/><text x="1.4324%" y="399.50"></text></g><g><title>wfc::wfc::queueprop::QueueProp::find_minimal::{{closure}} (51 samples, 0.05%)</title><rect x="1.2040%" y="373" width="0.0525%" height="15" fill="rgb(226,81,46)" fg:x="1169" fg:w="51"/><text x="1.4540%" y="383.50"></text></g><g><title>wfc::vec3d::Vec3D&lt;T&gt;::get (46 samples, 0.05%)</title><rect x="1.2092%" y="357" width="0.0474%" height="15" fill="rgb(247,70,30)" fg:x="1174" fg:w="46"/><text x="1.4592%" y="367.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::clone::Clone&gt;::clone (38 samples, 0.04%)</title><rect x="1.2174%" y="341" width="0.0391%" height="15" fill="rgb(212,68,19)" fg:x="1182" fg:w="38"/><text x="1.4674%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (39 samples, 0.04%)</title><rect x="1.2638%" y="341" width="0.0402%" height="15" fill="rgb(240,187,13)" fg:x="1227" fg:w="39"/><text x="1.5138%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (36 samples, 0.04%)</title><rect x="1.2669%" y="325" width="0.0371%" height="15" fill="rgb(223,113,26)" fg:x="1230" fg:w="36"/><text x="1.5169%" y="335.50"></text></g><g><title>free (29 samples, 0.03%)</title><rect x="1.2741%" y="309" width="0.0299%" height="15" fill="rgb(206,192,2)" fg:x="1237" fg:w="29"/><text x="1.5241%" y="319.50"></text></g><g><title>[libc.so.6] (16 samples, 0.02%)</title><rect x="1.2875%" y="293" width="0.0165%" height="15" fill="rgb(241,108,4)" fg:x="1250" fg:w="16"/><text x="1.5375%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (12 samples, 0.01%)</title><rect x="1.3081%" y="325" width="0.0124%" height="15" fill="rgb(247,173,49)" fg:x="1270" fg:w="12"/><text x="1.5581%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (67 samples, 0.07%)</title><rect x="1.2617%" y="357" width="0.0690%" height="15" fill="rgb(224,114,35)" fg:x="1225" fg:w="67"/><text x="1.5117%" y="367.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (25 samples, 0.03%)</title><rect x="1.3050%" y="341" width="0.0257%" height="15" fill="rgb(245,159,27)" fg:x="1267" fg:w="25"/><text x="1.5550%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (10 samples, 0.01%)</title><rect x="1.3204%" y="325" width="0.0103%" height="15" fill="rgb(245,172,44)" fg:x="1282" fg:w="10"/><text x="1.5704%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::free_buckets (78 samples, 0.08%)</title><rect x="1.2617%" y="373" width="0.0803%" height="15" fill="rgb(236,23,11)" fg:x="1225" fg:w="78"/><text x="1.5117%" y="383.50"></text></g><g><title>hashbrown::raw::TableLayout::new (11 samples, 0.01%)</title><rect x="1.3307%" y="357" width="0.0113%" height="15" fill="rgb(205,117,38)" fg:x="1292" fg:w="11"/><text x="1.5807%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (84 samples, 0.09%)</title><rect x="1.2566%" y="501" width="0.0865%" height="15" fill="rgb(237,72,25)" fg:x="1220" fg:w="84"/><text x="1.5066%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(usize,usize,usize,std::collections::hash::set::HashSet&lt;u8&gt;)]&gt; (84 samples, 0.09%)</title><rect x="1.2566%" y="485" width="0.0865%" height="15" fill="rgb(244,70,9)" fg:x="1220" fg:w="84"/><text x="1.5066%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,usize,usize,std::collections::hash::set::HashSet&lt;u8&gt;)&gt; (82 samples, 0.08%)</title><rect x="1.2586%" y="469" width="0.0845%" height="15" fill="rgb(217,125,39)" fg:x="1222" fg:w="82"/><text x="1.5086%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;u8&gt;&gt; (82 samples, 0.08%)</title><rect x="1.2586%" y="453" width="0.0845%" height="15" fill="rgb(235,36,10)" fg:x="1222" fg:w="82"/><text x="1.5086%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;u8,std::collections::hash::map::RandomState&gt;&gt; (81 samples, 0.08%)</title><rect x="1.2597%" y="437" width="0.0834%" height="15" fill="rgb(251,123,47)" fg:x="1223" fg:w="81"/><text x="1.5097%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u8,(),std::collections::hash::map::RandomState&gt;&gt; (81 samples, 0.08%)</title><rect x="1.2597%" y="421" width="0.0834%" height="15" fill="rgb(221,13,13)" fg:x="1223" fg:w="81"/><text x="1.5097%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u8,())&gt;&gt; (81 samples, 0.08%)</title><rect x="1.2597%" y="405" width="0.0834%" height="15" fill="rgb(238,131,9)" fg:x="1223" fg:w="81"/><text x="1.5097%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (81 samples, 0.08%)</title><rect x="1.2597%" y="389" width="0.0834%" height="15" fill="rgb(211,50,8)" fg:x="1223" fg:w="81"/><text x="1.5097%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(usize,usize,usize,std::collections::hash::set::HashSet&lt;u8&gt;)&gt;&gt; (88 samples, 0.09%)</title><rect x="1.2566%" y="517" width="0.0906%" height="15" fill="rgb(245,182,24)" fg:x="1220" fg:w="88"/><text x="1.5066%" y="527.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (12 samples, 0.01%)</title><rect x="1.3657%" y="437" width="0.0124%" height="15" fill="rgb(242,14,37)" fg:x="1326" fg:w="12"/><text x="1.6157%" y="447.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (12 samples, 0.01%)</title><rect x="1.3657%" y="421" width="0.0124%" height="15" fill="rgb(246,228,12)" fg:x="1326" fg:w="12"/><text x="1.6157%" y="431.50"></text></g><g><title>core::slice::sort::partition (61 samples, 0.06%)</title><rect x="1.3513%" y="469" width="0.0628%" height="15" fill="rgb(213,55,15)" fg:x="1312" fg:w="61"/><text x="1.6013%" y="479.50"></text></g><g><title>core::slice::sort::partition_in_blocks (53 samples, 0.05%)</title><rect x="1.3596%" y="453" width="0.0546%" height="15" fill="rgb(209,9,3)" fg:x="1320" fg:w="53"/><text x="1.6096%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by::{{closure}} (31 samples, 0.03%)</title><rect x="1.3822%" y="437" width="0.0319%" height="15" fill="rgb(230,59,30)" fg:x="1342" fg:w="31"/><text x="1.6322%" y="447.50"></text></g><g><title>wfc::wfc::queueprop::QueueProp::find_minimal::{{closure}} (27 samples, 0.03%)</title><rect x="1.3863%" y="421" width="0.0278%" height="15" fill="rgb(209,121,21)" fg:x="1346" fg:w="27"/><text x="1.6363%" y="431.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::len (11 samples, 0.01%)</title><rect x="1.4028%" y="405" width="0.0113%" height="15" fill="rgb(220,109,13)" fg:x="1362" fg:w="11"/><text x="1.6528%" y="415.50"></text></g><g><title>core::slice::sort::partition_equal (25 samples, 0.03%)</title><rect x="1.4142%" y="469" width="0.0257%" height="15" fill="rgb(232,18,1)" fg:x="1373" fg:w="25"/><text x="1.6642%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by::{{closure}} (19 samples, 0.02%)</title><rect x="1.4203%" y="453" width="0.0196%" height="15" fill="rgb(215,41,42)" fg:x="1379" fg:w="19"/><text x="1.6703%" y="463.50"></text></g><g><title>wfc::wfc::queueprop::QueueProp::find_minimal::{{closure}} (15 samples, 0.02%)</title><rect x="1.4245%" y="437" width="0.0154%" height="15" fill="rgb(224,123,36)" fg:x="1383" fg:w="15"/><text x="1.6745%" y="447.50"></text></g><g><title>core::slice::sort::partition (20 samples, 0.02%)</title><rect x="1.4399%" y="453" width="0.0206%" height="15" fill="rgb(240,125,3)" fg:x="1398" fg:w="20"/><text x="1.6899%" y="463.50"></text></g><g><title>core::slice::sort::partition_in_blocks (15 samples, 0.02%)</title><rect x="1.4451%" y="437" width="0.0154%" height="15" fill="rgb(205,98,50)" fg:x="1403" fg:w="15"/><text x="1.6951%" y="447.50"></text></g><g><title>wfc::wfc::queueprop::QueueProp::find_minimal (1,428 samples, 1.47%)</title><rect x="0.0093%" y="533" width="1.4708%" height="15" fill="rgb(205,185,37)" fg:x="9" fg:w="1428"/><text x="0.2593%" y="543.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by (129 samples, 0.13%)</title><rect x="1.3472%" y="517" width="0.1329%" height="15" fill="rgb(238,207,15)" fg:x="1308" fg:w="129"/><text x="1.5972%" y="527.50"></text></g><g><title>core::slice::sort::quicksort (129 samples, 0.13%)</title><rect x="1.3472%" y="501" width="0.1329%" height="15" fill="rgb(213,199,42)" fg:x="1308" fg:w="129"/><text x="1.5972%" y="511.50"></text></g><g><title>core::slice::sort::recurse (129 samples, 0.13%)</title><rect x="1.3472%" y="485" width="0.1329%" height="15" fill="rgb(235,201,11)" fg:x="1308" fg:w="129"/><text x="1.5972%" y="495.50"></text></g><g><title>core::slice::sort::recurse (39 samples, 0.04%)</title><rect x="1.4399%" y="469" width="0.0402%" height="15" fill="rgb(207,46,11)" fg:x="1398" fg:w="39"/><text x="1.6899%" y="479.50"></text></g><g><title>core::slice::sort::recurse (18 samples, 0.02%)</title><rect x="1.4615%" y="453" width="0.0185%" height="15" fill="rgb(241,35,35)" fg:x="1419" fg:w="18"/><text x="1.7115%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="1.5182%" y="389" width="0.0247%" height="15" fill="rgb(243,32,47)" fg:x="1474" fg:w="24"/><text x="1.7682%" y="399.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (22 samples, 0.02%)</title><rect x="1.5202%" y="373" width="0.0227%" height="15" fill="rgb(247,202,23)" fg:x="1476" fg:w="22"/><text x="1.7702%" y="383.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.04%)</title><rect x="1.5099%" y="453" width="0.0381%" height="15" fill="rgb(219,102,11)" fg:x="1466" fg:w="37"/><text x="1.7599%" y="463.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.04%)</title><rect x="1.5099%" y="437" width="0.0381%" height="15" fill="rgb(243,110,44)" fg:x="1466" fg:w="37"/><text x="1.7599%" y="447.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.04%)</title><rect x="1.5099%" y="421" width="0.0381%" height="15" fill="rgb(222,74,54)" fg:x="1466" fg:w="37"/><text x="1.7599%" y="431.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.04%)</title><rect x="1.5099%" y="405" width="0.0381%" height="15" fill="rgb(216,99,12)" fg:x="1466" fg:w="37"/><text x="1.7599%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (14 samples, 0.01%)</title><rect x="1.5759%" y="277" width="0.0144%" height="15" fill="rgb(226,22,26)" fg:x="1530" fg:w="14"/><text x="1.8259%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (47 samples, 0.05%)</title><rect x="1.5707%" y="325" width="0.0484%" height="15" fill="rgb(217,163,10)" fg:x="1525" fg:w="47"/><text x="1.8207%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (47 samples, 0.05%)</title><rect x="1.5707%" y="309" width="0.0484%" height="15" fill="rgb(213,25,53)" fg:x="1525" fg:w="47"/><text x="1.8207%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (47 samples, 0.05%)</title><rect x="1.5707%" y="293" width="0.0484%" height="15" fill="rgb(252,105,26)" fg:x="1525" fg:w="47"/><text x="1.8207%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (28 samples, 0.03%)</title><rect x="1.5903%" y="277" width="0.0288%" height="15" fill="rgb(220,39,43)" fg:x="1544" fg:w="28"/><text x="1.8403%" y="287.50"></text></g><g><title>[libc.so.6] (11 samples, 0.01%)</title><rect x="1.6191%" y="309" width="0.0113%" height="15" fill="rgb(229,68,48)" fg:x="1572" fg:w="11"/><text x="1.8691%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (25 samples, 0.03%)</title><rect x="1.6191%" y="325" width="0.0257%" height="15" fill="rgb(252,8,32)" fg:x="1572" fg:w="25"/><text x="1.8691%" y="335.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (14 samples, 0.01%)</title><rect x="1.6304%" y="309" width="0.0144%" height="15" fill="rgb(223,20,43)" fg:x="1583" fg:w="14"/><text x="1.8804%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (84 samples, 0.09%)</title><rect x="1.5635%" y="357" width="0.0865%" height="15" fill="rgb(229,81,49)" fg:x="1518" fg:w="84"/><text x="1.8135%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (78 samples, 0.08%)</title><rect x="1.5697%" y="341" width="0.0803%" height="15" fill="rgb(236,28,36)" fg:x="1524" fg:w="78"/><text x="1.8197%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="1.6799%" y="309" width="0.0247%" height="15" fill="rgb(249,185,26)" fg:x="1631" fg:w="24"/><text x="1.9299%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (11 samples, 0.01%)</title><rect x="1.6933%" y="293" width="0.0113%" height="15" fill="rgb(249,174,33)" fg:x="1644" fg:w="11"/><text x="1.9433%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (20 samples, 0.02%)</title><rect x="1.7046%" y="309" width="0.0206%" height="15" fill="rgb(233,201,37)" fg:x="1655" fg:w="20"/><text x="1.9546%" y="319.50"></text></g><g><title>hashbrown::raw::h2 (13 samples, 0.01%)</title><rect x="1.7252%" y="309" width="0.0134%" height="15" fill="rgb(221,78,26)" fg:x="1675" fg:w="13"/><text x="1.9752%" y="319.50"></text></g><g><title>core::cmp::Ord::min (11 samples, 0.01%)</title><rect x="1.7273%" y="293" width="0.0113%" height="15" fill="rgb(250,127,30)" fg:x="1677" fg:w="11"/><text x="1.9773%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (12 samples, 0.01%)</title><rect x="1.7386%" y="309" width="0.0124%" height="15" fill="rgb(230,49,44)" fg:x="1688" fg:w="12"/><text x="1.9886%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (56 samples, 0.06%)</title><rect x="1.7510%" y="309" width="0.0577%" height="15" fill="rgb(229,67,23)" fg:x="1700" fg:w="56"/><text x="2.0010%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (23 samples, 0.02%)</title><rect x="1.7849%" y="293" width="0.0237%" height="15" fill="rgb(249,83,47)" fg:x="1733" fg:w="23"/><text x="2.0349%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (20 samples, 0.02%)</title><rect x="1.7880%" y="277" width="0.0206%" height="15" fill="rgb(215,43,3)" fg:x="1736" fg:w="20"/><text x="2.0380%" y="287.50"></text></g><g><title>core::cmp::PartialEq::ne (310 samples, 0.32%)</title><rect x="1.4945%" y="517" width="0.3193%" height="15" fill="rgb(238,154,13)" fg:x="1451" fg:w="310"/><text x="1.7445%" y="527.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq (310 samples, 0.32%)</title><rect x="1.4945%" y="501" width="0.3193%" height="15" fill="rgb(219,56,2)" fg:x="1451" fg:w="310"/><text x="1.7445%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (308 samples, 0.32%)</title><rect x="1.4965%" y="485" width="0.3172%" height="15" fill="rgb(233,0,4)" fg:x="1453" fg:w="308"/><text x="1.7465%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (308 samples, 0.32%)</title><rect x="1.4965%" y="469" width="0.3172%" height="15" fill="rgb(235,30,7)" fg:x="1453" fg:w="308"/><text x="1.7465%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (258 samples, 0.27%)</title><rect x="1.5480%" y="453" width="0.2657%" height="15" fill="rgb(250,79,13)" fg:x="1503" fg:w="258"/><text x="1.7980%" y="463.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq::{{closure}} (254 samples, 0.26%)</title><rect x="1.5522%" y="437" width="0.2616%" height="15" fill="rgb(211,146,34)" fg:x="1507" fg:w="254"/><text x="1.8022%" y="447.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (251 samples, 0.26%)</title><rect x="1.5553%" y="421" width="0.2585%" height="15" fill="rgb(228,22,38)" fg:x="1510" fg:w="251"/><text x="1.8053%" y="431.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (249 samples, 0.26%)</title><rect x="1.5573%" y="405" width="0.2565%" height="15" fill="rgb(235,168,5)" fg:x="1512" fg:w="249"/><text x="1.8073%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (247 samples, 0.25%)</title><rect x="1.5594%" y="389" width="0.2544%" height="15" fill="rgb(221,155,16)" fg:x="1514" fg:w="247"/><text x="1.8094%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (245 samples, 0.25%)</title><rect x="1.5614%" y="373" width="0.2523%" height="15" fill="rgb(215,215,53)" fg:x="1516" fg:w="245"/><text x="1.8114%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (159 samples, 0.16%)</title><rect x="1.6500%" y="357" width="0.1638%" height="15" fill="rgb(223,4,10)" fg:x="1602" fg:w="159"/><text x="1.9000%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (156 samples, 0.16%)</title><rect x="1.6531%" y="341" width="0.1607%" height="15" fill="rgb(234,103,6)" fg:x="1605" fg:w="156"/><text x="1.9031%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (154 samples, 0.16%)</title><rect x="1.6552%" y="325" width="0.1586%" height="15" fill="rgb(227,97,0)" fg:x="1607" fg:w="154"/><text x="1.9052%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.01%)</title><rect x="1.8179%" y="453" width="0.0113%" height="15" fill="rgb(234,150,53)" fg:x="1765" fg:w="11"/><text x="2.0679%" y="463.50"></text></g><g><title>wfc::vec3d::Vec3D&lt;T&gt;::get (16 samples, 0.02%)</title><rect x="1.8169%" y="517" width="0.0165%" height="15" fill="rgb(228,201,54)" fg:x="1764" fg:w="16"/><text x="2.0669%" y="527.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::clone::Clone&gt;::clone (15 samples, 0.02%)</title><rect x="1.8179%" y="501" width="0.0154%" height="15" fill="rgb(222,22,37)" fg:x="1765" fg:w="15"/><text x="2.0679%" y="511.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::clone::Clone&gt;::clone (15 samples, 0.02%)</title><rect x="1.8179%" y="485" width="0.0154%" height="15" fill="rgb(237,53,32)" fg:x="1765" fg:w="15"/><text x="2.0679%" y="495.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (15 samples, 0.02%)</title><rect x="1.8179%" y="469" width="0.0154%" height="15" fill="rgb(233,25,53)" fg:x="1765" fg:w="15"/><text x="2.0679%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::guaranteed_eq (20 samples, 0.02%)</title><rect x="2.0538%" y="405" width="0.0206%" height="15" fill="rgb(210,40,34)" fg:x="1994" fg:w="20"/><text x="2.3038%" y="415.50"></text></g><g><title>core::ptr::invalid (21 samples, 0.02%)</title><rect x="2.0816%" y="389" width="0.0216%" height="15" fill="rgb(241,220,44)" fg:x="2021" fg:w="21"/><text x="2.3316%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (149 samples, 0.15%)</title><rect x="1.9580%" y="421" width="0.1535%" height="15" fill="rgb(235,28,35)" fg:x="1901" fg:w="149"/><text x="2.2080%" y="431.50"></text></g><g><title>core::ptr::null (36 samples, 0.04%)</title><rect x="2.0744%" y="405" width="0.0371%" height="15" fill="rgb(210,56,17)" fg:x="2014" fg:w="36"/><text x="2.3244%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (101 samples, 0.10%)</title><rect x="2.1938%" y="405" width="0.1040%" height="15" fill="rgb(224,130,29)" fg:x="2130" fg:w="101"/><text x="2.4438%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::guaranteed_eq (46 samples, 0.05%)</title><rect x="2.2505%" y="389" width="0.0474%" height="15" fill="rgb(235,212,8)" fg:x="2185" fg:w="46"/><text x="2.5005%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (200 samples, 0.21%)</title><rect x="2.1114%" y="421" width="0.2060%" height="15" fill="rgb(223,33,50)" fg:x="2050" fg:w="200"/><text x="2.3614%" y="431.50"></text></g><g><title>core::ptr::null_mut (19 samples, 0.02%)</title><rect x="2.2979%" y="405" width="0.0196%" height="15" fill="rgb(219,149,13)" fg:x="2231" fg:w="19"/><text x="2.5479%" y="415.50"></text></g><g><title>core::ptr::invalid_mut (10 samples, 0.01%)</title><rect x="2.3071%" y="389" width="0.0103%" height="15" fill="rgb(250,156,29)" fg:x="2240" fg:w="10"/><text x="2.5571%" y="399.50"></text></g><g><title>core::ops::function::FnOnce::call_once (409 samples, 0.42%)</title><rect x="1.9024%" y="453" width="0.4213%" height="15" fill="rgb(216,193,19)" fg:x="1847" fg:w="409"/><text x="2.1524%" y="463.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (409 samples, 0.42%)</title><rect x="1.9024%" y="437" width="0.4213%" height="15" fill="rgb(216,135,14)" fg:x="1847" fg:w="409"/><text x="2.1524%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (441 samples, 0.45%)</title><rect x="1.8735%" y="501" width="0.4542%" height="15" fill="rgb(241,47,5)" fg:x="1819" fg:w="441"/><text x="2.1235%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (432 samples, 0.44%)</title><rect x="1.8828%" y="485" width="0.4449%" height="15" fill="rgb(233,42,35)" fg:x="1828" fg:w="432"/><text x="2.1328%" y="495.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (422 samples, 0.43%)</title><rect x="1.8931%" y="469" width="0.4346%" height="15" fill="rgb(231,13,6)" fg:x="1838" fg:w="422"/><text x="2.1431%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 0.03%)</title><rect x="2.3525%" y="325" width="0.0309%" height="15" fill="rgb(207,181,40)" fg:x="2284" fg:w="30"/><text x="2.6025%" y="335.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (26 samples, 0.03%)</title><rect x="2.3566%" y="309" width="0.0268%" height="15" fill="rgb(254,173,49)" fg:x="2288" fg:w="26"/><text x="2.6066%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.04%)</title><rect x="2.3452%" y="357" width="0.0402%" height="15" fill="rgb(221,1,38)" fg:x="2277" fg:w="39"/><text x="2.5952%" y="367.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.04%)</title><rect x="2.3452%" y="341" width="0.0402%" height="15" fill="rgb(206,124,46)" fg:x="2277" fg:w="39"/><text x="2.5952%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (12 samples, 0.01%)</title><rect x="2.4379%" y="181" width="0.0124%" height="15" fill="rgb(249,21,11)" fg:x="2367" fg:w="12"/><text x="2.6879%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (53 samples, 0.05%)</title><rect x="2.4287%" y="229" width="0.0546%" height="15" fill="rgb(222,201,40)" fg:x="2358" fg:w="53"/><text x="2.6787%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (52 samples, 0.05%)</title><rect x="2.4297%" y="213" width="0.0536%" height="15" fill="rgb(235,61,29)" fg:x="2359" fg:w="52"/><text x="2.6797%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (52 samples, 0.05%)</title><rect x="2.4297%" y="197" width="0.0536%" height="15" fill="rgb(219,207,3)" fg:x="2359" fg:w="52"/><text x="2.6797%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (32 samples, 0.03%)</title><rect x="2.4503%" y="181" width="0.0330%" height="15" fill="rgb(222,56,46)" fg:x="2379" fg:w="32"/><text x="2.7003%" y="191.50"></text></g><g><title>[libc.so.6] (16 samples, 0.02%)</title><rect x="2.4925%" y="197" width="0.0165%" height="15" fill="rgb(239,76,54)" fg:x="2420" fg:w="16"/><text x="2.7425%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (28 samples, 0.03%)</title><rect x="2.4833%" y="229" width="0.0288%" height="15" fill="rgb(231,124,27)" fg:x="2411" fg:w="28"/><text x="2.7333%" y="239.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (19 samples, 0.02%)</title><rect x="2.4925%" y="213" width="0.0196%" height="15" fill="rgb(249,195,6)" fg:x="2420" fg:w="19"/><text x="2.7425%" y="223.50"></text></g><g><title>hashbrown::map::make_insert_hash (98 samples, 0.10%)</title><rect x="2.4204%" y="261" width="0.1009%" height="15" fill="rgb(237,174,47)" fg:x="2350" fg:w="98"/><text x="2.6704%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (96 samples, 0.10%)</title><rect x="2.4225%" y="245" width="0.0989%" height="15" fill="rgb(206,201,31)" fg:x="2352" fg:w="96"/><text x="2.6725%" y="255.50"></text></g><g><title>hashbrown::raw::h2 (19 samples, 0.02%)</title><rect x="2.5636%" y="213" width="0.0196%" height="15" fill="rgb(231,57,52)" fg:x="2489" fg:w="19"/><text x="2.8136%" y="223.50"></text></g><g><title>core::cmp::Ord::min (19 samples, 0.02%)</title><rect x="2.5636%" y="197" width="0.0196%" height="15" fill="rgb(248,177,22)" fg:x="2489" fg:w="19"/><text x="2.8136%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (14 samples, 0.01%)</title><rect x="2.5832%" y="213" width="0.0144%" height="15" fill="rgb(215,211,37)" fg:x="2508" fg:w="14"/><text x="2.8332%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (14 samples, 0.01%)</title><rect x="2.6213%" y="197" width="0.0144%" height="15" fill="rgb(241,128,51)" fg:x="2545" fg:w="14"/><text x="2.8713%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (58 samples, 0.06%)</title><rect x="2.5976%" y="213" width="0.0597%" height="15" fill="rgb(227,165,31)" fg:x="2522" fg:w="58"/><text x="2.8476%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (21 samples, 0.02%)</title><rect x="2.6357%" y="197" width="0.0216%" height="15" fill="rgb(228,167,24)" fg:x="2559" fg:w="21"/><text x="2.8857%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (21 samples, 0.02%)</title><rect x="2.6357%" y="181" width="0.0216%" height="15" fill="rgb(228,143,12)" fg:x="2559" fg:w="21"/><text x="2.8857%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (181 samples, 0.19%)</title><rect x="2.5214%" y="261" width="0.1864%" height="15" fill="rgb(249,149,8)" fg:x="2448" fg:w="181"/><text x="2.7714%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (181 samples, 0.19%)</title><rect x="2.5214%" y="245" width="0.1864%" height="15" fill="rgb(243,35,44)" fg:x="2448" fg:w="181"/><text x="2.7714%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (179 samples, 0.18%)</title><rect x="2.5234%" y="229" width="0.1844%" height="15" fill="rgb(246,89,9)" fg:x="2450" fg:w="179"/><text x="2.7734%" y="239.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (49 samples, 0.05%)</title><rect x="2.6573%" y="213" width="0.0505%" height="15" fill="rgb(233,213,13)" fg:x="2580" fg:w="49"/><text x="2.9073%" y="223.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (48 samples, 0.05%)</title><rect x="2.6584%" y="197" width="0.0494%" height="15" fill="rgb(233,141,41)" fg:x="2581" fg:w="48"/><text x="2.9084%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (22 samples, 0.02%)</title><rect x="2.6851%" y="181" width="0.0227%" height="15" fill="rgb(239,167,4)" fg:x="2607" fg:w="22"/><text x="2.9351%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (22 samples, 0.02%)</title><rect x="2.6851%" y="165" width="0.0227%" height="15" fill="rgb(209,217,16)" fg:x="2607" fg:w="22"/><text x="2.9351%" y="175.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (22 samples, 0.02%)</title><rect x="2.7356%" y="181" width="0.0227%" height="15" fill="rgb(219,88,35)" fg:x="2656" fg:w="22"/><text x="2.9856%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (21 samples, 0.02%)</title><rect x="2.7366%" y="165" width="0.0216%" height="15" fill="rgb(220,193,23)" fg:x="2657" fg:w="21"/><text x="2.9866%" y="175.50"></text></g><g><title>core::mem::replace (16 samples, 0.02%)</title><rect x="2.7418%" y="149" width="0.0165%" height="15" fill="rgb(230,90,52)" fg:x="2662" fg:w="16"/><text x="2.9918%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (12 samples, 0.01%)</title><rect x="2.7850%" y="69" width="0.0124%" height="15" fill="rgb(252,106,19)" fg:x="2704" fg:w="12"/><text x="3.0350%" y="79.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (48 samples, 0.05%)</title><rect x="2.7799%" y="117" width="0.0494%" height="15" fill="rgb(206,74,20)" fg:x="2699" fg:w="48"/><text x="3.0299%" y="127.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (48 samples, 0.05%)</title><rect x="2.7799%" y="101" width="0.0494%" height="15" fill="rgb(230,138,44)" fg:x="2699" fg:w="48"/><text x="3.0299%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (48 samples, 0.05%)</title><rect x="2.7799%" y="85" width="0.0494%" height="15" fill="rgb(235,182,43)" fg:x="2699" fg:w="48"/><text x="3.0299%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (31 samples, 0.03%)</title><rect x="2.7974%" y="69" width="0.0319%" height="15" fill="rgb(242,16,51)" fg:x="2716" fg:w="31"/><text x="3.0474%" y="79.50"></text></g><g><title>[libc.so.6] (17 samples, 0.02%)</title><rect x="2.8386%" y="85" width="0.0175%" height="15" fill="rgb(248,9,4)" fg:x="2756" fg:w="17"/><text x="3.0886%" y="95.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (27 samples, 0.03%)</title><rect x="2.8293%" y="117" width="0.0278%" height="15" fill="rgb(210,31,22)" fg:x="2747" fg:w="27"/><text x="3.0793%" y="127.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (18 samples, 0.02%)</title><rect x="2.8386%" y="101" width="0.0185%" height="15" fill="rgb(239,54,39)" fg:x="2756" fg:w="18"/><text x="3.0886%" y="111.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (95 samples, 0.10%)</title><rect x="2.7747%" y="165" width="0.0978%" height="15" fill="rgb(230,99,41)" fg:x="2694" fg:w="95"/><text x="3.0247%" y="175.50"></text></g><g><title>hashbrown::map::make_hash (95 samples, 0.10%)</title><rect x="2.7747%" y="149" width="0.0978%" height="15" fill="rgb(253,106,12)" fg:x="2694" fg:w="95"/><text x="3.0247%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (92 samples, 0.09%)</title><rect x="2.7778%" y="133" width="0.0948%" height="15" fill="rgb(213,46,41)" fg:x="2697" fg:w="92"/><text x="3.0278%" y="143.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (15 samples, 0.02%)</title><rect x="2.8571%" y="117" width="0.0154%" height="15" fill="rgb(215,133,35)" fg:x="2774" fg:w="15"/><text x="3.1071%" y="127.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (13 samples, 0.01%)</title><rect x="2.8592%" y="101" width="0.0134%" height="15" fill="rgb(213,28,5)" fg:x="2776" fg:w="13"/><text x="3.1092%" y="111.50"></text></g><g><title>core::hash::Hasher::write_u8 (13 samples, 0.01%)</title><rect x="2.8592%" y="85" width="0.0134%" height="15" fill="rgb(215,77,49)" fg:x="2776" fg:w="13"/><text x="3.1092%" y="95.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (12 samples, 0.01%)</title><rect x="2.8602%" y="69" width="0.0124%" height="15" fill="rgb(248,100,22)" fg:x="2777" fg:w="12"/><text x="3.1102%" y="79.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (11 samples, 0.01%)</title><rect x="2.8613%" y="53" width="0.0113%" height="15" fill="rgb(208,67,9)" fg:x="2778" fg:w="11"/><text x="3.1113%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (10 samples, 0.01%)</title><rect x="2.8623%" y="37" width="0.0103%" height="15" fill="rgb(219,133,21)" fg:x="2779" fg:w="10"/><text x="3.1123%" y="47.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (126 samples, 0.13%)</title><rect x="2.7624%" y="181" width="0.1298%" height="15" fill="rgb(246,46,29)" fg:x="2682" fg:w="126"/><text x="3.0124%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket (10 samples, 0.01%)</title><rect x="2.8819%" y="165" width="0.0103%" height="15" fill="rgb(246,185,52)" fg:x="2798" fg:w="10"/><text x="3.1319%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (19 samples, 0.02%)</title><rect x="2.9375%" y="149" width="0.0196%" height="15" fill="rgb(252,136,11)" fg:x="2852" fg:w="19"/><text x="3.1875%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (54 samples, 0.06%)</title><rect x="2.9138%" y="165" width="0.0556%" height="15" fill="rgb(219,138,53)" fg:x="2829" fg:w="54"/><text x="3.1638%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (12 samples, 0.01%)</title><rect x="2.9571%" y="149" width="0.0124%" height="15" fill="rgb(211,51,23)" fg:x="2871" fg:w="12"/><text x="3.2071%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (74 samples, 0.08%)</title><rect x="2.9076%" y="181" width="0.0762%" height="15" fill="rgb(247,221,28)" fg:x="2823" fg:w="74"/><text x="3.1576%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (14 samples, 0.01%)</title><rect x="2.9694%" y="165" width="0.0144%" height="15" fill="rgb(251,222,45)" fg:x="2883" fg:w="14"/><text x="3.2194%" y="175.50"></text></g><g><title>hashbrown::raw::h2 (13 samples, 0.01%)</title><rect x="2.9704%" y="149" width="0.0134%" height="15" fill="rgb(217,162,53)" fg:x="2884" fg:w="13"/><text x="3.2204%" y="159.50"></text></g><g><title>core::cmp::Ord::min (13 samples, 0.01%)</title><rect x="2.9704%" y="133" width="0.0134%" height="15" fill="rgb(229,93,14)" fg:x="2884" fg:w="13"/><text x="3.2204%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (260 samples, 0.27%)</title><rect x="2.7263%" y="213" width="0.2678%" height="15" fill="rgb(209,67,49)" fg:x="2647" fg:w="260"/><text x="2.9763%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (258 samples, 0.27%)</title><rect x="2.7284%" y="197" width="0.2657%" height="15" fill="rgb(213,87,29)" fg:x="2649" fg:w="258"/><text x="2.9784%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (10 samples, 0.01%)</title><rect x="2.9838%" y="181" width="0.0103%" height="15" fill="rgb(205,151,52)" fg:x="2897" fg:w="10"/><text x="3.2338%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (263 samples, 0.27%)</title><rect x="2.7253%" y="245" width="0.2709%" height="15" fill="rgb(253,215,39)" fg:x="2646" fg:w="263"/><text x="2.9753%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (263 samples, 0.27%)</title><rect x="2.7253%" y="229" width="0.2709%" height="15" fill="rgb(221,220,41)" fg:x="2646" fg:w="263"/><text x="2.9753%" y="239.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (20 samples, 0.02%)</title><rect x="3.0168%" y="229" width="0.0206%" height="15" fill="rgb(218,133,21)" fg:x="2929" fg:w="20"/><text x="3.2668%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (58 samples, 0.06%)</title><rect x="2.9962%" y="245" width="0.0597%" height="15" fill="rgb(221,193,43)" fg:x="2909" fg:w="58"/><text x="3.2462%" y="255.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (18 samples, 0.02%)</title><rect x="3.0374%" y="229" width="0.0185%" height="15" fill="rgb(240,128,52)" fg:x="2949" fg:w="18"/><text x="3.2874%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (18 samples, 0.02%)</title><rect x="3.0374%" y="213" width="0.0185%" height="15" fill="rgb(253,114,12)" fg:x="2949" fg:w="18"/><text x="3.2874%" y="223.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (672 samples, 0.69%)</title><rect x="2.3906%" y="341" width="0.6921%" height="15" fill="rgb(215,223,47)" fg:x="2321" fg:w="672"/><text x="2.6406%" y="351.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (665 samples, 0.68%)</title><rect x="2.3978%" y="325" width="0.6849%" height="15" fill="rgb(248,225,23)" fg:x="2328" fg:w="665"/><text x="2.6478%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (649 samples, 0.67%)</title><rect x="2.4143%" y="309" width="0.6685%" height="15" fill="rgb(250,108,0)" fg:x="2344" fg:w="649"/><text x="2.6643%" y="319.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (646 samples, 0.67%)</title><rect x="2.4173%" y="293" width="0.6654%" height="15" fill="rgb(228,208,7)" fg:x="2347" fg:w="646"/><text x="2.6673%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (645 samples, 0.66%)</title><rect x="2.4184%" y="277" width="0.6643%" height="15" fill="rgb(244,45,10)" fg:x="2348" fg:w="645"/><text x="2.6684%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (364 samples, 0.37%)</title><rect x="2.7078%" y="261" width="0.3749%" height="15" fill="rgb(207,125,25)" fg:x="2629" fg:w="364"/><text x="2.9578%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::record_item_insert_at (26 samples, 0.03%)</title><rect x="3.0559%" y="245" width="0.0268%" height="15" fill="rgb(210,195,18)" fg:x="2967" fg:w="26"/><text x="3.3059%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (25 samples, 0.03%)</title><rect x="3.0570%" y="229" width="0.0257%" height="15" fill="rgb(249,80,12)" fg:x="2968" fg:w="25"/><text x="3.3070%" y="239.50"></text></g><g><title>hashbrown::raw::h2 (23 samples, 0.02%)</title><rect x="3.0590%" y="213" width="0.0237%" height="15" fill="rgb(221,65,9)" fg:x="2970" fg:w="23"/><text x="3.3090%" y="223.50"></text></g><g><title>core::cmp::Ord::min (23 samples, 0.02%)</title><rect x="3.0590%" y="197" width="0.0237%" height="15" fill="rgb(235,49,36)" fg:x="2970" fg:w="23"/><text x="3.3090%" y="207.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (730 samples, 0.75%)</title><rect x="2.3329%" y="453" width="0.7519%" height="15" fill="rgb(225,32,20)" fg:x="2265" fg:w="730"/><text x="2.5829%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (729 samples, 0.75%)</title><rect x="2.3339%" y="437" width="0.7508%" height="15" fill="rgb(215,141,46)" fg:x="2266" fg:w="729"/><text x="2.5839%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (727 samples, 0.75%)</title><rect x="2.3360%" y="421" width="0.7488%" height="15" fill="rgb(250,160,47)" fg:x="2268" fg:w="727"/><text x="2.5860%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (722 samples, 0.74%)</title><rect x="2.3411%" y="405" width="0.7436%" height="15" fill="rgb(216,222,40)" fg:x="2273" fg:w="722"/><text x="2.5911%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (721 samples, 0.74%)</title><rect x="2.3422%" y="389" width="0.7426%" height="15" fill="rgb(234,217,39)" fg:x="2274" fg:w="721"/><text x="2.5922%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (721 samples, 0.74%)</title><rect x="2.3422%" y="373" width="0.7426%" height="15" fill="rgb(207,178,40)" fg:x="2274" fg:w="721"/><text x="2.5922%" y="383.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_fold::{{closure}} (679 samples, 0.70%)</title><rect x="2.3854%" y="357" width="0.6994%" height="15" fill="rgb(221,136,13)" fg:x="2316" fg:w="679"/><text x="2.6354%" y="367.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (736 samples, 0.76%)</title><rect x="2.3308%" y="485" width="0.7581%" height="15" fill="rgb(249,199,10)" fg:x="2263" fg:w="736"/><text x="2.5808%" y="495.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (736 samples, 0.76%)</title><rect x="2.3308%" y="469" width="0.7581%" height="15" fill="rgb(249,222,13)" fg:x="2263" fg:w="736"/><text x="2.5808%" y="479.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (741 samples, 0.76%)</title><rect x="2.3277%" y="501" width="0.7632%" height="15" fill="rgb(244,185,38)" fg:x="2260" fg:w="741"/><text x="2.5777%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::dedup::{{closure}} (980 samples, 1.01%)</title><rect x="3.9448%" y="469" width="1.0094%" height="15" fill="rgb(236,202,9)" fg:x="3830" fg:w="980"/><text x="4.1948%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;mut B&gt; for &amp;mut A&gt;::eq (433 samples, 0.45%)</title><rect x="4.5082%" y="453" width="0.4460%" height="15" fill="rgb(250,229,37)" fg:x="4377" fg:w="433"/><text x="4.7582%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u8&gt;::eq (101 samples, 0.10%)</title><rect x="4.8501%" y="437" width="0.1040%" height="15" fill="rgb(206,174,23)" fg:x="4709" fg:w="101"/><text x="5.1001%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (53 samples, 0.05%)</title><rect x="4.9614%" y="469" width="0.0546%" height="15" fill="rgb(211,33,43)" fg:x="4817" fg:w="53"/><text x="5.2114%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::dedup (2,096 samples, 2.16%)</title><rect x="3.0930%" y="501" width="2.1588%" height="15" fill="rgb(245,58,50)" fg:x="3003" fg:w="2096"/><text x="3.3430%" y="511.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::dedup_by (2,096 samples, 2.16%)</title><rect x="3.0930%" y="485" width="2.1588%" height="15" fill="rgb(244,68,36)" fg:x="3003" fg:w="2096"/><text x="3.3430%" y="495.50">a..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (229 samples, 0.24%)</title><rect x="5.0160%" y="469" width="0.2359%" height="15" fill="rgb(232,229,15)" fg:x="4870" fg:w="229"/><text x="5.2660%" y="479.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (225 samples, 0.23%)</title><rect x="5.0201%" y="453" width="0.2317%" height="15" fill="rgb(254,30,23)" fg:x="4874" fg:w="225"/><text x="5.2701%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (11 samples, 0.01%)</title><rect x="5.2570%" y="453" width="0.0113%" height="15" fill="rgb(235,160,14)" fg:x="5104" fg:w="11"/><text x="5.5070%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (17 samples, 0.02%)</title><rect x="5.2529%" y="485" width="0.0175%" height="15" fill="rgb(212,155,44)" fg:x="5100" fg:w="17"/><text x="5.5029%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (17 samples, 0.02%)</title><rect x="5.2529%" y="469" width="0.0175%" height="15" fill="rgb(226,2,50)" fg:x="5100" fg:w="17"/><text x="5.5029%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (21 samples, 0.02%)</title><rect x="5.2518%" y="501" width="0.0216%" height="15" fill="rgb(234,177,6)" fg:x="5099" fg:w="21"/><text x="5.5018%" y="511.50"></text></g><g><title>[libc.so.6] (35 samples, 0.04%)</title><rect x="7.9421%" y="325" width="0.0360%" height="15" fill="rgb(217,24,9)" fg:x="7711" fg:w="35"/><text x="8.1921%" y="335.50"></text></g><g><title>[libc.so.6] (19 samples, 0.02%)</title><rect x="7.9792%" y="309" width="0.0196%" height="15" fill="rgb(220,13,46)" fg:x="7747" fg:w="19"/><text x="8.2292%" y="319.50"></text></g><g><title>[libc.so.6] (27 samples, 0.03%)</title><rect x="8.0029%" y="293" width="0.0278%" height="15" fill="rgb(239,221,27)" fg:x="7770" fg:w="27"/><text x="8.2529%" y="303.50"></text></g><g><title>[libc.so.6] (21 samples, 0.02%)</title><rect x="8.0348%" y="277" width="0.0216%" height="15" fill="rgb(222,198,25)" fg:x="7801" fg:w="21"/><text x="8.2848%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (29 samples, 0.03%)</title><rect x="8.0812%" y="261" width="0.0299%" height="15" fill="rgb(211,99,13)" fg:x="7846" fg:w="29"/><text x="8.3312%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (241 samples, 0.25%)</title><rect x="8.1388%" y="245" width="0.2482%" height="15" fill="rgb(232,111,31)" fg:x="7902" fg:w="241"/><text x="8.3888%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (228 samples, 0.23%)</title><rect x="8.1522%" y="229" width="0.2348%" height="15" fill="rgb(245,82,37)" fg:x="7915" fg:w="228"/><text x="8.4022%" y="239.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (339 samples, 0.35%)</title><rect x="8.1110%" y="261" width="0.3492%" height="15" fill="rgb(227,149,46)" fg:x="7875" fg:w="339"/><text x="8.3610%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (71 samples, 0.07%)</title><rect x="8.3871%" y="245" width="0.0731%" height="15" fill="rgb(218,36,50)" fg:x="8143" fg:w="71"/><text x="8.6371%" y="255.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (60 samples, 0.06%)</title><rect x="8.3984%" y="229" width="0.0618%" height="15" fill="rgb(226,80,48)" fg:x="8154" fg:w="60"/><text x="8.6484%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (46 samples, 0.05%)</title><rect x="8.4128%" y="213" width="0.0474%" height="15" fill="rgb(238,224,15)" fg:x="8168" fg:w="46"/><text x="8.6628%" y="223.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (19 samples, 0.02%)</title><rect x="8.4406%" y="197" width="0.0196%" height="15" fill="rgb(241,136,10)" fg:x="8195" fg:w="19"/><text x="8.6906%" y="207.50"></text></g><g><title>&lt;&amp;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (680 samples, 0.70%)</title><rect x="7.9380%" y="357" width="0.7004%" height="15" fill="rgb(208,32,45)" fg:x="7707" fg:w="680"/><text x="8.1880%" y="367.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::iter (679 samples, 0.70%)</title><rect x="7.9390%" y="341" width="0.6994%" height="15" fill="rgb(207,135,9)" fg:x="7708" fg:w="679"/><text x="8.1890%" y="351.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::iter (641 samples, 0.66%)</title><rect x="7.9782%" y="325" width="0.6602%" height="15" fill="rgb(206,86,44)" fg:x="7746" fg:w="641"/><text x="8.2282%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::keys (620 samples, 0.64%)</title><rect x="7.9998%" y="309" width="0.6386%" height="15" fill="rgb(245,177,15)" fg:x="7767" fg:w="620"/><text x="8.2498%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (590 samples, 0.61%)</title><rect x="8.0307%" y="293" width="0.6077%" height="15" fill="rgb(206,64,50)" fg:x="7797" fg:w="590"/><text x="8.2807%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (565 samples, 0.58%)</title><rect x="8.0564%" y="277" width="0.5819%" height="15" fill="rgb(234,36,40)" fg:x="7822" fg:w="565"/><text x="8.3064%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::data_end (173 samples, 0.18%)</title><rect x="8.4602%" y="261" width="0.1782%" height="15" fill="rgb(213,64,8)" fg:x="8214" fg:w="173"/><text x="8.7102%" y="271.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (34 samples, 0.04%)</title><rect x="8.7208%" y="213" width="0.0350%" height="15" fill="rgb(210,75,36)" fg:x="8467" fg:w="34"/><text x="8.9708%" y="223.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit_nonzero (31 samples, 0.03%)</title><rect x="8.7239%" y="197" width="0.0319%" height="15" fill="rgb(229,88,21)" fg:x="8470" fg:w="31"/><text x="8.9739%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (94 samples, 0.10%)</title><rect x="8.6703%" y="245" width="0.0968%" height="15" fill="rgb(252,204,47)" fg:x="8418" fg:w="94"/><text x="8.9203%" y="255.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (80 samples, 0.08%)</title><rect x="8.6847%" y="229" width="0.0824%" height="15" fill="rgb(208,77,27)" fg:x="8432" fg:w="80"/><text x="8.9347%" y="239.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (124 samples, 0.13%)</title><rect x="8.6507%" y="309" width="0.1277%" height="15" fill="rgb(221,76,26)" fg:x="8399" fg:w="124"/><text x="8.9007%" y="319.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (123 samples, 0.13%)</title><rect x="8.6518%" y="293" width="0.1267%" height="15" fill="rgb(225,139,18)" fg:x="8400" fg:w="123"/><text x="8.9018%" y="303.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (121 samples, 0.12%)</title><rect x="8.6538%" y="277" width="0.1246%" height="15" fill="rgb(230,137,11)" fg:x="8402" fg:w="121"/><text x="8.9038%" y="287.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (118 samples, 0.12%)</title><rect x="8.6569%" y="261" width="0.1215%" height="15" fill="rgb(212,28,1)" fg:x="8405" fg:w="118"/><text x="8.9069%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (11 samples, 0.01%)</title><rect x="8.7671%" y="245" width="0.0113%" height="15" fill="rgb(248,164,17)" fg:x="8512" fg:w="11"/><text x="9.0171%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (54 samples, 0.06%)</title><rect x="8.8300%" y="197" width="0.0556%" height="15" fill="rgb(222,171,42)" fg:x="8573" fg:w="54"/><text x="9.0800%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::guaranteed_eq (22 samples, 0.02%)</title><rect x="8.8629%" y="181" width="0.0227%" height="15" fill="rgb(243,84,45)" fg:x="8605" fg:w="22"/><text x="9.1129%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (97 samples, 0.10%)</title><rect x="8.7980%" y="229" width="0.0999%" height="15" fill="rgb(252,49,23)" fg:x="8542" fg:w="97"/><text x="9.0480%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (95 samples, 0.10%)</title><rect x="8.8001%" y="213" width="0.0978%" height="15" fill="rgb(215,19,7)" fg:x="8544" fg:w="95"/><text x="9.0501%" y="223.50"></text></g><g><title>core::ptr::null_mut (12 samples, 0.01%)</title><rect x="8.8856%" y="197" width="0.0124%" height="15" fill="rgb(238,81,41)" fg:x="8627" fg:w="12"/><text x="9.1356%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (102 samples, 0.11%)</title><rect x="8.7970%" y="245" width="0.1051%" height="15" fill="rgb(210,199,37)" fg:x="8541" fg:w="102"/><text x="9.0470%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (112 samples, 0.12%)</title><rect x="8.7908%" y="261" width="0.1154%" height="15" fill="rgb(244,192,49)" fg:x="8535" fg:w="112"/><text x="9.0408%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (19 samples, 0.02%)</title><rect x="8.9216%" y="181" width="0.0196%" height="15" fill="rgb(226,211,11)" fg:x="8662" fg:w="19"/><text x="9.1716%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (37 samples, 0.04%)</title><rect x="8.9082%" y="213" width="0.0381%" height="15" fill="rgb(236,162,54)" fg:x="8649" fg:w="37"/><text x="9.1582%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (34 samples, 0.04%)</title><rect x="8.9113%" y="197" width="0.0350%" height="15" fill="rgb(220,229,9)" fg:x="8652" fg:w="34"/><text x="9.1613%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (39 samples, 0.04%)</title><rect x="8.9082%" y="229" width="0.0402%" height="15" fill="rgb(250,87,22)" fg:x="8649" fg:w="39"/><text x="9.1582%" y="239.50"></text></g><g><title>wfc::wfc::direction_mapping::DirectionMapping&lt;T&gt;::back (43 samples, 0.04%)</title><rect x="8.9062%" y="261" width="0.0443%" height="15" fill="rgb(239,43,17)" fg:x="8647" fg:w="43"/><text x="9.1562%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (43 samples, 0.04%)</title><rect x="8.9062%" y="245" width="0.0443%" height="15" fill="rgb(231,177,25)" fg:x="8647" fg:w="43"/><text x="9.1562%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (12 samples, 0.01%)</title><rect x="8.9700%" y="181" width="0.0124%" height="15" fill="rgb(219,179,1)" fg:x="8709" fg:w="12"/><text x="9.2200%" y="191.50"></text></g><g><title>wfc::wfc::direction_mapping::DirectionMapping&lt;T&gt;::down (34 samples, 0.04%)</title><rect x="8.9505%" y="261" width="0.0350%" height="15" fill="rgb(238,219,53)" fg:x="8690" fg:w="34"/><text x="9.2005%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (32 samples, 0.03%)</title><rect x="8.9525%" y="245" width="0.0330%" height="15" fill="rgb(232,167,36)" fg:x="8692" fg:w="32"/><text x="9.2025%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (30 samples, 0.03%)</title><rect x="8.9546%" y="229" width="0.0309%" height="15" fill="rgb(244,19,51)" fg:x="8694" fg:w="30"/><text x="9.2046%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (29 samples, 0.03%)</title><rect x="8.9556%" y="213" width="0.0299%" height="15" fill="rgb(224,6,22)" fg:x="8695" fg:w="29"/><text x="9.2056%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (22 samples, 0.02%)</title><rect x="8.9628%" y="197" width="0.0227%" height="15" fill="rgb(224,145,5)" fg:x="8702" fg:w="22"/><text x="9.2128%" y="207.50"></text></g><g><title>wfc::wfc::direction_mapping::DirectionMapping&lt;T&gt;::left (22 samples, 0.02%)</title><rect x="8.9865%" y="261" width="0.0227%" height="15" fill="rgb(234,130,49)" fg:x="8725" fg:w="22"/><text x="9.2365%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (22 samples, 0.02%)</title><rect x="8.9865%" y="245" width="0.0227%" height="15" fill="rgb(254,6,2)" fg:x="8725" fg:w="22"/><text x="9.2365%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (21 samples, 0.02%)</title><rect x="8.9875%" y="229" width="0.0216%" height="15" fill="rgb(208,96,46)" fg:x="8726" fg:w="21"/><text x="9.2375%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (21 samples, 0.02%)</title><rect x="8.9875%" y="213" width="0.0216%" height="15" fill="rgb(239,3,39)" fg:x="8726" fg:w="21"/><text x="9.2375%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (20 samples, 0.02%)</title><rect x="8.9886%" y="197" width="0.0206%" height="15" fill="rgb(233,210,1)" fg:x="8727" fg:w="20"/><text x="9.2386%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (13 samples, 0.01%)</title><rect x="8.9958%" y="181" width="0.0134%" height="15" fill="rgb(244,137,37)" fg:x="8734" fg:w="13"/><text x="9.2458%" y="191.50"></text></g><g><title>wfc::wfc::direction_mapping::DirectionMapping&lt;T&gt;::right (18 samples, 0.02%)</title><rect x="9.0092%" y="261" width="0.0185%" height="15" fill="rgb(240,136,2)" fg:x="8747" fg:w="18"/><text x="9.2592%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (17 samples, 0.02%)</title><rect x="9.0102%" y="245" width="0.0175%" height="15" fill="rgb(239,18,37)" fg:x="8748" fg:w="17"/><text x="9.2602%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (17 samples, 0.02%)</title><rect x="9.0102%" y="229" width="0.0175%" height="15" fill="rgb(218,185,22)" fg:x="8748" fg:w="17"/><text x="9.2602%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (17 samples, 0.02%)</title><rect x="9.0102%" y="213" width="0.0175%" height="15" fill="rgb(225,218,4)" fg:x="8748" fg:w="17"/><text x="9.2602%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (14 samples, 0.01%)</title><rect x="9.0133%" y="197" width="0.0144%" height="15" fill="rgb(230,182,32)" fg:x="8751" fg:w="14"/><text x="9.2633%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (384 samples, 0.40%)</title><rect x="8.6446%" y="325" width="0.3955%" height="15" fill="rgb(242,56,43)" fg:x="8393" fg:w="384"/><text x="8.8946%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (254 samples, 0.26%)</title><rect x="8.7785%" y="309" width="0.2616%" height="15" fill="rgb(233,99,24)" fg:x="8523" fg:w="254"/><text x="9.0285%" y="319.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (248 samples, 0.26%)</title><rect x="8.7846%" y="293" width="0.2554%" height="15" fill="rgb(234,209,42)" fg:x="8529" fg:w="248"/><text x="9.0346%" y="303.50"></text></g><g><title>wfc::wfc::queueprop::QueueProp::legal_tiles::{{closure}} (245 samples, 0.25%)</title><rect x="8.7877%" y="277" width="0.2523%" height="15" fill="rgb(227,7,12)" fg:x="8532" fg:w="245"/><text x="9.0377%" y="287.50"></text></g><g><title>wfc::wfc::direction_mapping::DirectionMapping&lt;T&gt;::up (12 samples, 0.01%)</title><rect x="9.0277%" y="261" width="0.0124%" height="15" fill="rgb(245,203,43)" fg:x="8765" fg:w="12"/><text x="9.2777%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (12 samples, 0.01%)</title><rect x="9.0277%" y="245" width="0.0124%" height="15" fill="rgb(238,205,33)" fg:x="8765" fg:w="12"/><text x="9.2777%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (12 samples, 0.01%)</title><rect x="9.0277%" y="229" width="0.0124%" height="15" fill="rgb(231,56,7)" fg:x="8765" fg:w="12"/><text x="9.2777%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (12 samples, 0.01%)</title><rect x="9.0277%" y="213" width="0.0124%" height="15" fill="rgb(244,186,29)" fg:x="8765" fg:w="12"/><text x="9.2777%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (11 samples, 0.01%)</title><rect x="9.0287%" y="197" width="0.0113%" height="15" fill="rgb(234,111,31)" fg:x="8766" fg:w="11"/><text x="9.2787%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (404 samples, 0.42%)</title><rect x="8.6384%" y="357" width="0.4161%" height="15" fill="rgb(241,149,10)" fg:x="8387" fg:w="404"/><text x="8.8884%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (404 samples, 0.42%)</title><rect x="8.6384%" y="341" width="0.4161%" height="15" fill="rgb(249,206,44)" fg:x="8387" fg:w="404"/><text x="8.8884%" y="351.50"></text></g><g><title>[libc.so.6] (41 samples, 0.04%)</title><rect x="9.0545%" y="357" width="0.0422%" height="15" fill="rgb(251,153,30)" fg:x="8791" fg:w="41"/><text x="9.3045%" y="367.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (111 samples, 0.11%)</title><rect x="9.4933%" y="341" width="0.1143%" height="15" fill="rgb(239,152,38)" fg:x="9217" fg:w="111"/><text x="9.7433%" y="351.50"></text></g><g><title>[libc.so.6] (42 samples, 0.04%)</title><rect x="9.6076%" y="341" width="0.0433%" height="15" fill="rgb(249,139,47)" fg:x="9328" fg:w="42"/><text x="9.8576%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (157 samples, 0.16%)</title><rect x="11.9518%" y="245" width="0.1617%" height="15" fill="rgb(244,64,35)" fg:x="11604" fg:w="157"/><text x="12.2018%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (85 samples, 0.09%)</title><rect x="14.9212%" y="213" width="0.0875%" height="15" fill="rgb(216,46,15)" fg:x="14487" fg:w="85"/><text x="15.1712%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (79 samples, 0.08%)</title><rect x="14.9274%" y="197" width="0.0814%" height="15" fill="rgb(250,74,19)" fg:x="14493" fg:w="79"/><text x="15.1774%" y="207.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (1,035 samples, 1.07%)</title><rect x="13.9469%" y="229" width="1.0660%" height="15" fill="rgb(249,42,33)" fg:x="13541" fg:w="1035"/><text x="14.1969%" y="239.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1,655 samples, 1.70%)</title><rect x="15.0129%" y="229" width="1.7046%" height="15" fill="rgb(242,149,17)" fg:x="14576" fg:w="1655"/><text x="15.2629%" y="239.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit_nonzero (1,419 samples, 1.46%)</title><rect x="15.2559%" y="213" width="1.4615%" height="15" fill="rgb(244,29,21)" fg:x="14812" fg:w="1419"/><text x="15.5059%" y="223.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (188 samples, 0.19%)</title><rect x="16.7175%" y="229" width="0.1936%" height="15" fill="rgb(220,130,37)" fg:x="16231" fg:w="188"/><text x="16.9675%" y="239.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (117 samples, 0.12%)</title><rect x="16.9111%" y="229" width="0.1205%" height="15" fill="rgb(211,67,2)" fg:x="16419" fg:w="117"/><text x="17.1611%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (44 samples, 0.05%)</title><rect x="16.9863%" y="213" width="0.0453%" height="15" fill="rgb(235,68,52)" fg:x="16492" fg:w="44"/><text x="17.2363%" y="223.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::invert (38 samples, 0.04%)</title><rect x="17.0625%" y="213" width="0.0391%" height="15" fill="rgb(246,142,3)" fg:x="16566" fg:w="38"/><text x="17.3125%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,862 samples, 6.04%)</title><rect x="11.3699%" y="261" width="6.0377%" height="15" fill="rgb(241,25,7)" fg:x="11039" fg:w="5862"/><text x="11.6199%" y="271.50">&lt;hashbro..</text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (5,140 samples, 5.29%)</title><rect x="12.1135%" y="245" width="5.2941%" height="15" fill="rgb(242,119,39)" fg:x="11761" fg:w="5140"/><text x="12.3635%" y="255.50">hashbr..</text></g><g><title>hashbrown::raw::sse2::Group::match_full (365 samples, 0.38%)</title><rect x="17.0316%" y="229" width="0.3759%" height="15" fill="rgb(241,98,45)" fg:x="16536" fg:w="365"/><text x="17.2816%" y="239.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (297 samples, 0.31%)</title><rect x="17.1017%" y="213" width="0.3059%" height="15" fill="rgb(254,28,30)" fg:x="16604" fg:w="297"/><text x="17.3517%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (239 samples, 0.25%)</title><rect x="17.1614%" y="197" width="0.2462%" height="15" fill="rgb(241,142,54)" fg:x="16662" fg:w="239"/><text x="17.4114%" y="207.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (62 samples, 0.06%)</title><rect x="17.3437%" y="181" width="0.0639%" height="15" fill="rgb(222,85,15)" fg:x="16839" fg:w="62"/><text x="17.5937%" y="191.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,608 samples, 7.84%)</title><rect x="10.5057%" y="277" width="7.8360%" height="15" fill="rgb(210,85,47)" fg:x="10200" fg:w="7608"/><text x="10.7557%" y="287.50">&lt;hashbrown:..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (899 samples, 0.93%)</title><rect x="17.4158%" y="261" width="0.9259%" height="15" fill="rgb(224,206,25)" fg:x="16909" fg:w="899"/><text x="17.6658%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (609 samples, 0.63%)</title><rect x="17.7145%" y="245" width="0.6273%" height="15" fill="rgb(243,201,19)" fg:x="17199" fg:w="609"/><text x="17.9645%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (258 samples, 0.27%)</title><rect x="18.0760%" y="229" width="0.2657%" height="15" fill="rgb(236,59,4)" fg:x="17550" fg:w="258"/><text x="18.3260%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (209 samples, 0.22%)</title><rect x="18.1265%" y="213" width="0.2153%" height="15" fill="rgb(254,179,45)" fg:x="17599" fg:w="209"/><text x="18.3765%" y="223.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,914 samples, 8.15%)</title><rect x="10.1926%" y="309" width="8.1512%" height="15" fill="rgb(226,14,10)" fg:x="9896" fg:w="7914"/><text x="10.4426%" y="319.50">&lt;hashbrown:..</text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,792 samples, 8.03%)</title><rect x="10.3183%" y="293" width="8.0255%" height="15" fill="rgb(244,27,41)" fg:x="10018" fg:w="7792"/><text x="10.5683%" y="303.50">&lt;hashbrown:..</text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (8,111 samples, 8.35%)</title><rect x="9.9907%" y="325" width="8.3541%" height="15" fill="rgb(235,35,32)" fg:x="9700" fg:w="8111"/><text x="10.2407%" y="335.50">&lt;std::collec..</text></g><g><title>core::ops::function::FnOnce::call_once (8,444 samples, 8.70%)</title><rect x="9.6539%" y="341" width="8.6971%" height="15" fill="rgb(218,68,31)" fg:x="9373" fg:w="8444"/><text x="9.9039%" y="351.50">core::ops::f..</text></g><g><title>core::option::Option&lt;T&gt;::as_mut (71 samples, 0.07%)</title><rect x="18.3510%" y="341" width="0.0731%" height="15" fill="rgb(207,120,37)" fg:x="17817" fg:w="71"/><text x="18.6010%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (10,654 samples, 10.97%)</title><rect x="7.5724%" y="373" width="10.9733%" height="15" fill="rgb(227,98,0)" fg:x="7352" fg:w="10654"/><text x="7.8224%" y="383.50">&lt;core::iter::ada..</text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (9,173 samples, 9.45%)</title><rect x="9.0977%" y="357" width="9.4479%" height="15" fill="rgb(207,7,3)" fg:x="8833" fg:w="9173"/><text x="9.3477%" y="367.50">core::iter::ad..</text></g><g><title>core::option::Option&lt;T&gt;::is_none (118 samples, 0.12%)</title><rect x="18.4241%" y="341" width="0.1215%" height="15" fill="rgb(206,98,19)" fg:x="17888" fg:w="118"/><text x="18.6741%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (78 samples, 0.08%)</title><rect x="18.4653%" y="325" width="0.0803%" height="15" fill="rgb(217,5,26)" fg:x="17928" fg:w="78"/><text x="18.7153%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (10,862 samples, 11.19%)</title><rect x="7.3622%" y="389" width="11.1876%" height="15" fill="rgb(235,190,38)" fg:x="7148" fg:w="10862"/><text x="7.6122%" y="399.50">&lt;core::iter::ada..</text></g><g><title>asm_sysvec_apic_timer_interrupt (10 samples, 0.01%)</title><rect x="20.1226%" y="373" width="0.0103%" height="15" fill="rgb(247,86,24)" fg:x="19537" fg:w="10"/><text x="20.3726%" y="383.50"></text></g><g><title>sysvec_apic_timer_interrupt (10 samples, 0.01%)</title><rect x="20.1226%" y="357" width="0.0103%" height="15" fill="rgb(205,101,16)" fg:x="19537" fg:w="10"/><text x="20.3726%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (13,630 samples, 14.04%)</title><rect x="6.6433%" y="405" width="14.0385%" height="15" fill="rgb(246,168,33)" fg:x="6450" fg:w="13630"/><text x="6.8933%" y="415.50">&lt;core::iter::adapters..</text></g><g><title>core::option::Option&lt;T&gt;::map (2,065 samples, 2.13%)</title><rect x="18.5549%" y="389" width="2.1269%" height="15" fill="rgb(231,114,1)" fg:x="18015" fg:w="2065"/><text x="18.8049%" y="399.50">c..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (533 samples, 0.55%)</title><rect x="20.1329%" y="373" width="0.5490%" height="15" fill="rgb(207,184,53)" fg:x="19547" fg:w="533"/><text x="20.3829%" y="383.50"></text></g><g><title>wfc::wfc::queueprop::QueueProp::legal_tiles::{{closure}} (107 samples, 0.11%)</title><rect x="20.5716%" y="357" width="0.1102%" height="15" fill="rgb(224,95,51)" fg:x="19973" fg:w="107"/><text x="20.8216%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (12 samples, 0.01%)</title><rect x="20.6818%" y="405" width="0.0124%" height="15" fill="rgb(212,188,45)" fg:x="20080" fg:w="12"/><text x="20.9318%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (12 samples, 0.01%)</title><rect x="20.6818%" y="389" width="0.0124%" height="15" fill="rgb(223,154,38)" fg:x="20080" fg:w="12"/><text x="20.9318%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (12 samples, 0.01%)</title><rect x="20.6818%" y="373" width="0.0124%" height="15" fill="rgb(251,22,52)" fg:x="20080" fg:w="12"/><text x="20.9318%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (24 samples, 0.02%)</title><rect x="20.7313%" y="389" width="0.0247%" height="15" fill="rgb(229,209,22)" fg:x="20128" fg:w="24"/><text x="20.9813%" y="399.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (16 samples, 0.02%)</title><rect x="20.7395%" y="373" width="0.0165%" height="15" fill="rgb(234,138,34)" fg:x="20136" fg:w="16"/><text x="20.9895%" y="383.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (14 samples, 0.01%)</title><rect x="20.7416%" y="357" width="0.0144%" height="15" fill="rgb(212,95,11)" fg:x="20138" fg:w="14"/><text x="20.9916%" y="367.50"></text></g><g><title>irq_exit_rcu (13 samples, 0.01%)</title><rect x="23.7738%" y="341" width="0.0134%" height="15" fill="rgb(240,179,47)" fg:x="23082" fg:w="13"/><text x="24.0238%" y="351.50"></text></g><g><title>__softirqentry_text_start (13 samples, 0.01%)</title><rect x="23.7738%" y="325" width="0.0134%" height="15" fill="rgb(240,163,11)" fg:x="23082" fg:w="13"/><text x="24.0238%" y="335.50"></text></g><g><title>run_timer_softirq (10 samples, 0.01%)</title><rect x="23.7769%" y="309" width="0.0103%" height="15" fill="rgb(236,37,12)" fg:x="23085" fg:w="10"/><text x="24.0269%" y="319.50"></text></g><g><title>__run_timers.part.0 (10 samples, 0.01%)</title><rect x="23.7769%" y="293" width="0.0103%" height="15" fill="rgb(232,164,16)" fg:x="23085" fg:w="10"/><text x="24.0269%" y="303.50"></text></g><g><title>call_timer_fn (10 samples, 0.01%)</title><rect x="23.7769%" y="277" width="0.0103%" height="15" fill="rgb(244,205,15)" fg:x="23085" fg:w="10"/><text x="24.0269%" y="287.50"></text></g><g><title>vbg_heartbeat_timer (10 samples, 0.01%)</title><rect x="23.7769%" y="261" width="0.0103%" height="15" fill="rgb(223,117,47)" fg:x="23085" fg:w="10"/><text x="24.0269%" y="271.50"></text></g><g><title>vbg_req_perform (10 samples, 0.01%)</title><rect x="23.7769%" y="245" width="0.0103%" height="15" fill="rgb(244,107,35)" fg:x="23085" fg:w="10"/><text x="24.0269%" y="255.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (15 samples, 0.02%)</title><rect x="23.7738%" y="373" width="0.0154%" height="15" fill="rgb(205,140,8)" fg:x="23082" fg:w="15"/><text x="24.0238%" y="383.50"></text></g><g><title>sysvec_apic_timer_interrupt (15 samples, 0.02%)</title><rect x="23.7738%" y="357" width="0.0154%" height="15" fill="rgb(228,84,46)" fg:x="23082" fg:w="15"/><text x="24.0238%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (3,785 samples, 3.90%)</title><rect x="23.7893%" y="373" width="3.8984%" height="15" fill="rgb(254,188,9)" fg:x="23097" fg:w="3785"/><text x="24.0393%" y="383.50">core..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::guaranteed_eq (1,663 samples, 1.71%)</title><rect x="25.9749%" y="357" width="1.7128%" height="15" fill="rgb(206,112,54)" fg:x="25219" fg:w="1663"/><text x="26.2249%" y="367.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (16 samples, 0.02%)</title><rect x="27.6712%" y="341" width="0.0165%" height="15" fill="rgb(216,84,49)" fg:x="26866" fg:w="16"/><text x="27.9212%" y="351.50"></text></g><g><title>sysvec_apic_timer_interrupt (16 samples, 0.02%)</title><rect x="27.6712%" y="325" width="0.0165%" height="15" fill="rgb(214,194,35)" fg:x="26866" fg:w="16"/><text x="27.9212%" y="335.50"></text></g><g><title>irq_exit_rcu (16 samples, 0.02%)</title><rect x="27.6712%" y="309" width="0.0165%" height="15" fill="rgb(249,28,3)" fg:x="26866" fg:w="16"/><text x="27.9212%" y="319.50"></text></g><g><title>__softirqentry_text_start (16 samples, 0.02%)</title><rect x="27.6712%" y="293" width="0.0165%" height="15" fill="rgb(222,56,52)" fg:x="26866" fg:w="16"/><text x="27.9212%" y="303.50"></text></g><g><title>run_timer_softirq (15 samples, 0.02%)</title><rect x="27.6723%" y="277" width="0.0154%" height="15" fill="rgb(245,217,50)" fg:x="26867" fg:w="15"/><text x="27.9223%" y="287.50"></text></g><g><title>__run_timers.part.0 (15 samples, 0.02%)</title><rect x="27.6723%" y="261" width="0.0154%" height="15" fill="rgb(213,201,24)" fg:x="26867" fg:w="15"/><text x="27.9223%" y="271.50"></text></g><g><title>call_timer_fn (14 samples, 0.01%)</title><rect x="27.6733%" y="245" width="0.0144%" height="15" fill="rgb(248,116,28)" fg:x="26868" fg:w="14"/><text x="27.9233%" y="255.50"></text></g><g><title>vbg_heartbeat_timer (14 samples, 0.01%)</title><rect x="27.6733%" y="229" width="0.0144%" height="15" fill="rgb(219,72,43)" fg:x="26868" fg:w="14"/><text x="27.9233%" y="239.50"></text></g><g><title>vbg_req_perform (14 samples, 0.01%)</title><rect x="27.6733%" y="213" width="0.0144%" height="15" fill="rgb(209,138,14)" fg:x="26868" fg:w="14"/><text x="27.9233%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (7,371 samples, 7.59%)</title><rect x="20.6942%" y="405" width="7.5919%" height="15" fill="rgb(222,18,33)" fg:x="20092" fg:w="7371"/><text x="20.9442%" y="415.50">alloc::vec..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (7,310 samples, 7.53%)</title><rect x="20.7570%" y="389" width="7.5291%" height="15" fill="rgb(213,199,7)" fg:x="20153" fg:w="7310"/><text x="21.0070%" y="399.50">core::ptr:..</text></g><g><title>core::ptr::null_mut (581 samples, 0.60%)</title><rect x="27.6877%" y="373" width="0.5984%" height="15" fill="rgb(250,110,10)" fg:x="26882" fg:w="581"/><text x="27.9377%" y="383.50"></text></g><g><title>core::ptr::invalid_mut (380 samples, 0.39%)</title><rect x="27.8947%" y="357" width="0.3914%" height="15" fill="rgb(248,123,6)" fg:x="27083" fg:w="380"/><text x="28.1447%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (72 samples, 0.07%)</title><rect x="28.2861%" y="405" width="0.0742%" height="15" fill="rgb(206,91,31)" fg:x="27463" fg:w="72"/><text x="28.5361%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (68 samples, 0.07%)</title><rect x="28.2902%" y="389" width="0.0700%" height="15" fill="rgb(211,154,13)" fg:x="27467" fg:w="68"/><text x="28.5402%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (12 samples, 0.01%)</title><rect x="28.3603%" y="405" width="0.0124%" height="15" fill="rgb(225,148,7)" fg:x="27535" fg:w="12"/><text x="28.6103%" y="415.50"></text></g><g><title>[libc.so.6] (14 samples, 0.01%)</title><rect x="28.4561%" y="229" width="0.0144%" height="15" fill="rgb(220,160,43)" fg:x="27628" fg:w="14"/><text x="28.7061%" y="239.50"></text></g><g><title>alloc::alloc::realloc (81 samples, 0.08%)</title><rect x="28.3881%" y="293" width="0.0834%" height="15" fill="rgb(213,52,39)" fg:x="27562" fg:w="81"/><text x="28.6381%" y="303.50"></text></g><g><title>realloc (79 samples, 0.08%)</title><rect x="28.3902%" y="277" width="0.0814%" height="15" fill="rgb(243,137,7)" fg:x="27564" fg:w="79"/><text x="28.6402%" y="287.50"></text></g><g><title>[libc.so.6] (78 samples, 0.08%)</title><rect x="28.3912%" y="261" width="0.0803%" height="15" fill="rgb(230,79,13)" fg:x="27565" fg:w="78"/><text x="28.6412%" y="271.50"></text></g><g><title>[libc.so.6] (76 samples, 0.08%)</title><rect x="28.3932%" y="245" width="0.0783%" height="15" fill="rgb(247,105,23)" fg:x="27567" fg:w="76"/><text x="28.6432%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (93 samples, 0.10%)</title><rect x="28.3881%" y="325" width="0.0958%" height="15" fill="rgb(223,179,41)" fg:x="27562" fg:w="93"/><text x="28.6381%" y="335.50"></text></g><g><title>alloc::alloc::Global::grow_impl (93 samples, 0.10%)</title><rect x="28.3881%" y="309" width="0.0958%" height="15" fill="rgb(218,9,34)" fg:x="27562" fg:w="93"/><text x="28.6381%" y="319.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (12 samples, 0.01%)</title><rect x="28.4715%" y="293" width="0.0124%" height="15" fill="rgb(222,106,8)" fg:x="27643" fg:w="12"/><text x="28.7215%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (99 samples, 0.10%)</title><rect x="28.3850%" y="341" width="0.1020%" height="15" fill="rgb(211,220,0)" fg:x="27559" fg:w="99"/><text x="28.6350%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (117 samples, 0.12%)</title><rect x="28.3726%" y="405" width="0.1205%" height="15" fill="rgb(229,52,16)" fg:x="27547" fg:w="117"/><text x="28.6226%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (116 samples, 0.12%)</title><rect x="28.3737%" y="389" width="0.1195%" height="15" fill="rgb(212,155,18)" fg:x="27548" fg:w="116"/><text x="28.6237%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (113 samples, 0.12%)</title><rect x="28.3768%" y="373" width="0.1164%" height="15" fill="rgb(242,21,14)" fg:x="27551" fg:w="113"/><text x="28.6268%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (113 samples, 0.12%)</title><rect x="28.3768%" y="357" width="0.1164%" height="15" fill="rgb(222,19,48)" fg:x="27551" fg:w="113"/><text x="28.6268%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (22,662 samples, 23.34%)</title><rect x="5.2858%" y="437" width="23.3412%" height="15" fill="rgb(232,45,27)" fg:x="5132" fg:w="22662"/><text x="5.5358%" y="447.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (22,662 samples, 23.34%)</title><rect x="5.2858%" y="421" width="23.3412%" height="15" fill="rgb(249,103,42)" fg:x="5132" fg:w="22662"/><text x="5.5358%" y="431.50">alloc::vec::Vec&lt;T,A&gt;::extend_desugared</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (122 samples, 0.13%)</title><rect x="28.5014%" y="405" width="0.1257%" height="15" fill="rgb(246,81,33)" fg:x="27672" fg:w="122"/><text x="28.7514%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (62 samples, 0.06%)</title><rect x="28.5632%" y="389" width="0.0639%" height="15" fill="rgb(252,33,42)" fg:x="27732" fg:w="62"/><text x="28.8132%" y="399.50"></text></g><g><title>&lt;&amp;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (10 samples, 0.01%)</title><rect x="28.6301%" y="389" width="0.0103%" height="15" fill="rgb(209,212,41)" fg:x="27797" fg:w="10"/><text x="28.8801%" y="399.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::iter (10 samples, 0.01%)</title><rect x="28.6301%" y="373" width="0.0103%" height="15" fill="rgb(207,154,6)" fg:x="27797" fg:w="10"/><text x="28.8801%" y="383.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::iter (10 samples, 0.01%)</title><rect x="28.6301%" y="357" width="0.0103%" height="15" fill="rgb(223,64,47)" fg:x="27797" fg:w="10"/><text x="28.8801%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.03%)</title><rect x="28.6270%" y="437" width="0.0257%" height="15" fill="rgb(211,161,38)" fg:x="27794" fg:w="25"/><text x="28.8770%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="28.6281%" y="421" width="0.0247%" height="15" fill="rgb(219,138,40)" fg:x="27795" fg:w="24"/><text x="28.8781%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="28.6281%" y="405" width="0.0247%" height="15" fill="rgb(241,228,46)" fg:x="27795" fg:w="24"/><text x="28.8781%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (22,715 samples, 23.40%)</title><rect x="5.2745%" y="485" width="23.3958%" height="15" fill="rgb(223,209,38)" fg:x="5121" fg:w="22715"/><text x="5.5245%" y="495.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::tr..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (22,712 samples, 23.39%)</title><rect x="5.2776%" y="469" width="23.3927%" height="15" fill="rgb(236,164,45)" fg:x="5124" fg:w="22712"/><text x="5.5276%" y="479.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::sp..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (22,708 samples, 23.39%)</title><rect x="5.2817%" y="453" width="23.3886%" height="15" fill="rgb(231,15,5)" fg:x="5128" fg:w="22708"/><text x="5.5317%" y="463.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::sp..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (22,716 samples, 23.40%)</title><rect x="5.2745%" y="501" width="23.3968%" height="15" fill="rgb(252,35,15)" fg:x="5121" fg:w="22716"/><text x="5.5245%" y="511.50">core::iter::traits::iterator::Iterato..</text></g><g><title>core::iter::traits::iterator::Iterator::flatten (10 samples, 0.01%)</title><rect x="28.6724%" y="501" width="0.0103%" height="15" fill="rgb(248,181,18)" fg:x="27838" fg:w="10"/><text x="28.9224%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12 samples, 0.01%)</title><rect x="28.6899%" y="405" width="0.0124%" height="15" fill="rgb(233,39,42)" fg:x="27855" fg:w="12"/><text x="28.9399%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (12 samples, 0.01%)</title><rect x="28.6899%" y="389" width="0.0124%" height="15" fill="rgb(238,110,33)" fg:x="27855" fg:w="12"/><text x="28.9399%" y="399.50"></text></g><g><title>free (12 samples, 0.01%)</title><rect x="28.6899%" y="373" width="0.0124%" height="15" fill="rgb(233,195,10)" fg:x="27855" fg:w="12"/><text x="28.9399%" y="383.50"></text></g><g><title>[libc.so.6] (12 samples, 0.01%)</title><rect x="28.6899%" y="357" width="0.0124%" height="15" fill="rgb(254,105,3)" fg:x="27855" fg:w="12"/><text x="28.9399%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (15 samples, 0.02%)</title><rect x="28.6878%" y="501" width="0.0154%" height="15" fill="rgb(221,225,9)" fg:x="27853" fg:w="15"/><text x="28.9378%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.02%)</title><rect x="28.6878%" y="485" width="0.0154%" height="15" fill="rgb(224,227,45)" fg:x="27853" fg:w="15"/><text x="28.9378%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;u8&gt;]&gt; (14 samples, 0.01%)</title><rect x="28.6888%" y="469" width="0.0144%" height="15" fill="rgb(229,198,43)" fg:x="27854" fg:w="14"/><text x="28.9388%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (14 samples, 0.01%)</title><rect x="28.6888%" y="453" width="0.0144%" height="15" fill="rgb(206,209,35)" fg:x="27854" fg:w="14"/><text x="28.9388%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (13 samples, 0.01%)</title><rect x="28.6899%" y="437" width="0.0134%" height="15" fill="rgb(245,195,53)" fg:x="27855" fg:w="13"/><text x="28.9399%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="28.6899%" y="421" width="0.0134%" height="15" fill="rgb(240,92,26)" fg:x="27855" fg:w="13"/><text x="28.9399%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (11 samples, 0.01%)</title><rect x="28.7064%" y="469" width="0.0113%" height="15" fill="rgb(207,40,23)" fg:x="27871" fg:w="11"/><text x="28.9564%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (15 samples, 0.02%)</title><rect x="28.7033%" y="501" width="0.0154%" height="15" fill="rgb(223,111,35)" fg:x="27868" fg:w="15"/><text x="28.9533%" y="511.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.02%)</title><rect x="28.7033%" y="485" width="0.0154%" height="15" fill="rgb(229,147,28)" fg:x="27868" fg:w="15"/><text x="28.9533%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut (16 samples, 0.02%)</title><rect x="28.7506%" y="453" width="0.0165%" height="15" fill="rgb(211,29,28)" fg:x="27914" fg:w="16"/><text x="29.0006%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut_unchecked (13 samples, 0.01%)</title><rect x="28.7537%" y="437" width="0.0134%" height="15" fill="rgb(228,72,33)" fg:x="27917" fg:w="13"/><text x="29.0037%" y="447.50"></text></g><g><title>core::ops::function::FnMut::call_mut (28 samples, 0.03%)</title><rect x="28.8341%" y="389" width="0.0288%" height="15" fill="rgb(205,214,31)" fg:x="27995" fg:w="28"/><text x="29.0841%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::lt (14 samples, 0.01%)</title><rect x="28.8485%" y="373" width="0.0144%" height="15" fill="rgb(224,111,15)" fg:x="28009" fg:w="14"/><text x="29.0985%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (11 samples, 0.01%)</title><rect x="28.8732%" y="357" width="0.0113%" height="15" fill="rgb(253,21,26)" fg:x="28033" fg:w="11"/><text x="29.1232%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (11 samples, 0.01%)</title><rect x="28.8732%" y="341" width="0.0113%" height="15" fill="rgb(245,139,43)" fg:x="28033" fg:w="11"/><text x="29.1232%" y="351.50"></text></g><g><title>core::slice::sort::choose_pivot (111 samples, 0.11%)</title><rect x="28.7712%" y="453" width="0.1143%" height="15" fill="rgb(252,170,7)" fg:x="27934" fg:w="111"/><text x="29.0212%" y="463.50"></text></g><g><title>core::slice::sort::choose_pivot::{{closure}} (106 samples, 0.11%)</title><rect x="28.7764%" y="437" width="0.1092%" height="15" fill="rgb(231,118,14)" fg:x="27939" fg:w="106"/><text x="29.0264%" y="447.50"></text></g><g><title>core::slice::sort::choose_pivot::{{closure}} (104 samples, 0.11%)</title><rect x="28.7785%" y="421" width="0.1071%" height="15" fill="rgb(238,83,0)" fg:x="27941" fg:w="104"/><text x="29.0285%" y="431.50"></text></g><g><title>core::slice::sort::choose_pivot::{{closure}} (71 samples, 0.07%)</title><rect x="28.8124%" y="405" width="0.0731%" height="15" fill="rgb(221,39,39)" fg:x="27974" fg:w="71"/><text x="29.0624%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (17 samples, 0.02%)</title><rect x="28.8681%" y="389" width="0.0175%" height="15" fill="rgb(222,119,46)" fg:x="28028" fg:w="17"/><text x="29.1181%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (15 samples, 0.02%)</title><rect x="28.8701%" y="373" width="0.0154%" height="15" fill="rgb(222,165,49)" fg:x="28030" fg:w="15"/><text x="29.1201%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.01%)</title><rect x="28.9093%" y="421" width="0.0113%" height="15" fill="rgb(219,113,52)" fg:x="28068" fg:w="11"/><text x="29.1593%" y="431.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (11 samples, 0.01%)</title><rect x="28.9093%" y="405" width="0.0113%" height="15" fill="rgb(214,7,15)" fg:x="28068" fg:w="11"/><text x="29.1593%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (11 samples, 0.01%)</title><rect x="28.9093%" y="389" width="0.0113%" height="15" fill="rgb(235,32,4)" fg:x="28068" fg:w="11"/><text x="29.1593%" y="399.50"></text></g><g><title>core::slice::sort::insertion_sort (49 samples, 0.05%)</title><rect x="28.8856%" y="453" width="0.0505%" height="15" fill="rgb(238,90,54)" fg:x="28045" fg:w="49"/><text x="29.1356%" y="463.50"></text></g><g><title>core::slice::sort::shift_tail (37 samples, 0.04%)</title><rect x="28.8979%" y="437" width="0.0381%" height="15" fill="rgb(213,208,19)" fg:x="28057" fg:w="37"/><text x="29.1479%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut (13 samples, 0.01%)</title><rect x="28.9628%" y="437" width="0.0134%" height="15" fill="rgb(233,156,4)" fg:x="28120" fg:w="13"/><text x="29.2128%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut_unchecked (12 samples, 0.01%)</title><rect x="28.9638%" y="421" width="0.0124%" height="15" fill="rgb(207,194,5)" fg:x="28121" fg:w="12"/><text x="29.2138%" y="431.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (19 samples, 0.02%)</title><rect x="33.0518%" y="421" width="0.0196%" height="15" fill="rgb(206,111,30)" fg:x="32090" fg:w="19"/><text x="33.3018%" y="431.50"></text></g><g><title>sysvec_apic_timer_interrupt (19 samples, 0.02%)</title><rect x="33.0518%" y="405" width="0.0196%" height="15" fill="rgb(243,70,54)" fg:x="32090" fg:w="19"/><text x="33.3018%" y="415.50"></text></g><g><title>irq_exit_rcu (19 samples, 0.02%)</title><rect x="33.0518%" y="389" width="0.0196%" height="15" fill="rgb(242,28,8)" fg:x="32090" fg:w="19"/><text x="33.3018%" y="399.50"></text></g><g><title>__softirqentry_text_start (19 samples, 0.02%)</title><rect x="33.0518%" y="373" width="0.0196%" height="15" fill="rgb(219,106,18)" fg:x="32090" fg:w="19"/><text x="33.3018%" y="383.50"></text></g><g><title>run_timer_softirq (18 samples, 0.02%)</title><rect x="33.0528%" y="357" width="0.0185%" height="15" fill="rgb(244,222,10)" fg:x="32091" fg:w="18"/><text x="33.3028%" y="367.50"></text></g><g><title>__run_timers.part.0 (18 samples, 0.02%)</title><rect x="33.0528%" y="341" width="0.0185%" height="15" fill="rgb(236,179,52)" fg:x="32091" fg:w="18"/><text x="33.3028%" y="351.50"></text></g><g><title>call_timer_fn (18 samples, 0.02%)</title><rect x="33.0528%" y="325" width="0.0185%" height="15" fill="rgb(213,23,39)" fg:x="32091" fg:w="18"/><text x="33.3028%" y="335.50"></text></g><g><title>vbg_heartbeat_timer (18 samples, 0.02%)</title><rect x="33.0528%" y="309" width="0.0185%" height="15" fill="rgb(238,48,10)" fg:x="32091" fg:w="18"/><text x="33.3028%" y="319.50"></text></g><g><title>vbg_req_perform (18 samples, 0.02%)</title><rect x="33.0528%" y="293" width="0.0185%" height="15" fill="rgb(251,196,23)" fg:x="32091" fg:w="18"/><text x="33.3028%" y="303.50"></text></g><g><title>core::cmp::min (90 samples, 0.09%)</title><rect x="33.0714%" y="421" width="0.0927%" height="15" fill="rgb(250,152,24)" fg:x="32109" fg:w="90"/><text x="33.3214%" y="431.50"></text></g><g><title>core::cmp::Ord::min (87 samples, 0.09%)</title><rect x="33.0745%" y="405" width="0.0896%" height="15" fill="rgb(209,150,17)" fg:x="32112" fg:w="87"/><text x="33.3245%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (25 samples, 0.03%)</title><rect x="33.1383%" y="389" width="0.0257%" height="15" fill="rgb(234,202,34)" fg:x="32174" fg:w="25"/><text x="33.3883%" y="399.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;u8&gt; for usize&gt;::from (31 samples, 0.03%)</title><rect x="33.1641%" y="421" width="0.0319%" height="15" fill="rgb(253,148,53)" fg:x="32199" fg:w="31"/><text x="33.4141%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (294 samples, 0.30%)</title><rect x="33.1960%" y="421" width="0.3028%" height="15" fill="rgb(218,129,16)" fg:x="32230" fg:w="294"/><text x="33.4460%" y="431.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (461 samples, 0.47%)</title><rect x="36.1139%" y="389" width="0.4748%" height="15" fill="rgb(216,85,19)" fg:x="35063" fg:w="461"/><text x="36.3639%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (53 samples, 0.05%)</title><rect x="36.5341%" y="373" width="0.0546%" height="15" fill="rgb(235,228,7)" fg:x="35471" fg:w="53"/><text x="36.7841%" y="383.50"></text></g><g><title>irq_exit_rcu (15 samples, 0.02%)</title><rect x="36.5908%" y="357" width="0.0154%" height="15" fill="rgb(245,175,0)" fg:x="35526" fg:w="15"/><text x="36.8408%" y="367.50"></text></g><g><title>__softirqentry_text_start (15 samples, 0.02%)</title><rect x="36.5908%" y="341" width="0.0154%" height="15" fill="rgb(208,168,36)" fg:x="35526" fg:w="15"/><text x="36.8408%" y="351.50"></text></g><g><title>run_timer_softirq (14 samples, 0.01%)</title><rect x="36.5918%" y="325" width="0.0144%" height="15" fill="rgb(246,171,24)" fg:x="35527" fg:w="14"/><text x="36.8418%" y="335.50"></text></g><g><title>__run_timers.part.0 (14 samples, 0.01%)</title><rect x="36.5918%" y="309" width="0.0144%" height="15" fill="rgb(215,142,24)" fg:x="35527" fg:w="14"/><text x="36.8418%" y="319.50"></text></g><g><title>call_timer_fn (14 samples, 0.01%)</title><rect x="36.5918%" y="293" width="0.0144%" height="15" fill="rgb(250,187,7)" fg:x="35527" fg:w="14"/><text x="36.8418%" y="303.50"></text></g><g><title>vbg_heartbeat_timer (14 samples, 0.01%)</title><rect x="36.5918%" y="277" width="0.0144%" height="15" fill="rgb(228,66,33)" fg:x="35527" fg:w="14"/><text x="36.8418%" y="287.50"></text></g><g><title>vbg_req_perform (14 samples, 0.01%)</title><rect x="36.5918%" y="261" width="0.0144%" height="15" fill="rgb(234,215,21)" fg:x="35527" fg:w="14"/><text x="36.8418%" y="271.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (16 samples, 0.02%)</title><rect x="36.5908%" y="389" width="0.0165%" height="15" fill="rgb(222,191,20)" fg:x="35526" fg:w="16"/><text x="36.8408%" y="399.50"></text></g><g><title>sysvec_apic_timer_interrupt (16 samples, 0.02%)</title><rect x="36.5908%" y="373" width="0.0165%" height="15" fill="rgb(245,79,54)" fg:x="35526" fg:w="16"/><text x="36.8408%" y="383.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for usize&gt;::clone (32 samples, 0.03%)</title><rect x="36.6073%" y="389" width="0.0330%" height="15" fill="rgb(240,10,37)" fg:x="35542" fg:w="32"/><text x="36.8573%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (398 samples, 0.41%)</title><rect x="36.6402%" y="389" width="0.4099%" height="15" fill="rgb(214,192,32)" fg:x="35574" fg:w="398"/><text x="36.8902%" y="399.50"></text></g><g><title>irq_exit_rcu (31 samples, 0.03%)</title><rect x="42.4431%" y="341" width="0.0319%" height="15" fill="rgb(209,36,54)" fg:x="41208" fg:w="31"/><text x="42.6931%" y="351.50"></text></g><g><title>__softirqentry_text_start (31 samples, 0.03%)</title><rect x="42.4431%" y="325" width="0.0319%" height="15" fill="rgb(220,10,11)" fg:x="41208" fg:w="31"/><text x="42.6931%" y="335.50"></text></g><g><title>run_timer_softirq (30 samples, 0.03%)</title><rect x="42.4441%" y="309" width="0.0309%" height="15" fill="rgb(221,106,17)" fg:x="41209" fg:w="30"/><text x="42.6941%" y="319.50"></text></g><g><title>__run_timers.part.0 (30 samples, 0.03%)</title><rect x="42.4441%" y="293" width="0.0309%" height="15" fill="rgb(251,142,44)" fg:x="41209" fg:w="30"/><text x="42.6941%" y="303.50"></text></g><g><title>call_timer_fn (30 samples, 0.03%)</title><rect x="42.4441%" y="277" width="0.0309%" height="15" fill="rgb(238,13,15)" fg:x="41209" fg:w="30"/><text x="42.6941%" y="287.50"></text></g><g><title>vbg_heartbeat_timer (30 samples, 0.03%)</title><rect x="42.4441%" y="261" width="0.0309%" height="15" fill="rgb(208,107,27)" fg:x="41209" fg:w="30"/><text x="42.6941%" y="271.50"></text></g><g><title>vbg_req_perform (30 samples, 0.03%)</title><rect x="42.4441%" y="245" width="0.0309%" height="15" fill="rgb(205,136,37)" fg:x="41209" fg:w="30"/><text x="42.6941%" y="255.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (33 samples, 0.03%)</title><rect x="42.4431%" y="373" width="0.0340%" height="15" fill="rgb(250,205,27)" fg:x="41208" fg:w="33"/><text x="42.6931%" y="383.50"></text></g><g><title>sysvec_apic_timer_interrupt (33 samples, 0.03%)</title><rect x="42.4431%" y="357" width="0.0340%" height="15" fill="rgb(210,80,43)" fg:x="41208" fg:w="33"/><text x="42.6931%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (10,208 samples, 10.51%)</title><rect x="33.4988%" y="421" width="10.5140%" height="15" fill="rgb(247,160,36)" fg:x="32524" fg:w="10208"/><text x="33.7488%" y="431.50">core::iter::ran..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (10,182 samples, 10.49%)</title><rect x="33.5256%" y="405" width="10.4872%" height="15" fill="rgb(234,13,49)" fg:x="32550" fg:w="10182"/><text x="33.7756%" y="415.50">&lt;core::ops::ran..</text></g><g><title>core::mem::replace (6,760 samples, 6.96%)</title><rect x="37.0502%" y="389" width="6.9626%" height="15" fill="rgb(234,122,0)" fg:x="35972" fg:w="6760"/><text x="37.3002%" y="399.50">core::mem..</text></g><g><title>core::ptr::read (1,491 samples, 1.54%)</title><rect x="42.4771%" y="373" width="1.5357%" height="15" fill="rgb(207,146,38)" fg:x="41241" fg:w="1491"/><text x="42.7271%" y="383.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (14 samples, 0.01%)</title><rect x="46.1458%" y="405" width="0.0144%" height="15" fill="rgb(207,177,25)" fg:x="44803" fg:w="14"/><text x="46.3958%" y="415.50"></text></g><g><title>sysvec_apic_timer_interrupt (14 samples, 0.01%)</title><rect x="46.1458%" y="389" width="0.0144%" height="15" fill="rgb(211,178,42)" fg:x="44803" fg:w="14"/><text x="46.3958%" y="399.50"></text></g><g><title>irq_exit_rcu (14 samples, 0.01%)</title><rect x="46.1458%" y="373" width="0.0144%" height="15" fill="rgb(230,69,54)" fg:x="44803" fg:w="14"/><text x="46.3958%" y="383.50"></text></g><g><title>__softirqentry_text_start (14 samples, 0.01%)</title><rect x="46.1458%" y="357" width="0.0144%" height="15" fill="rgb(214,135,41)" fg:x="44803" fg:w="14"/><text x="46.3958%" y="367.50"></text></g><g><title>run_timer_softirq (14 samples, 0.01%)</title><rect x="46.1458%" y="341" width="0.0144%" height="15" fill="rgb(237,67,25)" fg:x="44803" fg:w="14"/><text x="46.3958%" y="351.50"></text></g><g><title>__run_timers.part.0 (14 samples, 0.01%)</title><rect x="46.1458%" y="325" width="0.0144%" height="15" fill="rgb(222,189,50)" fg:x="44803" fg:w="14"/><text x="46.3958%" y="335.50"></text></g><g><title>call_timer_fn (14 samples, 0.01%)</title><rect x="46.1458%" y="309" width="0.0144%" height="15" fill="rgb(245,148,34)" fg:x="44803" fg:w="14"/><text x="46.3958%" y="319.50"></text></g><g><title>vbg_heartbeat_timer (14 samples, 0.01%)</title><rect x="46.1458%" y="293" width="0.0144%" height="15" fill="rgb(222,29,6)" fg:x="44803" fg:w="14"/><text x="46.3958%" y="303.50"></text></g><g><title>vbg_req_perform (14 samples, 0.01%)</title><rect x="46.1458%" y="277" width="0.0144%" height="15" fill="rgb(221,189,43)" fg:x="44803" fg:w="14"/><text x="46.3958%" y="287.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2,249 samples, 2.32%)</title><rect x="44.0138%" y="421" width="2.3164%" height="15" fill="rgb(207,36,27)" fg:x="42733" fg:w="2249"/><text x="44.2638%" y="431.50">c..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::lt (165 samples, 0.17%)</title><rect x="46.1603%" y="405" width="0.1699%" height="15" fill="rgb(217,90,24)" fg:x="44817" fg:w="165"/><text x="46.4103%" y="415.50"></text></g><g><title>irq_exit_rcu (17 samples, 0.02%)</title><rect x="49.4500%" y="357" width="0.0175%" height="15" fill="rgb(224,66,35)" fg:x="48011" fg:w="17"/><text x="49.7000%" y="367.50"></text></g><g><title>__softirqentry_text_start (17 samples, 0.02%)</title><rect x="49.4500%" y="341" width="0.0175%" height="15" fill="rgb(221,13,50)" fg:x="48011" fg:w="17"/><text x="49.7000%" y="351.50"></text></g><g><title>run_timer_softirq (17 samples, 0.02%)</title><rect x="49.4500%" y="325" width="0.0175%" height="15" fill="rgb(236,68,49)" fg:x="48011" fg:w="17"/><text x="49.7000%" y="335.50"></text></g><g><title>__run_timers.part.0 (17 samples, 0.02%)</title><rect x="49.4500%" y="309" width="0.0175%" height="15" fill="rgb(229,146,28)" fg:x="48011" fg:w="17"/><text x="49.7000%" y="319.50"></text></g><g><title>call_timer_fn (17 samples, 0.02%)</title><rect x="49.4500%" y="293" width="0.0175%" height="15" fill="rgb(225,31,38)" fg:x="48011" fg:w="17"/><text x="49.7000%" y="303.50"></text></g><g><title>vbg_heartbeat_timer (17 samples, 0.02%)</title><rect x="49.4500%" y="277" width="0.0175%" height="15" fill="rgb(250,208,3)" fg:x="48011" fg:w="17"/><text x="49.7000%" y="287.50"></text></g><g><title>vbg_req_perform (17 samples, 0.02%)</title><rect x="49.4500%" y="261" width="0.0175%" height="15" fill="rgb(246,54,23)" fg:x="48011" fg:w="17"/><text x="49.7000%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3,047 samples, 3.14%)</title><rect x="46.3302%" y="421" width="3.1383%" height="15" fill="rgb(243,76,11)" fg:x="44982" fg:w="3047"/><text x="46.5802%" y="431.50">cor..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2,724 samples, 2.81%)</title><rect x="46.6629%" y="405" width="2.8056%" height="15" fill="rgb(245,21,50)" fg:x="45305" fg:w="2724"/><text x="46.9129%" y="415.50">co..</text></g><g><title>asm_sysvec_apic_timer_interrupt (18 samples, 0.02%)</title><rect x="49.4500%" y="389" width="0.0185%" height="15" fill="rgb(228,9,43)" fg:x="48011" fg:w="18"/><text x="49.7000%" y="399.50"></text></g><g><title>sysvec_apic_timer_interrupt (18 samples, 0.02%)</title><rect x="49.4500%" y="373" width="0.0185%" height="15" fill="rgb(208,100,47)" fg:x="48011" fg:w="18"/><text x="49.7000%" y="383.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (47 samples, 0.05%)</title><rect x="49.5612%" y="405" width="0.0484%" height="15" fill="rgb(232,26,8)" fg:x="48119" fg:w="47"/><text x="49.8112%" y="415.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (47 samples, 0.05%)</title><rect x="49.5612%" y="389" width="0.0484%" height="15" fill="rgb(216,166,38)" fg:x="48119" fg:w="47"/><text x="49.8112%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (758 samples, 0.78%)</title><rect x="49.4685%" y="421" width="0.7807%" height="15" fill="rgb(251,202,51)" fg:x="48029" fg:w="758"/><text x="49.7185%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (621 samples, 0.64%)</title><rect x="49.6096%" y="405" width="0.6396%" height="15" fill="rgb(254,216,34)" fg:x="48166" fg:w="621"/><text x="49.8596%" y="415.50"></text></g><g><title>core::ptr::read (34 samples, 0.04%)</title><rect x="50.2513%" y="421" width="0.0350%" height="15" fill="rgb(251,32,27)" fg:x="48789" fg:w="34"/><text x="50.5013%" y="431.50"></text></g><g><title>core::ptr::swap (21 samples, 0.02%)</title><rect x="50.2863%" y="421" width="0.0216%" height="15" fill="rgb(208,127,28)" fg:x="48823" fg:w="21"/><text x="50.5363%" y="431.50"></text></g><g><title>core::slice::sort::partition (20,817 samples, 21.44%)</title><rect x="28.9371%" y="453" width="21.4409%" height="15" fill="rgb(224,137,22)" fg:x="28095" fg:w="20817"/><text x="29.1871%" y="463.50">core::slice::sort::partition</text></g><g><title>core::slice::sort::partition_in_blocks (20,766 samples, 21.39%)</title><rect x="28.9896%" y="437" width="21.3884%" height="15" fill="rgb(254,70,32)" fg:x="28146" fg:w="20766"/><text x="29.2396%" y="447.50">core::slice::sort::partition_in_bl..</text></g><g><title>core::slice::sort::partition_in_blocks::width (68 samples, 0.07%)</title><rect x="50.3080%" y="421" width="0.0700%" height="15" fill="rgb(229,75,37)" fg:x="48844" fg:w="68"/><text x="50.5580%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::addr (11 samples, 0.01%)</title><rect x="50.3667%" y="405" width="0.0113%" height="15" fill="rgb(252,64,23)" fg:x="48901" fg:w="11"/><text x="50.6167%" y="415.50"></text></g><g><title>core::ops::function::FnMut::call_mut (10 samples, 0.01%)</title><rect x="50.3904%" y="437" width="0.0103%" height="15" fill="rgb(232,162,48)" fg:x="48924" fg:w="10"/><text x="50.6404%" y="447.50"></text></g><g><title>core::slice::sort::partition_equal (27 samples, 0.03%)</title><rect x="50.3780%" y="453" width="0.0278%" height="15" fill="rgb(246,160,12)" fg:x="48912" fg:w="27"/><text x="50.6280%" y="463.50"></text></g><g><title>core::cmp::min (17 samples, 0.02%)</title><rect x="50.4480%" y="437" width="0.0175%" height="15" fill="rgb(247,166,0)" fg:x="48980" fg:w="17"/><text x="50.6980%" y="447.50"></text></g><g><title>core::cmp::Ord::min (17 samples, 0.02%)</title><rect x="50.4480%" y="421" width="0.0175%" height="15" fill="rgb(249,219,21)" fg:x="48980" fg:w="17"/><text x="50.6980%" y="431.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (15 samples, 0.02%)</title><rect x="50.4851%" y="373" width="0.0154%" height="15" fill="rgb(205,209,3)" fg:x="49016" fg:w="15"/><text x="50.7351%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut (33 samples, 0.03%)</title><rect x="50.4676%" y="437" width="0.0340%" height="15" fill="rgb(243,44,1)" fg:x="48999" fg:w="33"/><text x="50.7176%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut_unchecked (27 samples, 0.03%)</title><rect x="50.4738%" y="421" width="0.0278%" height="15" fill="rgb(206,159,16)" fg:x="49005" fg:w="27"/><text x="50.7238%" y="431.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (18 samples, 0.02%)</title><rect x="50.4831%" y="405" width="0.0185%" height="15" fill="rgb(244,77,30)" fg:x="49014" fg:w="18"/><text x="50.7331%" y="415.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (18 samples, 0.02%)</title><rect x="50.4831%" y="389" width="0.0185%" height="15" fill="rgb(218,69,12)" fg:x="49014" fg:w="18"/><text x="50.7331%" y="399.50"></text></g><g><title>core::ops::function::FnMut::call_mut (19 samples, 0.02%)</title><rect x="50.6108%" y="389" width="0.0196%" height="15" fill="rgb(212,87,7)" fg:x="49138" fg:w="19"/><text x="50.8608%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (19 samples, 0.02%)</title><rect x="50.6345%" y="389" width="0.0196%" height="15" fill="rgb(245,114,25)" fg:x="49161" fg:w="19"/><text x="50.8845%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (16 samples, 0.02%)</title><rect x="50.6376%" y="373" width="0.0165%" height="15" fill="rgb(210,61,42)" fg:x="49164" fg:w="16"/><text x="50.8876%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (14 samples, 0.01%)</title><rect x="50.6396%" y="357" width="0.0144%" height="15" fill="rgb(211,52,33)" fg:x="49166" fg:w="14"/><text x="50.8896%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (12 samples, 0.01%)</title><rect x="50.6417%" y="341" width="0.0124%" height="15" fill="rgb(234,58,33)" fg:x="49168" fg:w="12"/><text x="50.8917%" y="351.50"></text></g><g><title>core::ops::function::FnMut::call_mut (52 samples, 0.05%)</title><rect x="50.7261%" y="373" width="0.0536%" height="15" fill="rgb(220,115,36)" fg:x="49250" fg:w="52"/><text x="50.9761%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (34 samples, 0.04%)</title><rect x="50.8013%" y="341" width="0.0350%" height="15" fill="rgb(243,153,54)" fg:x="49323" fg:w="34"/><text x="51.0513%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (25 samples, 0.03%)</title><rect x="50.8106%" y="325" width="0.0257%" height="15" fill="rgb(251,47,18)" fg:x="49332" fg:w="25"/><text x="51.0606%" y="335.50"></text></g><g><title>core::slice::sort::choose_pivot (316 samples, 0.33%)</title><rect x="50.5119%" y="437" width="0.3255%" height="15" fill="rgb(242,102,42)" fg:x="49042" fg:w="316"/><text x="50.7619%" y="447.50"></text></g><g><title>core::slice::sort::choose_pivot::{{closure}} (298 samples, 0.31%)</title><rect x="50.5304%" y="421" width="0.3069%" height="15" fill="rgb(234,31,38)" fg:x="49060" fg:w="298"/><text x="50.7804%" y="431.50"></text></g><g><title>core::slice::sort::choose_pivot::{{closure}} (277 samples, 0.29%)</title><rect x="50.5521%" y="405" width="0.2853%" height="15" fill="rgb(221,117,51)" fg:x="49081" fg:w="277"/><text x="50.8021%" y="415.50"></text></g><g><title>core::slice::sort::choose_pivot::{{closure}} (178 samples, 0.18%)</title><rect x="50.6540%" y="389" width="0.1833%" height="15" fill="rgb(212,20,18)" fg:x="49180" fg:w="178"/><text x="50.9040%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (47 samples, 0.05%)</title><rect x="50.7890%" y="373" width="0.0484%" height="15" fill="rgb(245,133,36)" fg:x="49311" fg:w="47"/><text x="51.0390%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (43 samples, 0.04%)</title><rect x="50.7931%" y="357" width="0.0443%" height="15" fill="rgb(212,6,19)" fg:x="49315" fg:w="43"/><text x="51.0431%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (29 samples, 0.03%)</title><rect x="50.8425%" y="421" width="0.0299%" height="15" fill="rgb(218,1,36)" fg:x="49363" fg:w="29"/><text x="51.0925%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (28 samples, 0.03%)</title><rect x="50.8435%" y="405" width="0.0288%" height="15" fill="rgb(246,84,54)" fg:x="49364" fg:w="28"/><text x="51.0935%" y="415.50"></text></g><g><title>core::mem::replace (13 samples, 0.01%)</title><rect x="50.8590%" y="389" width="0.0134%" height="15" fill="rgb(242,110,6)" fg:x="49379" fg:w="13"/><text x="51.1090%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (40 samples, 0.04%)</title><rect x="50.8724%" y="421" width="0.0412%" height="15" fill="rgb(214,47,5)" fg:x="49392" fg:w="40"/><text x="51.1224%" y="431.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (38 samples, 0.04%)</title><rect x="50.8744%" y="405" width="0.0391%" height="15" fill="rgb(218,159,25)" fg:x="49394" fg:w="38"/><text x="51.1244%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (36 samples, 0.04%)</title><rect x="50.8765%" y="389" width="0.0371%" height="15" fill="rgb(215,211,28)" fg:x="49396" fg:w="36"/><text x="51.1265%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (15 samples, 0.02%)</title><rect x="50.8981%" y="373" width="0.0154%" height="15" fill="rgb(238,59,32)" fg:x="49417" fg:w="15"/><text x="51.1481%" y="383.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::backward_unchecked (14 samples, 0.01%)</title><rect x="50.9795%" y="357" width="0.0144%" height="15" fill="rgb(226,82,3)" fg:x="49496" fg:w="14"/><text x="51.2295%" y="367.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for usize&gt;::clone (15 samples, 0.02%)</title><rect x="50.9939%" y="357" width="0.0154%" height="15" fill="rgb(240,164,32)" fg:x="49510" fg:w="15"/><text x="51.2439%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (43 samples, 0.04%)</title><rect x="50.9671%" y="405" width="0.0443%" height="15" fill="rgb(232,46,7)" fg:x="49484" fg:w="43"/><text x="51.2171%" y="415.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (43 samples, 0.04%)</title><rect x="50.9671%" y="389" width="0.0443%" height="15" fill="rgb(229,129,53)" fg:x="49484" fg:w="43"/><text x="51.2171%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (42 samples, 0.04%)</title><rect x="50.9682%" y="373" width="0.0433%" height="15" fill="rgb(234,188,29)" fg:x="49485" fg:w="42"/><text x="51.2182%" y="383.50"></text></g><g><title>core::ops::function::FnMut::call_mut (36 samples, 0.04%)</title><rect x="51.0135%" y="405" width="0.0371%" height="15" fill="rgb(246,141,4)" fg:x="49529" fg:w="36"/><text x="51.2635%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (12 samples, 0.01%)</title><rect x="51.0516%" y="405" width="0.0124%" height="15" fill="rgb(229,23,39)" fg:x="49566" fg:w="12"/><text x="51.3016%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (11 samples, 0.01%)</title><rect x="51.0526%" y="389" width="0.0113%" height="15" fill="rgb(206,12,3)" fg:x="49567" fg:w="11"/><text x="51.3026%" y="399.50"></text></g><g><title>core::slice::sort::insertion_sort (232 samples, 0.24%)</title><rect x="50.8374%" y="437" width="0.2390%" height="15" fill="rgb(252,226,20)" fg:x="49358" fg:w="232"/><text x="51.0874%" y="447.50"></text></g><g><title>core::slice::sort::shift_tail (158 samples, 0.16%)</title><rect x="50.9136%" y="421" width="0.1627%" height="15" fill="rgb(216,123,35)" fg:x="49432" fg:w="158"/><text x="51.1636%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (11 samples, 0.01%)</title><rect x="51.0650%" y="405" width="0.0113%" height="15" fill="rgb(212,68,40)" fg:x="49579" fg:w="11"/><text x="51.3150%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (11 samples, 0.01%)</title><rect x="51.1052%" y="421" width="0.0113%" height="15" fill="rgb(254,125,32)" fg:x="49618" fg:w="11"/><text x="51.3552%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (10 samples, 0.01%)</title><rect x="51.1062%" y="405" width="0.0103%" height="15" fill="rgb(253,97,22)" fg:x="49619" fg:w="10"/><text x="51.3562%" y="415.50"></text></g><g><title>core::slice::sort::partial_insertion_sort (49 samples, 0.05%)</title><rect x="51.0763%" y="437" width="0.0505%" height="15" fill="rgb(241,101,14)" fg:x="49590" fg:w="49"/><text x="51.3263%" y="447.50"></text></g><g><title>core::ops::function::FnMut::call_mut (37 samples, 0.04%)</title><rect x="51.2215%" y="421" width="0.0381%" height="15" fill="rgb(238,103,29)" fg:x="49731" fg:w="37"/><text x="51.4715%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut (25 samples, 0.03%)</title><rect x="51.2700%" y="421" width="0.0257%" height="15" fill="rgb(233,195,47)" fg:x="49778" fg:w="25"/><text x="51.5200%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut_unchecked (23 samples, 0.02%)</title><rect x="51.2720%" y="405" width="0.0237%" height="15" fill="rgb(246,218,30)" fg:x="49780" fg:w="23"/><text x="51.5220%" y="415.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (11 samples, 0.01%)</title><rect x="51.2844%" y="389" width="0.0113%" height="15" fill="rgb(219,145,47)" fg:x="49792" fg:w="11"/><text x="51.5344%" y="399.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (11 samples, 0.01%)</title><rect x="51.2844%" y="373" width="0.0113%" height="15" fill="rgb(243,12,26)" fg:x="49792" fg:w="11"/><text x="51.5344%" y="383.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (10 samples, 0.01%)</title><rect x="51.2854%" y="357" width="0.0103%" height="15" fill="rgb(214,87,16)" fg:x="49793" fg:w="10"/><text x="51.5354%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (16 samples, 0.02%)</title><rect x="51.2957%" y="421" width="0.0165%" height="15" fill="rgb(208,99,42)" fg:x="49803" fg:w="16"/><text x="51.5457%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (29 samples, 0.03%)</title><rect x="51.3122%" y="421" width="0.0299%" height="15" fill="rgb(253,99,2)" fg:x="49819" fg:w="29"/><text x="51.5622%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (27 samples, 0.03%)</title><rect x="51.3142%" y="405" width="0.0278%" height="15" fill="rgb(220,168,23)" fg:x="49821" fg:w="27"/><text x="51.5642%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (13 samples, 0.01%)</title><rect x="51.3287%" y="389" width="0.0134%" height="15" fill="rgb(242,38,24)" fg:x="49835" fg:w="13"/><text x="51.5787%" y="399.50"></text></g><g><title>[libc.so.6] (16 samples, 0.02%)</title><rect x="55.0221%" y="405" width="0.0165%" height="15" fill="rgb(225,182,9)" fg:x="53421" fg:w="16"/><text x="55.2721%" y="415.50"></text></g><g><title>irq_exit_rcu (15 samples, 0.02%)</title><rect x="55.0427%" y="373" width="0.0154%" height="15" fill="rgb(243,178,37)" fg:x="53441" fg:w="15"/><text x="55.2927%" y="383.50"></text></g><g><title>__softirqentry_text_start (15 samples, 0.02%)</title><rect x="55.0427%" y="357" width="0.0154%" height="15" fill="rgb(232,139,19)" fg:x="53441" fg:w="15"/><text x="55.2927%" y="367.50"></text></g><g><title>run_timer_softirq (14 samples, 0.01%)</title><rect x="55.0438%" y="341" width="0.0144%" height="15" fill="rgb(225,201,24)" fg:x="53442" fg:w="14"/><text x="55.2938%" y="351.50"></text></g><g><title>__run_timers.part.0 (14 samples, 0.01%)</title><rect x="55.0438%" y="325" width="0.0144%" height="15" fill="rgb(221,47,46)" fg:x="53442" fg:w="14"/><text x="55.2938%" y="335.50"></text></g><g><title>call_timer_fn (14 samples, 0.01%)</title><rect x="55.0438%" y="309" width="0.0144%" height="15" fill="rgb(249,23,13)" fg:x="53442" fg:w="14"/><text x="55.2938%" y="319.50"></text></g><g><title>vbg_heartbeat_timer (14 samples, 0.01%)</title><rect x="55.0438%" y="293" width="0.0144%" height="15" fill="rgb(219,9,5)" fg:x="53442" fg:w="14"/><text x="55.2938%" y="303.50"></text></g><g><title>vbg_req_perform (14 samples, 0.01%)</title><rect x="55.0438%" y="277" width="0.0144%" height="15" fill="rgb(254,171,16)" fg:x="53442" fg:w="14"/><text x="55.2938%" y="287.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (16 samples, 0.02%)</title><rect x="55.0427%" y="405" width="0.0165%" height="15" fill="rgb(230,171,20)" fg:x="53441" fg:w="16"/><text x="55.2927%" y="415.50"></text></g><g><title>sysvec_apic_timer_interrupt (16 samples, 0.02%)</title><rect x="55.0427%" y="389" width="0.0165%" height="15" fill="rgb(210,71,41)" fg:x="53441" fg:w="16"/><text x="55.2927%" y="399.50"></text></g><g><title>core::cmp::min (85 samples, 0.09%)</title><rect x="55.0592%" y="405" width="0.0875%" height="15" fill="rgb(206,173,20)" fg:x="53457" fg:w="85"/><text x="55.3092%" y="415.50"></text></g><g><title>core::cmp::Ord::min (85 samples, 0.09%)</title><rect x="55.0592%" y="389" width="0.0875%" height="15" fill="rgb(233,88,34)" fg:x="53457" fg:w="85"/><text x="55.3092%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (25 samples, 0.03%)</title><rect x="55.1210%" y="373" width="0.0257%" height="15" fill="rgb(223,209,46)" fg:x="53517" fg:w="25"/><text x="55.3710%" y="383.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;u8&gt; for usize&gt;::from (52 samples, 0.05%)</title><rect x="55.1468%" y="405" width="0.0536%" height="15" fill="rgb(250,43,18)" fg:x="53542" fg:w="52"/><text x="55.3968%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (235 samples, 0.24%)</title><rect x="55.2003%" y="405" width="0.2420%" height="15" fill="rgb(208,13,10)" fg:x="53594" fg:w="235"/><text x="55.4503%" y="415.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (434 samples, 0.45%)</title><rect x="57.6826%" y="373" width="0.4470%" height="15" fill="rgb(212,200,36)" fg:x="56004" fg:w="434"/><text x="57.9326%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (38 samples, 0.04%)</title><rect x="58.0904%" y="357" width="0.0391%" height="15" fill="rgb(225,90,30)" fg:x="56400" fg:w="38"/><text x="58.3404%" y="367.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (12 samples, 0.01%)</title><rect x="58.1306%" y="373" width="0.0124%" height="15" fill="rgb(236,182,39)" fg:x="56439" fg:w="12"/><text x="58.3806%" y="383.50"></text></g><g><title>sysvec_apic_timer_interrupt (12 samples, 0.01%)</title><rect x="58.1306%" y="357" width="0.0124%" height="15" fill="rgb(212,144,35)" fg:x="56439" fg:w="12"/><text x="58.3806%" y="367.50"></text></g><g><title>irq_exit_rcu (12 samples, 0.01%)</title><rect x="58.1306%" y="341" width="0.0124%" height="15" fill="rgb(228,63,44)" fg:x="56439" fg:w="12"/><text x="58.3806%" y="351.50"></text></g><g><title>__softirqentry_text_start (12 samples, 0.01%)</title><rect x="58.1306%" y="325" width="0.0124%" height="15" fill="rgb(228,109,6)" fg:x="56439" fg:w="12"/><text x="58.3806%" y="335.50"></text></g><g><title>run_timer_softirq (12 samples, 0.01%)</title><rect x="58.1306%" y="309" width="0.0124%" height="15" fill="rgb(238,117,24)" fg:x="56439" fg:w="12"/><text x="58.3806%" y="319.50"></text></g><g><title>__run_timers.part.0 (12 samples, 0.01%)</title><rect x="58.1306%" y="293" width="0.0124%" height="15" fill="rgb(242,26,26)" fg:x="56439" fg:w="12"/><text x="58.3806%" y="303.50"></text></g><g><title>call_timer_fn (12 samples, 0.01%)</title><rect x="58.1306%" y="277" width="0.0124%" height="15" fill="rgb(221,92,48)" fg:x="56439" fg:w="12"/><text x="58.3806%" y="287.50"></text></g><g><title>vbg_heartbeat_timer (12 samples, 0.01%)</title><rect x="58.1306%" y="261" width="0.0124%" height="15" fill="rgb(209,209,32)" fg:x="56439" fg:w="12"/><text x="58.3806%" y="271.50"></text></g><g><title>vbg_req_perform (12 samples, 0.01%)</title><rect x="58.1306%" y="245" width="0.0124%" height="15" fill="rgb(221,70,22)" fg:x="56439" fg:w="12"/><text x="58.3806%" y="255.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for usize&gt;::clone (35 samples, 0.04%)</title><rect x="58.1430%" y="373" width="0.0360%" height="15" fill="rgb(248,145,5)" fg:x="56451" fg:w="35"/><text x="58.3930%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (350 samples, 0.36%)</title><rect x="58.1790%" y="373" width="0.3605%" height="15" fill="rgb(226,116,26)" fg:x="56486" fg:w="350"/><text x="58.4290%" y="383.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (19 samples, 0.02%)</title><rect x="63.4669%" y="357" width="0.0196%" height="15" fill="rgb(244,5,17)" fg:x="61620" fg:w="19"/><text x="63.7169%" y="367.50"></text></g><g><title>sysvec_apic_timer_interrupt (19 samples, 0.02%)</title><rect x="63.4669%" y="341" width="0.0196%" height="15" fill="rgb(252,159,33)" fg:x="61620" fg:w="19"/><text x="63.7169%" y="351.50"></text></g><g><title>irq_exit_rcu (19 samples, 0.02%)</title><rect x="63.4669%" y="325" width="0.0196%" height="15" fill="rgb(206,71,0)" fg:x="61620" fg:w="19"/><text x="63.7169%" y="335.50"></text></g><g><title>__softirqentry_text_start (19 samples, 0.02%)</title><rect x="63.4669%" y="309" width="0.0196%" height="15" fill="rgb(233,118,54)" fg:x="61620" fg:w="19"/><text x="63.7169%" y="319.50"></text></g><g><title>run_timer_softirq (18 samples, 0.02%)</title><rect x="63.4679%" y="293" width="0.0185%" height="15" fill="rgb(234,83,48)" fg:x="61621" fg:w="18"/><text x="63.7179%" y="303.50"></text></g><g><title>__run_timers.part.0 (18 samples, 0.02%)</title><rect x="63.4679%" y="277" width="0.0185%" height="15" fill="rgb(228,3,54)" fg:x="61621" fg:w="18"/><text x="63.7179%" y="287.50"></text></g><g><title>call_timer_fn (18 samples, 0.02%)</title><rect x="63.4679%" y="261" width="0.0185%" height="15" fill="rgb(226,155,13)" fg:x="61621" fg:w="18"/><text x="63.7179%" y="271.50"></text></g><g><title>vbg_heartbeat_timer (18 samples, 0.02%)</title><rect x="63.4679%" y="245" width="0.0185%" height="15" fill="rgb(241,28,37)" fg:x="61621" fg:w="18"/><text x="63.7179%" y="255.50"></text></g><g><title>vbg_req_perform (18 samples, 0.02%)</title><rect x="63.4679%" y="229" width="0.0185%" height="15" fill="rgb(233,93,10)" fg:x="61621" fg:w="18"/><text x="63.7179%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (9,146 samples, 9.42%)</title><rect x="55.4795%" y="389" width="9.4201%" height="15" fill="rgb(225,113,19)" fg:x="53865" fg:w="9146"/><text x="55.7295%" y="399.50">&lt;core::ops::r..</text></g><g><title>core::mem::replace (6,175 samples, 6.36%)</title><rect x="58.5395%" y="373" width="6.3601%" height="15" fill="rgb(241,2,18)" fg:x="56836" fg:w="6175"/><text x="58.7895%" y="383.50">core::me..</text></g><g><title>core::ptr::read (1,372 samples, 1.41%)</title><rect x="63.4865%" y="357" width="1.4131%" height="15" fill="rgb(228,207,21)" fg:x="61639" fg:w="1372"/><text x="63.7365%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (9,183 samples, 9.46%)</title><rect x="55.4424%" y="405" width="9.4582%" height="15" fill="rgb(213,211,35)" fg:x="53829" fg:w="9183"/><text x="55.6924%" y="415.50">core::iter::ra..</text></g><g><title>vbg_heartbeat_timer (11 samples, 0.01%)</title><rect x="66.8740%" y="277" width="0.0113%" height="15" fill="rgb(209,83,10)" fg:x="64928" fg:w="11"/><text x="67.1240%" y="287.50"></text></g><g><title>vbg_req_perform (11 samples, 0.01%)</title><rect x="66.8740%" y="261" width="0.0113%" height="15" fill="rgb(209,164,1)" fg:x="64928" fg:w="11"/><text x="67.1240%" y="271.50"></text></g><g><title>irq_exit_rcu (12 samples, 0.01%)</title><rect x="66.8740%" y="357" width="0.0124%" height="15" fill="rgb(213,184,43)" fg:x="64928" fg:w="12"/><text x="67.1240%" y="367.50"></text></g><g><title>__softirqentry_text_start (12 samples, 0.01%)</title><rect x="66.8740%" y="341" width="0.0124%" height="15" fill="rgb(231,61,34)" fg:x="64928" fg:w="12"/><text x="67.1240%" y="351.50"></text></g><g><title>run_timer_softirq (12 samples, 0.01%)</title><rect x="66.8740%" y="325" width="0.0124%" height="15" fill="rgb(235,75,3)" fg:x="64928" fg:w="12"/><text x="67.1240%" y="335.50"></text></g><g><title>__run_timers.part.0 (12 samples, 0.01%)</title><rect x="66.8740%" y="309" width="0.0124%" height="15" fill="rgb(220,106,47)" fg:x="64928" fg:w="12"/><text x="67.1240%" y="319.50"></text></g><g><title>call_timer_fn (12 samples, 0.01%)</title><rect x="66.8740%" y="293" width="0.0124%" height="15" fill="rgb(210,196,33)" fg:x="64928" fg:w="12"/><text x="67.1240%" y="303.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (13 samples, 0.01%)</title><rect x="66.8740%" y="389" width="0.0134%" height="15" fill="rgb(229,154,42)" fg:x="64928" fg:w="13"/><text x="67.1240%" y="399.50"></text></g><g><title>sysvec_apic_timer_interrupt (13 samples, 0.01%)</title><rect x="66.8740%" y="373" width="0.0134%" height="15" fill="rgb(228,114,26)" fg:x="64928" fg:w="13"/><text x="67.1240%" y="383.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2,105 samples, 2.17%)</title><rect x="64.9037%" y="405" width="2.1681%" height="15" fill="rgb(208,144,1)" fg:x="63015" fg:w="2105"/><text x="65.1537%" y="415.50">c..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::lt (179 samples, 0.18%)</title><rect x="66.8874%" y="389" width="0.1844%" height="15" fill="rgb(239,112,37)" fg:x="64941" fg:w="179"/><text x="67.1374%" y="399.50"></text></g><g><title>irq_exit_rcu (12 samples, 0.01%)</title><rect x="69.7919%" y="341" width="0.0124%" height="15" fill="rgb(210,96,50)" fg:x="67761" fg:w="12"/><text x="70.0419%" y="351.50"></text></g><g><title>__softirqentry_text_start (12 samples, 0.01%)</title><rect x="69.7919%" y="325" width="0.0124%" height="15" fill="rgb(222,178,2)" fg:x="67761" fg:w="12"/><text x="70.0419%" y="335.50"></text></g><g><title>run_timer_softirq (12 samples, 0.01%)</title><rect x="69.7919%" y="309" width="0.0124%" height="15" fill="rgb(226,74,18)" fg:x="67761" fg:w="12"/><text x="70.0419%" y="319.50"></text></g><g><title>__run_timers.part.0 (12 samples, 0.01%)</title><rect x="69.7919%" y="293" width="0.0124%" height="15" fill="rgb(225,67,54)" fg:x="67761" fg:w="12"/><text x="70.0419%" y="303.50"></text></g><g><title>call_timer_fn (12 samples, 0.01%)</title><rect x="69.7919%" y="277" width="0.0124%" height="15" fill="rgb(251,92,32)" fg:x="67761" fg:w="12"/><text x="70.0419%" y="287.50"></text></g><g><title>vbg_heartbeat_timer (12 samples, 0.01%)</title><rect x="69.7919%" y="261" width="0.0124%" height="15" fill="rgb(228,149,22)" fg:x="67761" fg:w="12"/><text x="70.0419%" y="271.50"></text></g><g><title>vbg_req_perform (12 samples, 0.01%)</title><rect x="69.7919%" y="245" width="0.0124%" height="15" fill="rgb(243,54,13)" fg:x="67761" fg:w="12"/><text x="70.0419%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2,654 samples, 2.73%)</title><rect x="67.0718%" y="405" width="2.7335%" height="15" fill="rgb(243,180,28)" fg:x="65120" fg:w="2654"/><text x="67.3218%" y="415.50">co..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2,406 samples, 2.48%)</title><rect x="67.3272%" y="389" width="2.4781%" height="15" fill="rgb(208,167,24)" fg:x="65368" fg:w="2406"/><text x="67.5772%" y="399.50">co..</text></g><g><title>asm_sysvec_apic_timer_interrupt (13 samples, 0.01%)</title><rect x="69.7919%" y="373" width="0.0134%" height="15" fill="rgb(245,73,45)" fg:x="67761" fg:w="13"/><text x="70.0419%" y="383.50"></text></g><g><title>sysvec_apic_timer_interrupt (13 samples, 0.01%)</title><rect x="69.7919%" y="357" width="0.0134%" height="15" fill="rgb(237,203,48)" fg:x="67761" fg:w="13"/><text x="70.0419%" y="367.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (31 samples, 0.03%)</title><rect x="69.8857%" y="389" width="0.0319%" height="15" fill="rgb(211,197,16)" fg:x="67852" fg:w="31"/><text x="70.1357%" y="399.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (30 samples, 0.03%)</title><rect x="69.8867%" y="373" width="0.0309%" height="15" fill="rgb(243,99,51)" fg:x="67853" fg:w="30"/><text x="70.1367%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (674 samples, 0.69%)</title><rect x="69.8053%" y="405" width="0.6942%" height="15" fill="rgb(215,123,29)" fg:x="67774" fg:w="674"/><text x="70.0553%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (565 samples, 0.58%)</title><rect x="69.9176%" y="389" width="0.5819%" height="15" fill="rgb(239,186,37)" fg:x="67883" fg:w="565"/><text x="70.1676%" y="399.50"></text></g><g><title>core::ptr::read (32 samples, 0.03%)</title><rect x="70.5047%" y="405" width="0.0330%" height="15" fill="rgb(252,136,39)" fg:x="68453" fg:w="32"/><text x="70.7547%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (38 samples, 0.04%)</title><rect x="70.5912%" y="389" width="0.0391%" height="15" fill="rgb(223,213,32)" fg:x="68537" fg:w="38"/><text x="70.8412%" y="399.50"></text></g><g><title>core::ptr::swap (91 samples, 0.09%)</title><rect x="70.5376%" y="405" width="0.0937%" height="15" fill="rgb(233,115,5)" fg:x="68485" fg:w="91"/><text x="70.7876%" y="415.50"></text></g><g><title>core::slice::sort::partition (19,014 samples, 19.58%)</title><rect x="51.1268%" y="437" width="19.5839%" height="15" fill="rgb(207,226,44)" fg:x="49639" fg:w="19014"/><text x="51.3768%" y="447.50">core::slice::sort::partition</text></g><g><title>core::slice::sort::partition_in_blocks (18,805 samples, 19.37%)</title><rect x="51.3421%" y="421" width="19.3686%" height="15" fill="rgb(208,126,0)" fg:x="49848" fg:w="18805"/><text x="51.5921%" y="431.50">core::slice::sort::partition_i..</text></g><g><title>core::slice::sort::partition_in_blocks::width (77 samples, 0.08%)</title><rect x="70.6314%" y="405" width="0.0793%" height="15" fill="rgb(244,66,21)" fg:x="68576" fg:w="77"/><text x="70.8814%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::addr (11 samples, 0.01%)</title><rect x="70.6994%" y="389" width="0.0113%" height="15" fill="rgb(222,97,12)" fg:x="68642" fg:w="11"/><text x="70.9494%" y="399.50"></text></g><g><title>core::ops::function::FnMut::call_mut (69 samples, 0.07%)</title><rect x="70.9599%" y="421" width="0.0711%" height="15" fill="rgb(219,213,19)" fg:x="68895" fg:w="69"/><text x="71.2099%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::lt (14 samples, 0.01%)</title><rect x="71.0166%" y="405" width="0.0144%" height="15" fill="rgb(252,169,30)" fg:x="68950" fg:w="14"/><text x="71.2666%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (16 samples, 0.02%)</title><rect x="71.0475%" y="421" width="0.0165%" height="15" fill="rgb(206,32,51)" fg:x="68980" fg:w="16"/><text x="71.2975%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (16 samples, 0.02%)</title><rect x="71.0475%" y="405" width="0.0165%" height="15" fill="rgb(250,172,42)" fg:x="68980" fg:w="16"/><text x="71.2975%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (15 samples, 0.02%)</title><rect x="71.0485%" y="389" width="0.0154%" height="15" fill="rgb(209,34,43)" fg:x="68981" fg:w="15"/><text x="71.2985%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (12 samples, 0.01%)</title><rect x="71.0516%" y="373" width="0.0124%" height="15" fill="rgb(223,11,35)" fg:x="68984" fg:w="12"/><text x="71.3016%" y="383.50"></text></g><g><title>core::slice::sort::partition_equal (349 samples, 0.36%)</title><rect x="70.7107%" y="437" width="0.3595%" height="15" fill="rgb(251,219,26)" fg:x="68653" fg:w="349"/><text x="70.9607%" y="447.50"></text></g><g><title>core::cmp::min (27 samples, 0.03%)</title><rect x="71.1330%" y="421" width="0.0278%" height="15" fill="rgb(231,119,3)" fg:x="69063" fg:w="27"/><text x="71.3830%" y="431.50"></text></g><g><title>core::cmp::Ord::min (27 samples, 0.03%)</title><rect x="71.1330%" y="405" width="0.0278%" height="15" fill="rgb(216,97,11)" fg:x="69063" fg:w="27"/><text x="71.3830%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (10 samples, 0.01%)</title><rect x="71.1505%" y="389" width="0.0103%" height="15" fill="rgb(223,59,9)" fg:x="69080" fg:w="10"/><text x="71.4005%" y="399.50"></text></g><g><title>core::ops::function::FnMut::call_mut (12 samples, 0.01%)</title><rect x="71.1608%" y="421" width="0.0124%" height="15" fill="rgb(233,93,31)" fg:x="69090" fg:w="12"/><text x="71.4108%" y="431.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (21 samples, 0.02%)</title><rect x="71.2051%" y="357" width="0.0216%" height="15" fill="rgb(239,81,33)" fg:x="69133" fg:w="21"/><text x="71.4551%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut (53 samples, 0.05%)</title><rect x="71.1731%" y="421" width="0.0546%" height="15" fill="rgb(213,120,34)" fg:x="69102" fg:w="53"/><text x="71.4231%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut_unchecked (50 samples, 0.05%)</title><rect x="71.1762%" y="405" width="0.0515%" height="15" fill="rgb(243,49,53)" fg:x="69105" fg:w="50"/><text x="71.4262%" y="415.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (23 samples, 0.02%)</title><rect x="71.2040%" y="389" width="0.0237%" height="15" fill="rgb(247,216,33)" fg:x="69132" fg:w="23"/><text x="71.4540%" y="399.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (22 samples, 0.02%)</title><rect x="71.2051%" y="373" width="0.0227%" height="15" fill="rgb(226,26,14)" fg:x="69133" fg:w="22"/><text x="71.4551%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (16 samples, 0.02%)</title><rect x="71.2277%" y="421" width="0.0165%" height="15" fill="rgb(215,49,53)" fg:x="69155" fg:w="16"/><text x="71.4777%" y="431.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (16 samples, 0.02%)</title><rect x="71.2277%" y="405" width="0.0165%" height="15" fill="rgb(245,162,40)" fg:x="69155" fg:w="16"/><text x="71.4777%" y="415.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (11 samples, 0.01%)</title><rect x="71.2329%" y="389" width="0.0113%" height="15" fill="rgb(229,68,17)" fg:x="69160" fg:w="11"/><text x="71.4829%" y="399.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (10 samples, 0.01%)</title><rect x="71.2452%" y="405" width="0.0103%" height="15" fill="rgb(213,182,10)" fg:x="69172" fg:w="10"/><text x="71.4952%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (10 samples, 0.01%)</title><rect x="71.2452%" y="389" width="0.0103%" height="15" fill="rgb(245,125,30)" fg:x="69172" fg:w="10"/><text x="71.4952%" y="399.50"></text></g><g><title>core::slice::sort::break_patterns (28 samples, 0.03%)</title><rect x="71.2442%" y="421" width="0.0288%" height="15" fill="rgb(232,202,2)" fg:x="69171" fg:w="28"/><text x="71.4942%" y="431.50"></text></g><g><title>core::slice::sort::break_patterns::{{closure}} (15 samples, 0.02%)</title><rect x="71.2576%" y="405" width="0.0154%" height="15" fill="rgb(237,140,51)" fg:x="69184" fg:w="15"/><text x="71.5076%" y="415.50"></text></g><g><title>core::slice::sort::break_patterns::{{closure}} (10 samples, 0.01%)</title><rect x="71.2627%" y="389" width="0.0103%" height="15" fill="rgb(236,157,25)" fg:x="69189" fg:w="10"/><text x="71.5127%" y="399.50"></text></g><g><title>core::ops::function::FnMut::call_mut (36 samples, 0.04%)</title><rect x="71.3946%" y="373" width="0.0371%" height="15" fill="rgb(219,209,0)" fg:x="69317" fg:w="36"/><text x="71.6446%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (32 samples, 0.03%)</title><rect x="71.4358%" y="373" width="0.0330%" height="15" fill="rgb(240,116,54)" fg:x="69357" fg:w="32"/><text x="71.6858%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (28 samples, 0.03%)</title><rect x="71.4399%" y="357" width="0.0288%" height="15" fill="rgb(216,10,36)" fg:x="69361" fg:w="28"/><text x="71.6899%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (23 samples, 0.02%)</title><rect x="71.4451%" y="341" width="0.0237%" height="15" fill="rgb(222,72,44)" fg:x="69366" fg:w="23"/><text x="71.6951%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (20 samples, 0.02%)</title><rect x="71.4481%" y="325" width="0.0206%" height="15" fill="rgb(232,159,9)" fg:x="69369" fg:w="20"/><text x="71.6981%" y="335.50"></text></g><g><title>core::ops::function::FnMut::call_mut (73 samples, 0.08%)</title><rect x="71.5995%" y="357" width="0.0752%" height="15" fill="rgb(210,39,32)" fg:x="69516" fg:w="73"/><text x="71.8495%" y="367.50"></text></g><g><title>core::ptr::swap (24 samples, 0.02%)</title><rect x="71.6747%" y="357" width="0.0247%" height="15" fill="rgb(216,194,45)" fg:x="69589" fg:w="24"/><text x="71.9247%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (41 samples, 0.04%)</title><rect x="71.7242%" y="325" width="0.0422%" height="15" fill="rgb(218,18,35)" fg:x="69637" fg:w="41"/><text x="71.9742%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (33 samples, 0.03%)</title><rect x="71.7324%" y="309" width="0.0340%" height="15" fill="rgb(207,83,51)" fg:x="69645" fg:w="33"/><text x="71.9824%" y="319.50"></text></g><g><title>core::slice::sort::choose_pivot (482 samples, 0.50%)</title><rect x="71.2730%" y="421" width="0.4964%" height="15" fill="rgb(225,63,43)" fg:x="69199" fg:w="482"/><text x="71.5230%" y="431.50"></text></g><g><title>core::slice::sort::choose_pivot::{{closure}} (456 samples, 0.47%)</title><rect x="71.2998%" y="405" width="0.4697%" height="15" fill="rgb(207,57,36)" fg:x="69225" fg:w="456"/><text x="71.5498%" y="415.50"></text></g><g><title>core::slice::sort::choose_pivot::{{closure}} (436 samples, 0.45%)</title><rect x="71.3204%" y="389" width="0.4491%" height="15" fill="rgb(216,99,33)" fg:x="69245" fg:w="436"/><text x="71.5704%" y="399.50"></text></g><g><title>core::slice::sort::choose_pivot::{{closure}} (292 samples, 0.30%)</title><rect x="71.4687%" y="373" width="0.3008%" height="15" fill="rgb(225,42,16)" fg:x="69389" fg:w="292"/><text x="71.7187%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (68 samples, 0.07%)</title><rect x="71.6995%" y="357" width="0.0700%" height="15" fill="rgb(220,201,45)" fg:x="69613" fg:w="68"/><text x="71.9495%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (62 samples, 0.06%)</title><rect x="71.7056%" y="341" width="0.0639%" height="15" fill="rgb(225,33,4)" fg:x="69619" fg:w="62"/><text x="71.9556%" y="351.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (80 samples, 0.08%)</title><rect x="71.7829%" y="405" width="0.0824%" height="15" fill="rgb(224,33,50)" fg:x="69694" fg:w="80"/><text x="72.0329%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (78 samples, 0.08%)</title><rect x="71.7849%" y="389" width="0.0803%" height="15" fill="rgb(246,198,51)" fg:x="69696" fg:w="78"/><text x="72.0349%" y="399.50"></text></g><g><title>core::mem::replace (42 samples, 0.04%)</title><rect x="71.8220%" y="373" width="0.0433%" height="15" fill="rgb(205,22,4)" fg:x="69732" fg:w="42"/><text x="72.0720%" y="383.50"></text></g><g><title>core::ptr::read (11 samples, 0.01%)</title><rect x="71.8539%" y="357" width="0.0113%" height="15" fill="rgb(206,3,8)" fg:x="69763" fg:w="11"/><text x="72.1039%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (52 samples, 0.05%)</title><rect x="71.9291%" y="357" width="0.0536%" height="15" fill="rgb(251,23,15)" fg:x="69836" fg:w="52"/><text x="72.1791%" y="367.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (10 samples, 0.01%)</title><rect x="71.9724%" y="341" width="0.0103%" height="15" fill="rgb(252,88,28)" fg:x="69878" fg:w="10"/><text x="72.2224%" y="351.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (10 samples, 0.01%)</title><rect x="71.9724%" y="325" width="0.0103%" height="15" fill="rgb(212,127,14)" fg:x="69878" fg:w="10"/><text x="72.2224%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (116 samples, 0.12%)</title><rect x="71.8653%" y="405" width="0.1195%" height="15" fill="rgb(247,145,37)" fg:x="69774" fg:w="116"/><text x="72.1153%" y="415.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (116 samples, 0.12%)</title><rect x="71.8653%" y="389" width="0.1195%" height="15" fill="rgb(209,117,53)" fg:x="69774" fg:w="116"/><text x="72.1153%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (113 samples, 0.12%)</title><rect x="71.8684%" y="373" width="0.1164%" height="15" fill="rgb(212,90,42)" fg:x="69777" fg:w="113"/><text x="72.1184%" y="383.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::backward_unchecked (21 samples, 0.02%)</title><rect x="72.0764%" y="341" width="0.0216%" height="15" fill="rgb(218,164,37)" fg:x="69979" fg:w="21"/><text x="72.3264%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_sub (10 samples, 0.01%)</title><rect x="72.0878%" y="325" width="0.0103%" height="15" fill="rgb(246,65,34)" fg:x="69990" fg:w="10"/><text x="72.3378%" y="335.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for usize&gt;::clone (25 samples, 0.03%)</title><rect x="72.0981%" y="341" width="0.0257%" height="15" fill="rgb(231,100,33)" fg:x="70000" fg:w="25"/><text x="72.3481%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (79 samples, 0.08%)</title><rect x="72.0496%" y="389" width="0.0814%" height="15" fill="rgb(228,126,14)" fg:x="69953" fg:w="79"/><text x="72.2996%" y="399.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (78 samples, 0.08%)</title><rect x="72.0507%" y="373" width="0.0803%" height="15" fill="rgb(215,173,21)" fg:x="69954" fg:w="78"/><text x="72.3007%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (74 samples, 0.08%)</title><rect x="72.0548%" y="357" width="0.0762%" height="15" fill="rgb(210,6,40)" fg:x="69958" fg:w="74"/><text x="72.3048%" y="367.50"></text></g><g><title>core::ops::function::FnMut::call_mut (43 samples, 0.04%)</title><rect x="72.1362%" y="389" width="0.0443%" height="15" fill="rgb(212,48,18)" fg:x="70037" fg:w="43"/><text x="72.3862%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (14 samples, 0.01%)</title><rect x="72.1866%" y="389" width="0.0144%" height="15" fill="rgb(230,214,11)" fg:x="70086" fg:w="14"/><text x="72.4366%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (14 samples, 0.01%)</title><rect x="72.1866%" y="373" width="0.0144%" height="15" fill="rgb(254,105,39)" fg:x="70086" fg:w="14"/><text x="72.4366%" y="383.50"></text></g><g><title>core::slice::sort::insertion_sort (434 samples, 0.45%)</title><rect x="71.7695%" y="421" width="0.4470%" height="15" fill="rgb(245,158,5)" fg:x="69681" fg:w="434"/><text x="72.0195%" y="431.50"></text></g><g><title>core::slice::sort::shift_tail (225 samples, 0.23%)</title><rect x="71.9848%" y="405" width="0.2317%" height="15" fill="rgb(249,208,11)" fg:x="69890" fg:w="225"/><text x="72.2348%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (15 samples, 0.02%)</title><rect x="72.2011%" y="389" width="0.0154%" height="15" fill="rgb(210,39,28)" fg:x="70100" fg:w="15"/><text x="72.4511%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (14 samples, 0.01%)</title><rect x="72.2021%" y="373" width="0.0144%" height="15" fill="rgb(211,56,53)" fg:x="70101" fg:w="14"/><text x="72.4521%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (14 samples, 0.01%)</title><rect x="72.2021%" y="357" width="0.0144%" height="15" fill="rgb(226,201,30)" fg:x="70101" fg:w="14"/><text x="72.4521%" y="367.50"></text></g><g><title>core::ops::function::FnMut::call_mut (65 samples, 0.07%)</title><rect x="72.4019%" y="405" width="0.0669%" height="15" fill="rgb(239,101,34)" fg:x="70295" fg:w="65"/><text x="72.6519%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (48 samples, 0.05%)</title><rect x="72.4688%" y="405" width="0.0494%" height="15" fill="rgb(226,209,5)" fg:x="70360" fg:w="48"/><text x="72.7188%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (41 samples, 0.04%)</title><rect x="72.4761%" y="389" width="0.0422%" height="15" fill="rgb(250,105,47)" fg:x="70367" fg:w="41"/><text x="72.7261%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (36 samples, 0.04%)</title><rect x="72.4812%" y="373" width="0.0371%" height="15" fill="rgb(230,72,3)" fg:x="70372" fg:w="36"/><text x="72.7312%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (28 samples, 0.03%)</title><rect x="72.4894%" y="357" width="0.0288%" height="15" fill="rgb(232,218,39)" fg:x="70380" fg:w="28"/><text x="72.7394%" y="367.50"></text></g><g><title>core::slice::sort::partial_insertion_sort (298 samples, 0.31%)</title><rect x="72.2165%" y="421" width="0.3069%" height="15" fill="rgb(248,166,6)" fg:x="70115" fg:w="298"/><text x="72.4665%" y="431.50"></text></g><g><title>core::ops::function::FnMut::call_mut (56 samples, 0.06%)</title><rect x="72.6934%" y="405" width="0.0577%" height="15" fill="rgb(247,89,20)" fg:x="70578" fg:w="56"/><text x="72.9434%" y="415.50"></text></g><g><title>core::ptr::read (11 samples, 0.01%)</title><rect x="72.7541%" y="405" width="0.0113%" height="15" fill="rgb(248,130,54)" fg:x="70637" fg:w="11"/><text x="73.0041%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (12 samples, 0.01%)</title><rect x="72.7655%" y="405" width="0.0124%" height="15" fill="rgb(234,196,4)" fg:x="70648" fg:w="12"/><text x="73.0155%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (12 samples, 0.01%)</title><rect x="72.7655%" y="389" width="0.0124%" height="15" fill="rgb(250,143,31)" fg:x="70648" fg:w="12"/><text x="73.0155%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut (27 samples, 0.03%)</title><rect x="72.7778%" y="405" width="0.0278%" height="15" fill="rgb(211,110,34)" fg:x="70660" fg:w="27"/><text x="73.0278%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut_unchecked (23 samples, 0.02%)</title><rect x="72.7820%" y="389" width="0.0237%" height="15" fill="rgb(215,124,48)" fg:x="70664" fg:w="23"/><text x="73.0320%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (17 samples, 0.02%)</title><rect x="72.8056%" y="405" width="0.0175%" height="15" fill="rgb(216,46,13)" fg:x="70687" fg:w="17"/><text x="73.0556%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (27 samples, 0.03%)</title><rect x="72.8232%" y="405" width="0.0278%" height="15" fill="rgb(205,184,25)" fg:x="70704" fg:w="27"/><text x="73.0732%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (26 samples, 0.03%)</title><rect x="72.8242%" y="389" width="0.0268%" height="15" fill="rgb(228,1,10)" fg:x="70705" fg:w="26"/><text x="73.0742%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (15 samples, 0.02%)</title><rect x="72.8355%" y="373" width="0.0154%" height="15" fill="rgb(213,116,27)" fg:x="70716" fg:w="15"/><text x="73.0855%" y="383.50"></text></g><g><title>[libc.so.6] (17 samples, 0.02%)</title><rect x="75.2261%" y="389" width="0.0175%" height="15" fill="rgb(241,95,50)" fg:x="73037" fg:w="17"/><text x="75.4761%" y="399.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (12 samples, 0.01%)</title><rect x="75.2467%" y="389" width="0.0124%" height="15" fill="rgb(238,48,32)" fg:x="73057" fg:w="12"/><text x="75.4967%" y="399.50"></text></g><g><title>sysvec_apic_timer_interrupt (12 samples, 0.01%)</title><rect x="75.2467%" y="373" width="0.0124%" height="15" fill="rgb(235,113,49)" fg:x="73057" fg:w="12"/><text x="75.4967%" y="383.50"></text></g><g><title>irq_exit_rcu (12 samples, 0.01%)</title><rect x="75.2467%" y="357" width="0.0124%" height="15" fill="rgb(205,127,43)" fg:x="73057" fg:w="12"/><text x="75.4967%" y="367.50"></text></g><g><title>__softirqentry_text_start (12 samples, 0.01%)</title><rect x="75.2467%" y="341" width="0.0124%" height="15" fill="rgb(250,162,2)" fg:x="73057" fg:w="12"/><text x="75.4967%" y="351.50"></text></g><g><title>run_timer_softirq (12 samples, 0.01%)</title><rect x="75.2467%" y="325" width="0.0124%" height="15" fill="rgb(220,13,41)" fg:x="73057" fg:w="12"/><text x="75.4967%" y="335.50"></text></g><g><title>__run_timers.part.0 (12 samples, 0.01%)</title><rect x="75.2467%" y="309" width="0.0124%" height="15" fill="rgb(249,221,25)" fg:x="73057" fg:w="12"/><text x="75.4967%" y="319.50"></text></g><g><title>call_timer_fn (12 samples, 0.01%)</title><rect x="75.2467%" y="293" width="0.0124%" height="15" fill="rgb(215,208,19)" fg:x="73057" fg:w="12"/><text x="75.4967%" y="303.50"></text></g><g><title>vbg_heartbeat_timer (12 samples, 0.01%)</title><rect x="75.2467%" y="277" width="0.0124%" height="15" fill="rgb(236,175,2)" fg:x="73057" fg:w="12"/><text x="75.4967%" y="287.50"></text></g><g><title>vbg_req_perform (12 samples, 0.01%)</title><rect x="75.2467%" y="261" width="0.0124%" height="15" fill="rgb(241,52,2)" fg:x="73057" fg:w="12"/><text x="75.4967%" y="271.50"></text></g><g><title>core::cmp::min (59 samples, 0.06%)</title><rect x="75.2590%" y="389" width="0.0608%" height="15" fill="rgb(248,140,14)" fg:x="73069" fg:w="59"/><text x="75.5090%" y="399.50"></text></g><g><title>core::cmp::Ord::min (58 samples, 0.06%)</title><rect x="75.2601%" y="373" width="0.0597%" height="15" fill="rgb(253,22,42)" fg:x="73070" fg:w="58"/><text x="75.5101%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (22 samples, 0.02%)</title><rect x="75.2971%" y="357" width="0.0227%" height="15" fill="rgb(234,61,47)" fg:x="73106" fg:w="22"/><text x="75.5471%" y="367.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;u8&gt; for usize&gt;::from (17 samples, 0.02%)</title><rect x="75.3198%" y="389" width="0.0175%" height="15" fill="rgb(208,226,15)" fg:x="73128" fg:w="17"/><text x="75.5698%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (142 samples, 0.15%)</title><rect x="75.3373%" y="389" width="0.1463%" height="15" fill="rgb(217,221,4)" fg:x="73145" fg:w="142"/><text x="75.5873%" y="399.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (280 samples, 0.29%)</title><rect x="77.0254%" y="357" width="0.2884%" height="15" fill="rgb(212,174,34)" fg:x="74784" fg:w="280"/><text x="77.2754%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (26 samples, 0.03%)</title><rect x="77.2871%" y="341" width="0.0268%" height="15" fill="rgb(253,83,4)" fg:x="75038" fg:w="26"/><text x="77.5371%" y="351.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for usize&gt;::clone (21 samples, 0.02%)</title><rect x="77.3241%" y="357" width="0.0216%" height="15" fill="rgb(250,195,49)" fg:x="75074" fg:w="21"/><text x="77.5741%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (215 samples, 0.22%)</title><rect x="77.3458%" y="357" width="0.2214%" height="15" fill="rgb(241,192,25)" fg:x="75095" fg:w="215"/><text x="77.5958%" y="367.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (18 samples, 0.02%)</title><rect x="80.7230%" y="341" width="0.0185%" height="15" fill="rgb(208,124,10)" fg:x="78374" fg:w="18"/><text x="80.9730%" y="351.50"></text></g><g><title>sysvec_apic_timer_interrupt (18 samples, 0.02%)</title><rect x="80.7230%" y="325" width="0.0185%" height="15" fill="rgb(222,33,0)" fg:x="78374" fg:w="18"/><text x="80.9730%" y="335.50"></text></g><g><title>irq_exit_rcu (18 samples, 0.02%)</title><rect x="80.7230%" y="309" width="0.0185%" height="15" fill="rgb(234,209,28)" fg:x="78374" fg:w="18"/><text x="80.9730%" y="319.50"></text></g><g><title>__softirqentry_text_start (18 samples, 0.02%)</title><rect x="80.7230%" y="293" width="0.0185%" height="15" fill="rgb(224,11,23)" fg:x="78374" fg:w="18"/><text x="80.9730%" y="303.50"></text></g><g><title>run_timer_softirq (16 samples, 0.02%)</title><rect x="80.7251%" y="277" width="0.0165%" height="15" fill="rgb(232,99,1)" fg:x="78376" fg:w="16"/><text x="80.9751%" y="287.50"></text></g><g><title>__run_timers.part.0 (16 samples, 0.02%)</title><rect x="80.7251%" y="261" width="0.0165%" height="15" fill="rgb(237,95,45)" fg:x="78376" fg:w="16"/><text x="80.9751%" y="271.50"></text></g><g><title>call_timer_fn (16 samples, 0.02%)</title><rect x="80.7251%" y="245" width="0.0165%" height="15" fill="rgb(208,109,11)" fg:x="78376" fg:w="16"/><text x="80.9751%" y="255.50"></text></g><g><title>vbg_heartbeat_timer (16 samples, 0.02%)</title><rect x="80.7251%" y="229" width="0.0165%" height="15" fill="rgb(216,190,48)" fg:x="78376" fg:w="16"/><text x="80.9751%" y="239.50"></text></g><g><title>vbg_req_perform (16 samples, 0.02%)</title><rect x="80.7251%" y="213" width="0.0165%" height="15" fill="rgb(251,171,36)" fg:x="78376" fg:w="16"/><text x="80.9751%" y="223.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (6,020 samples, 6.20%)</title><rect x="75.4836%" y="389" width="6.2004%" height="15" fill="rgb(230,62,22)" fg:x="73287" fg:w="6020"/><text x="75.7336%" y="399.50">core::it..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (5,996 samples, 6.18%)</title><rect x="75.5083%" y="373" width="6.1757%" height="15" fill="rgb(225,114,35)" fg:x="73311" fg:w="5996"/><text x="75.7583%" y="383.50">&lt;core::o..</text></g><g><title>core::mem::replace (3,997 samples, 4.12%)</title><rect x="77.5672%" y="357" width="4.1168%" height="15" fill="rgb(215,118,42)" fg:x="75310" fg:w="3997"/><text x="77.8172%" y="367.50">core..</text></g><g><title>core::ptr::read (914 samples, 0.94%)</title><rect x="80.7426%" y="341" width="0.9414%" height="15" fill="rgb(243,119,21)" fg:x="78393" fg:w="914"/><text x="80.9926%" y="351.50"></text></g><g><title>irq_exit_rcu (10 samples, 0.01%)</title><rect x="82.9262%" y="341" width="0.0103%" height="15" fill="rgb(252,177,53)" fg:x="80513" fg:w="10"/><text x="83.1762%" y="351.50"></text></g><g><title>__softirqentry_text_start (10 samples, 0.01%)</title><rect x="82.9262%" y="325" width="0.0103%" height="15" fill="rgb(237,209,29)" fg:x="80513" fg:w="10"/><text x="83.1762%" y="335.50"></text></g><g><title>run_timer_softirq (10 samples, 0.01%)</title><rect x="82.9262%" y="309" width="0.0103%" height="15" fill="rgb(212,65,23)" fg:x="80513" fg:w="10"/><text x="83.1762%" y="319.50"></text></g><g><title>__run_timers.part.0 (10 samples, 0.01%)</title><rect x="82.9262%" y="293" width="0.0103%" height="15" fill="rgb(230,222,46)" fg:x="80513" fg:w="10"/><text x="83.1762%" y="303.50"></text></g><g><title>call_timer_fn (10 samples, 0.01%)</title><rect x="82.9262%" y="277" width="0.0103%" height="15" fill="rgb(215,135,32)" fg:x="80513" fg:w="10"/><text x="83.1762%" y="287.50"></text></g><g><title>vbg_heartbeat_timer (10 samples, 0.01%)</title><rect x="82.9262%" y="261" width="0.0103%" height="15" fill="rgb(246,101,22)" fg:x="80513" fg:w="10"/><text x="83.1762%" y="271.50"></text></g><g><title>vbg_req_perform (10 samples, 0.01%)</title><rect x="82.9262%" y="245" width="0.0103%" height="15" fill="rgb(206,107,13)" fg:x="80513" fg:w="10"/><text x="83.1762%" y="255.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (11 samples, 0.01%)</title><rect x="82.9262%" y="373" width="0.0113%" height="15" fill="rgb(250,100,44)" fg:x="80513" fg:w="11"/><text x="83.1762%" y="383.50"></text></g><g><title>sysvec_apic_timer_interrupt (11 samples, 0.01%)</title><rect x="82.9262%" y="357" width="0.0113%" height="15" fill="rgb(231,147,38)" fg:x="80513" fg:w="11"/><text x="83.1762%" y="367.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,319 samples, 1.36%)</title><rect x="81.6871%" y="389" width="1.3585%" height="15" fill="rgb(229,8,40)" fg:x="79310" fg:w="1319"/><text x="81.9371%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::lt (105 samples, 0.11%)</title><rect x="82.9375%" y="373" width="0.1081%" height="15" fill="rgb(221,135,30)" fg:x="80524" fg:w="105"/><text x="83.1875%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1,710 samples, 1.76%)</title><rect x="83.0456%" y="389" width="1.7613%" height="15" fill="rgb(249,193,18)" fg:x="80629" fg:w="1710"/><text x="83.2956%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1,523 samples, 1.57%)</title><rect x="83.2382%" y="373" width="1.5686%" height="15" fill="rgb(209,133,39)" fg:x="80816" fg:w="1523"/><text x="83.4882%" y="383.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (16 samples, 0.02%)</title><rect x="84.8687%" y="373" width="0.0165%" height="15" fill="rgb(232,100,14)" fg:x="82399" fg:w="16"/><text x="85.1187%" y="383.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (15 samples, 0.02%)</title><rect x="84.8697%" y="357" width="0.0154%" height="15" fill="rgb(224,185,1)" fg:x="82400" fg:w="15"/><text x="85.1197%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (458 samples, 0.47%)</title><rect x="84.8069%" y="389" width="0.4717%" height="15" fill="rgb(223,139,8)" fg:x="82339" fg:w="458"/><text x="85.0569%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (382 samples, 0.39%)</title><rect x="84.8852%" y="373" width="0.3934%" height="15" fill="rgb(232,213,38)" fg:x="82415" fg:w="382"/><text x="85.1352%" y="383.50"></text></g><g><title>core::ptr::read (20 samples, 0.02%)</title><rect x="85.2838%" y="389" width="0.0206%" height="15" fill="rgb(207,94,22)" fg:x="82802" fg:w="20"/><text x="85.5338%" y="399.50"></text></g><g><title>core::ptr::swap (93 samples, 0.10%)</title><rect x="85.3044%" y="389" width="0.0958%" height="15" fill="rgb(219,183,54)" fg:x="82822" fg:w="93"/><text x="85.5544%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (49 samples, 0.05%)</title><rect x="85.3497%" y="373" width="0.0505%" height="15" fill="rgb(216,185,54)" fg:x="82866" fg:w="49"/><text x="85.5997%" y="383.50"></text></g><g><title>core::slice::sort::partition (12,556 samples, 12.93%)</title><rect x="72.5234%" y="421" width="12.9323%" height="15" fill="rgb(254,217,39)" fg:x="70413" fg:w="12556"/><text x="72.7734%" y="431.50">core::slice::sort::..</text></g><g><title>core::slice::sort::partition_in_blocks (12,238 samples, 12.60%)</title><rect x="72.8510%" y="405" width="12.6048%" height="15" fill="rgb(240,178,23)" fg:x="70731" fg:w="12238"/><text x="73.1010%" y="415.50">core::slice::sort::..</text></g><g><title>core::slice::sort::partition_in_blocks::width (54 samples, 0.06%)</title><rect x="85.4001%" y="389" width="0.0556%" height="15" fill="rgb(218,11,47)" fg:x="82915" fg:w="54"/><text x="85.6501%" y="399.50"></text></g><g><title>core::ops::function::FnMut::call_mut (180 samples, 0.19%)</title><rect x="86.0428%" y="405" width="0.1854%" height="15" fill="rgb(218,51,51)" fg:x="83539" fg:w="180"/><text x="86.2928%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::lt (21 samples, 0.02%)</title><rect x="86.2066%" y="389" width="0.0216%" height="15" fill="rgb(238,126,27)" fg:x="83698" fg:w="21"/><text x="86.4566%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (20 samples, 0.02%)</title><rect x="86.2313%" y="405" width="0.0206%" height="15" fill="rgb(249,202,22)" fg:x="83722" fg:w="20"/><text x="86.4813%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (18 samples, 0.02%)</title><rect x="86.2334%" y="389" width="0.0185%" height="15" fill="rgb(254,195,49)" fg:x="83724" fg:w="18"/><text x="86.4834%" y="399.50"></text></g><g><title>core::ptr::swap (26 samples, 0.03%)</title><rect x="86.2581%" y="405" width="0.0268%" height="15" fill="rgb(208,123,14)" fg:x="83748" fg:w="26"/><text x="86.5081%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (62 samples, 0.06%)</title><rect x="86.2849%" y="405" width="0.0639%" height="15" fill="rgb(224,200,8)" fg:x="83774" fg:w="62"/><text x="86.5349%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (59 samples, 0.06%)</title><rect x="86.2880%" y="389" width="0.0608%" height="15" fill="rgb(217,61,36)" fg:x="83777" fg:w="59"/><text x="86.5380%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (41 samples, 0.04%)</title><rect x="86.3065%" y="373" width="0.0422%" height="15" fill="rgb(206,35,45)" fg:x="83795" fg:w="41"/><text x="86.5565%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (37 samples, 0.04%)</title><rect x="86.3106%" y="357" width="0.0381%" height="15" fill="rgb(217,65,33)" fg:x="83799" fg:w="37"/><text x="86.5606%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut (13 samples, 0.01%)</title><rect x="86.3487%" y="405" width="0.0134%" height="15" fill="rgb(222,158,48)" fg:x="83836" fg:w="13"/><text x="86.5987%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut_unchecked (13 samples, 0.01%)</title><rect x="86.3487%" y="389" width="0.0134%" height="15" fill="rgb(254,2,54)" fg:x="83836" fg:w="13"/><text x="86.5987%" y="399.50"></text></g><g><title>core::slice::sort::partition_equal (887 samples, 0.91%)</title><rect x="85.4558%" y="421" width="0.9136%" height="15" fill="rgb(250,143,38)" fg:x="82969" fg:w="887"/><text x="85.7058%" y="431.50"></text></g><g><title>core::cmp::min (11 samples, 0.01%)</title><rect x="86.4208%" y="405" width="0.0113%" height="15" fill="rgb(248,25,0)" fg:x="83906" fg:w="11"/><text x="86.6708%" y="415.50"></text></g><g><title>core::cmp::Ord::min (11 samples, 0.01%)</title><rect x="86.4208%" y="389" width="0.0113%" height="15" fill="rgb(206,152,27)" fg:x="83906" fg:w="11"/><text x="86.6708%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut (43 samples, 0.04%)</title><rect x="86.4414%" y="405" width="0.0443%" height="15" fill="rgb(240,77,30)" fg:x="83926" fg:w="43"/><text x="86.6914%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut_unchecked (38 samples, 0.04%)</title><rect x="86.4466%" y="389" width="0.0391%" height="15" fill="rgb(231,5,3)" fg:x="83931" fg:w="38"/><text x="86.6966%" y="399.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (16 samples, 0.02%)</title><rect x="86.4693%" y="373" width="0.0165%" height="15" fill="rgb(207,226,32)" fg:x="83953" fg:w="16"/><text x="86.7193%" y="383.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (16 samples, 0.02%)</title><rect x="86.4693%" y="357" width="0.0165%" height="15" fill="rgb(222,207,47)" fg:x="83953" fg:w="16"/><text x="86.7193%" y="367.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (14 samples, 0.01%)</title><rect x="86.4713%" y="341" width="0.0144%" height="15" fill="rgb(229,115,45)" fg:x="83955" fg:w="14"/><text x="86.7213%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (13 samples, 0.01%)</title><rect x="86.4857%" y="405" width="0.0134%" height="15" fill="rgb(224,191,6)" fg:x="83969" fg:w="13"/><text x="86.7357%" y="415.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (11 samples, 0.01%)</title><rect x="86.4878%" y="389" width="0.0113%" height="15" fill="rgb(230,227,24)" fg:x="83971" fg:w="11"/><text x="86.7378%" y="399.50"></text></g><g><title>core::slice::sort::break_patterns (23 samples, 0.02%)</title><rect x="86.4991%" y="405" width="0.0237%" height="15" fill="rgb(228,80,19)" fg:x="83982" fg:w="23"/><text x="86.7491%" y="415.50"></text></g><g><title>core::slice::sort::break_patterns::{{closure}} (13 samples, 0.01%)</title><rect x="86.5094%" y="389" width="0.0134%" height="15" fill="rgb(247,229,0)" fg:x="83992" fg:w="13"/><text x="86.7594%" y="399.50"></text></g><g><title>core::slice::sort::break_patterns::{{closure}} (10 samples, 0.01%)</title><rect x="86.5125%" y="373" width="0.0103%" height="15" fill="rgb(237,194,15)" fg:x="83995" fg:w="10"/><text x="86.7625%" y="383.50"></text></g><g><title>core::ops::function::FnMut::call_mut (35 samples, 0.04%)</title><rect x="86.6299%" y="357" width="0.0360%" height="15" fill="rgb(219,203,20)" fg:x="84109" fg:w="35"/><text x="86.8799%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (35 samples, 0.04%)</title><rect x="86.6691%" y="357" width="0.0360%" height="15" fill="rgb(234,128,8)" fg:x="84147" fg:w="35"/><text x="86.9191%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (31 samples, 0.03%)</title><rect x="86.6732%" y="341" width="0.0319%" height="15" fill="rgb(248,202,8)" fg:x="84151" fg:w="31"/><text x="86.9232%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (24 samples, 0.02%)</title><rect x="86.6804%" y="325" width="0.0247%" height="15" fill="rgb(206,104,37)" fg:x="84158" fg:w="24"/><text x="86.9304%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (21 samples, 0.02%)</title><rect x="86.6835%" y="309" width="0.0216%" height="15" fill="rgb(223,8,27)" fg:x="84161" fg:w="21"/><text x="86.9335%" y="319.50"></text></g><g><title>core::ops::function::FnMut::call_mut (61 samples, 0.06%)</title><rect x="86.8225%" y="341" width="0.0628%" height="15" fill="rgb(216,217,28)" fg:x="84296" fg:w="61"/><text x="87.0725%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::lt (11 samples, 0.01%)</title><rect x="86.8740%" y="325" width="0.0113%" height="15" fill="rgb(249,199,1)" fg:x="84346" fg:w="11"/><text x="87.1240%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (48 samples, 0.05%)</title><rect x="86.9101%" y="309" width="0.0494%" height="15" fill="rgb(240,85,17)" fg:x="84381" fg:w="48"/><text x="87.1601%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (39 samples, 0.04%)</title><rect x="86.9194%" y="293" width="0.0402%" height="15" fill="rgb(206,108,45)" fg:x="84390" fg:w="39"/><text x="87.1694%" y="303.50"></text></g><g><title>core::slice::sort::choose_pivot (425 samples, 0.44%)</title><rect x="86.5228%" y="405" width="0.4377%" height="15" fill="rgb(245,210,41)" fg:x="84005" fg:w="425"/><text x="86.7728%" y="415.50"></text></g><g><title>core::slice::sort::choose_pivot::{{closure}} (398 samples, 0.41%)</title><rect x="86.5506%" y="389" width="0.4099%" height="15" fill="rgb(206,13,37)" fg:x="84032" fg:w="398"/><text x="86.8006%" y="399.50"></text></g><g><title>core::slice::sort::choose_pivot::{{closure}} (384 samples, 0.40%)</title><rect x="86.5650%" y="373" width="0.3955%" height="15" fill="rgb(250,61,18)" fg:x="84046" fg:w="384"/><text x="86.8150%" y="383.50"></text></g><g><title>core::slice::sort::choose_pivot::{{closure}} (248 samples, 0.26%)</title><rect x="86.7051%" y="357" width="0.2554%" height="15" fill="rgb(235,172,48)" fg:x="84182" fg:w="248"/><text x="86.9551%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (67 samples, 0.07%)</title><rect x="86.8915%" y="341" width="0.0690%" height="15" fill="rgb(249,201,17)" fg:x="84363" fg:w="67"/><text x="87.1415%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (62 samples, 0.06%)</title><rect x="86.8967%" y="325" width="0.0639%" height="15" fill="rgb(219,208,6)" fg:x="84368" fg:w="62"/><text x="87.1467%" y="335.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (90 samples, 0.09%)</title><rect x="86.9884%" y="389" width="0.0927%" height="15" fill="rgb(248,31,23)" fg:x="84457" fg:w="90"/><text x="87.2384%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (90 samples, 0.09%)</title><rect x="86.9884%" y="373" width="0.0927%" height="15" fill="rgb(245,15,42)" fg:x="84457" fg:w="90"/><text x="87.2384%" y="383.50"></text></g><g><title>core::mem::replace (42 samples, 0.04%)</title><rect x="87.0378%" y="357" width="0.0433%" height="15" fill="rgb(222,217,39)" fg:x="84505" fg:w="42"/><text x="87.2878%" y="367.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (135 samples, 0.14%)</title><rect x="87.0841%" y="373" width="0.1390%" height="15" fill="rgb(210,219,27)" fg:x="84550" fg:w="135"/><text x="87.3341%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (125 samples, 0.13%)</title><rect x="87.0944%" y="357" width="0.1287%" height="15" fill="rgb(252,166,36)" fg:x="84560" fg:w="125"/><text x="87.3444%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (61 samples, 0.06%)</title><rect x="87.1604%" y="341" width="0.0628%" height="15" fill="rgb(245,132,34)" fg:x="84624" fg:w="61"/><text x="87.4104%" y="351.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (13 samples, 0.01%)</title><rect x="87.2098%" y="325" width="0.0134%" height="15" fill="rgb(236,54,3)" fg:x="84672" fg:w="13"/><text x="87.4598%" y="335.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (13 samples, 0.01%)</title><rect x="87.2098%" y="309" width="0.0134%" height="15" fill="rgb(241,173,43)" fg:x="84672" fg:w="13"/><text x="87.4598%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (139 samples, 0.14%)</title><rect x="87.0811%" y="389" width="0.1432%" height="15" fill="rgb(215,190,9)" fg:x="84547" fg:w="139"/><text x="87.3311%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.03%)</title><rect x="87.2881%" y="373" width="0.0330%" height="15" fill="rgb(242,101,16)" fg:x="84748" fg:w="32"/><text x="87.5381%" y="383.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (32 samples, 0.03%)</title><rect x="87.2881%" y="357" width="0.0330%" height="15" fill="rgb(223,190,21)" fg:x="84748" fg:w="32"/><text x="87.5381%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (29 samples, 0.03%)</title><rect x="87.2912%" y="341" width="0.0299%" height="15" fill="rgb(215,228,25)" fg:x="84751" fg:w="29"/><text x="87.5412%" y="351.50"></text></g><g><title>core::ops::function::FnMut::call_mut (49 samples, 0.05%)</title><rect x="87.3272%" y="373" width="0.0505%" height="15" fill="rgb(225,36,22)" fg:x="84786" fg:w="49"/><text x="87.5772%" y="383.50"></text></g><g><title>core::slice::sort::insertion_sort (429 samples, 0.44%)</title><rect x="86.9606%" y="405" width="0.4419%" height="15" fill="rgb(251,106,46)" fg:x="84430" fg:w="429"/><text x="87.2106%" y="415.50"></text></g><g><title>core::slice::sort::shift_tail (173 samples, 0.18%)</title><rect x="87.2242%" y="389" width="0.1782%" height="15" fill="rgb(208,90,1)" fg:x="84686" fg:w="173"/><text x="87.4742%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (12 samples, 0.01%)</title><rect x="87.3901%" y="373" width="0.0124%" height="15" fill="rgb(243,10,4)" fg:x="84847" fg:w="12"/><text x="87.6401%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (10 samples, 0.01%)</title><rect x="87.3921%" y="357" width="0.0103%" height="15" fill="rgb(212,137,27)" fg:x="84849" fg:w="10"/><text x="87.6421%" y="367.50"></text></g><g><title>core::ops::function::FnMut::call_mut (144 samples, 0.15%)</title><rect x="87.7464%" y="389" width="0.1483%" height="15" fill="rgb(231,220,49)" fg:x="85193" fg:w="144"/><text x="87.9964%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::lt (14 samples, 0.01%)</title><rect x="87.8803%" y="373" width="0.0144%" height="15" fill="rgb(237,96,20)" fg:x="85323" fg:w="14"/><text x="88.1303%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (75 samples, 0.08%)</title><rect x="87.8947%" y="389" width="0.0772%" height="15" fill="rgb(239,229,30)" fg:x="85337" fg:w="75"/><text x="88.1447%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (63 samples, 0.06%)</title><rect x="87.9071%" y="373" width="0.0649%" height="15" fill="rgb(219,65,33)" fg:x="85349" fg:w="63"/><text x="88.1571%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (53 samples, 0.05%)</title><rect x="87.9174%" y="357" width="0.0546%" height="15" fill="rgb(243,134,7)" fg:x="85359" fg:w="53"/><text x="88.1674%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (37 samples, 0.04%)</title><rect x="87.9339%" y="341" width="0.0381%" height="15" fill="rgb(216,177,54)" fg:x="85375" fg:w="37"/><text x="88.1839%" y="351.50"></text></g><g><title>core::slice::sort::partial_insertion_sort (572 samples, 0.59%)</title><rect x="87.4024%" y="405" width="0.5891%" height="15" fill="rgb(211,160,20)" fg:x="84859" fg:w="572"/><text x="87.6524%" y="415.50"></text></g><g><title>core::ops::function::FnMut::call_mut (27 samples, 0.03%)</title><rect x="88.1182%" y="389" width="0.0278%" height="15" fill="rgb(239,85,39)" fg:x="85554" fg:w="27"/><text x="88.3682%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (10 samples, 0.01%)</title><rect x="88.1533%" y="389" width="0.0103%" height="15" fill="rgb(232,125,22)" fg:x="85588" fg:w="10"/><text x="88.4033%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut (19 samples, 0.02%)</title><rect x="88.1646%" y="389" width="0.0196%" height="15" fill="rgb(244,57,34)" fg:x="85599" fg:w="19"/><text x="88.4146%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut_unchecked (15 samples, 0.02%)</title><rect x="88.1687%" y="373" width="0.0154%" height="15" fill="rgb(214,203,32)" fg:x="85603" fg:w="15"/><text x="88.4187%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (16 samples, 0.02%)</title><rect x="88.1842%" y="389" width="0.0165%" height="15" fill="rgb(207,58,43)" fg:x="85618" fg:w="16"/><text x="88.4342%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (24 samples, 0.02%)</title><rect x="88.2006%" y="389" width="0.0247%" height="15" fill="rgb(215,193,15)" fg:x="85634" fg:w="24"/><text x="88.4506%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (21 samples, 0.02%)</title><rect x="88.2037%" y="373" width="0.0216%" height="15" fill="rgb(232,15,44)" fg:x="85637" fg:w="21"/><text x="88.4537%" y="383.50"></text></g><g><title>[libc.so.6] (16 samples, 0.02%)</title><rect x="89.2667%" y="373" width="0.0165%" height="15" fill="rgb(212,3,48)" fg:x="86669" fg:w="16"/><text x="89.5167%" y="383.50"></text></g><g><title>core::cmp::min (23 samples, 0.02%)</title><rect x="89.2914%" y="373" width="0.0237%" height="15" fill="rgb(218,128,7)" fg:x="86693" fg:w="23"/><text x="89.5414%" y="383.50"></text></g><g><title>core::cmp::Ord::min (22 samples, 0.02%)</title><rect x="89.2924%" y="357" width="0.0227%" height="15" fill="rgb(226,216,39)" fg:x="86694" fg:w="22"/><text x="89.5424%" y="367.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;u8&gt; for usize&gt;::from (13 samples, 0.01%)</title><rect x="89.3151%" y="373" width="0.0134%" height="15" fill="rgb(243,47,51)" fg:x="86716" fg:w="13"/><text x="89.5651%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (63 samples, 0.06%)</title><rect x="89.3285%" y="373" width="0.0649%" height="15" fill="rgb(241,183,40)" fg:x="86729" fg:w="63"/><text x="89.5785%" y="383.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (122 samples, 0.13%)</title><rect x="90.0340%" y="341" width="0.1257%" height="15" fill="rgb(231,217,32)" fg:x="87414" fg:w="122"/><text x="90.2840%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (107 samples, 0.11%)</title><rect x="90.1679%" y="341" width="0.1102%" height="15" fill="rgb(229,61,38)" fg:x="87544" fg:w="107"/><text x="90.4179%" y="351.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2,580 samples, 2.66%)</title><rect x="89.3933%" y="373" width="2.6573%" height="15" fill="rgb(225,210,5)" fg:x="86792" fg:w="2580"/><text x="89.6433%" y="383.50">co..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2,570 samples, 2.65%)</title><rect x="89.4036%" y="357" width="2.6470%" height="15" fill="rgb(231,79,45)" fg:x="86802" fg:w="2570"/><text x="89.6536%" y="367.50">&lt;c..</text></g><g><title>core::mem::replace (1,721 samples, 1.77%)</title><rect x="90.2781%" y="341" width="1.7726%" height="15" fill="rgb(224,100,7)" fg:x="87651" fg:w="1721"/><text x="90.5281%" y="351.50">c..</text></g><g><title>core::ptr::read (393 samples, 0.40%)</title><rect x="91.6459%" y="325" width="0.4048%" height="15" fill="rgb(241,198,18)" fg:x="88979" fg:w="393"/><text x="91.8959%" y="335.50"></text></g><g><title>core::ops::function::FnMut::call_mut (560 samples, 0.58%)</title><rect x="92.0507%" y="373" width="0.5768%" height="15" fill="rgb(252,97,53)" fg:x="89372" fg:w="560"/><text x="92.3007%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::lt (35 samples, 0.04%)</title><rect x="92.5914%" y="357" width="0.0360%" height="15" fill="rgb(220,88,7)" fg:x="89897" fg:w="35"/><text x="92.8414%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (734 samples, 0.76%)</title><rect x="92.6275%" y="373" width="0.7560%" height="15" fill="rgb(213,176,14)" fg:x="89932" fg:w="734"/><text x="92.8775%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (655 samples, 0.67%)</title><rect x="92.7088%" y="357" width="0.6746%" height="15" fill="rgb(246,73,7)" fg:x="90011" fg:w="655"/><text x="92.9588%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (177 samples, 0.18%)</title><rect x="93.3835%" y="373" width="0.1823%" height="15" fill="rgb(245,64,36)" fg:x="90666" fg:w="177"/><text x="93.6335%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (139 samples, 0.14%)</title><rect x="93.4226%" y="357" width="0.1432%" height="15" fill="rgb(245,80,10)" fg:x="90704" fg:w="139"/><text x="93.6726%" y="367.50"></text></g><g><title>core::ptr::swap (59 samples, 0.06%)</title><rect x="93.5750%" y="373" width="0.0608%" height="15" fill="rgb(232,107,50)" fg:x="90852" fg:w="59"/><text x="93.8250%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (42 samples, 0.04%)</title><rect x="93.5925%" y="357" width="0.0433%" height="15" fill="rgb(253,3,0)" fg:x="90869" fg:w="42"/><text x="93.8425%" y="367.50"></text></g><g><title>core::slice::sort::partition (5,508 samples, 5.67%)</title><rect x="87.9916%" y="405" width="5.6731%" height="15" fill="rgb(212,99,53)" fg:x="85431" fg:w="5508"/><text x="88.2416%" y="415.50">core::s..</text></g><g><title>core::slice::sort::partition_in_blocks (5,281 samples, 5.44%)</title><rect x="88.2254%" y="389" width="5.4393%" height="15" fill="rgb(249,111,54)" fg:x="85658" fg:w="5281"/><text x="88.4754%" y="399.50">core::s..</text></g><g><title>core::slice::sort::partition_in_blocks::width (28 samples, 0.03%)</title><rect x="93.6358%" y="373" width="0.0288%" height="15" fill="rgb(249,55,30)" fg:x="90911" fg:w="28"/><text x="93.8858%" y="383.50"></text></g><g><title>core::ops::function::FnMut::call_mut (144 samples, 0.15%)</title><rect x="94.1199%" y="389" width="0.1483%" height="15" fill="rgb(237,47,42)" fg:x="91381" fg:w="144"/><text x="94.3699%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::lt (13 samples, 0.01%)</title><rect x="94.2548%" y="373" width="0.0134%" height="15" fill="rgb(211,20,18)" fg:x="91512" fg:w="13"/><text x="94.5048%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (10 samples, 0.01%)</title><rect x="94.2734%" y="389" width="0.0103%" height="15" fill="rgb(231,203,46)" fg:x="91530" fg:w="10"/><text x="94.5234%" y="399.50"></text></g><g><title>core::ptr::swap (23 samples, 0.02%)</title><rect x="94.2857%" y="389" width="0.0237%" height="15" fill="rgb(237,142,3)" fg:x="91542" fg:w="23"/><text x="94.5357%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (51 samples, 0.05%)</title><rect x="94.3094%" y="389" width="0.0525%" height="15" fill="rgb(241,107,1)" fg:x="91565" fg:w="51"/><text x="94.5594%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (46 samples, 0.05%)</title><rect x="94.3146%" y="373" width="0.0474%" height="15" fill="rgb(229,83,13)" fg:x="91570" fg:w="46"/><text x="94.5646%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (37 samples, 0.04%)</title><rect x="94.3238%" y="357" width="0.0381%" height="15" fill="rgb(241,91,40)" fg:x="91579" fg:w="37"/><text x="94.5738%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (35 samples, 0.04%)</title><rect x="94.3259%" y="341" width="0.0360%" height="15" fill="rgb(225,3,45)" fg:x="91581" fg:w="35"/><text x="94.5759%" y="351.50"></text></g><g><title>core::slice::sort::partition_equal (688 samples, 0.71%)</title><rect x="93.6646%" y="405" width="0.7086%" height="15" fill="rgb(244,223,14)" fg:x="90939" fg:w="688"/><text x="93.9146%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut (12 samples, 0.01%)</title><rect x="94.4052%" y="389" width="0.0124%" height="15" fill="rgb(224,124,37)" fg:x="91658" fg:w="12"/><text x="94.6552%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut_unchecked (11 samples, 0.01%)</title><rect x="94.4062%" y="373" width="0.0113%" height="15" fill="rgb(251,171,30)" fg:x="91659" fg:w="11"/><text x="94.6562%" y="383.50"></text></g><g><title>core::ops::function::FnMut::call_mut (16 samples, 0.02%)</title><rect x="94.4835%" y="341" width="0.0165%" height="15" fill="rgb(236,46,54)" fg:x="91734" fg:w="16"/><text x="94.7335%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (17 samples, 0.02%)</title><rect x="94.4999%" y="341" width="0.0175%" height="15" fill="rgb(245,213,5)" fg:x="91750" fg:w="17"/><text x="94.7499%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (14 samples, 0.01%)</title><rect x="94.5030%" y="325" width="0.0144%" height="15" fill="rgb(230,144,27)" fg:x="91753" fg:w="14"/><text x="94.7530%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (11 samples, 0.01%)</title><rect x="94.5061%" y="309" width="0.0113%" height="15" fill="rgb(220,86,6)" fg:x="91756" fg:w="11"/><text x="94.7561%" y="319.50"></text></g><g><title>core::ops::function::FnMut::call_mut (31 samples, 0.03%)</title><rect x="94.5432%" y="325" width="0.0319%" height="15" fill="rgb(240,20,13)" fg:x="91792" fg:w="31"/><text x="94.7932%" y="335.50"></text></g><g><title>core::slice::sort::choose_pivot (165 samples, 0.17%)</title><rect x="94.4340%" y="389" width="0.1699%" height="15" fill="rgb(217,89,34)" fg:x="91686" fg:w="165"/><text x="94.6840%" y="399.50"></text></g><g><title>core::slice::sort::choose_pivot::{{closure}} (150 samples, 0.15%)</title><rect x="94.4495%" y="373" width="0.1545%" height="15" fill="rgb(229,13,5)" fg:x="91701" fg:w="150"/><text x="94.6995%" y="383.50"></text></g><g><title>core::slice::sort::choose_pivot::{{closure}} (142 samples, 0.15%)</title><rect x="94.4577%" y="357" width="0.1463%" height="15" fill="rgb(244,67,35)" fg:x="91709" fg:w="142"/><text x="94.7077%" y="367.50"></text></g><g><title>core::slice::sort::choose_pivot::{{closure}} (84 samples, 0.09%)</title><rect x="94.5175%" y="341" width="0.0865%" height="15" fill="rgb(221,40,2)" fg:x="91767" fg:w="84"/><text x="94.7675%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (27 samples, 0.03%)</title><rect x="94.5762%" y="325" width="0.0278%" height="15" fill="rgb(237,157,21)" fg:x="91824" fg:w="27"/><text x="94.8262%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (21 samples, 0.02%)</title><rect x="94.5823%" y="309" width="0.0216%" height="15" fill="rgb(222,94,11)" fg:x="91830" fg:w="21"/><text x="94.8323%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (15 samples, 0.02%)</title><rect x="94.5885%" y="293" width="0.0154%" height="15" fill="rgb(249,113,6)" fg:x="91836" fg:w="15"/><text x="94.8385%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (15 samples, 0.02%)</title><rect x="94.5885%" y="277" width="0.0154%" height="15" fill="rgb(238,137,36)" fg:x="91836" fg:w="15"/><text x="94.8385%" y="287.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (48 samples, 0.05%)</title><rect x="94.6143%" y="373" width="0.0494%" height="15" fill="rgb(210,102,26)" fg:x="91861" fg:w="48"/><text x="94.8643%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (47 samples, 0.05%)</title><rect x="94.6153%" y="357" width="0.0484%" height="15" fill="rgb(218,30,30)" fg:x="91862" fg:w="47"/><text x="94.8653%" y="367.50"></text></g><g><title>core::mem::replace (29 samples, 0.03%)</title><rect x="94.6338%" y="341" width="0.0299%" height="15" fill="rgb(214,67,26)" fg:x="91880" fg:w="29"/><text x="94.8838%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (31 samples, 0.03%)</title><rect x="94.7152%" y="325" width="0.0319%" height="15" fill="rgb(251,9,53)" fg:x="91959" fg:w="31"/><text x="94.9652%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (82 samples, 0.08%)</title><rect x="94.6637%" y="373" width="0.0845%" height="15" fill="rgb(228,204,25)" fg:x="91909" fg:w="82"/><text x="94.9137%" y="383.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (77 samples, 0.08%)</title><rect x="94.6689%" y="357" width="0.0793%" height="15" fill="rgb(207,153,8)" fg:x="91914" fg:w="77"/><text x="94.9189%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (72 samples, 0.07%)</title><rect x="94.6740%" y="341" width="0.0742%" height="15" fill="rgb(242,9,16)" fg:x="91919" fg:w="72"/><text x="94.9240%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.02%)</title><rect x="94.7770%" y="357" width="0.0154%" height="15" fill="rgb(217,211,10)" fg:x="92019" fg:w="15"/><text x="95.0270%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (15 samples, 0.02%)</title><rect x="94.7770%" y="341" width="0.0154%" height="15" fill="rgb(219,228,52)" fg:x="92019" fg:w="15"/><text x="95.0270%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (15 samples, 0.02%)</title><rect x="94.7770%" y="325" width="0.0154%" height="15" fill="rgb(231,92,29)" fg:x="92019" fg:w="15"/><text x="95.0270%" y="335.50"></text></g><g><title>core::ops::function::FnMut::call_mut (19 samples, 0.02%)</title><rect x="94.7935%" y="357" width="0.0196%" height="15" fill="rgb(232,8,23)" fg:x="92035" fg:w="19"/><text x="95.0435%" y="367.50"></text></g><g><title>core::slice::sort::insertion_sort (219 samples, 0.23%)</title><rect x="94.6040%" y="389" width="0.2256%" height="15" fill="rgb(216,211,34)" fg:x="91851" fg:w="219"/><text x="94.8540%" y="399.50"></text></g><g><title>core::slice::sort::shift_tail (79 samples, 0.08%)</title><rect x="94.7482%" y="373" width="0.0814%" height="15" fill="rgb(236,151,0)" fg:x="91991" fg:w="79"/><text x="94.9982%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (13 samples, 0.01%)</title><rect x="94.8161%" y="357" width="0.0134%" height="15" fill="rgb(209,168,3)" fg:x="92057" fg:w="13"/><text x="95.0661%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (11 samples, 0.01%)</title><rect x="94.8182%" y="341" width="0.0113%" height="15" fill="rgb(208,129,28)" fg:x="92059" fg:w="11"/><text x="95.0682%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (11 samples, 0.01%)</title><rect x="94.8182%" y="325" width="0.0113%" height="15" fill="rgb(229,78,22)" fg:x="92059" fg:w="11"/><text x="95.0682%" y="335.50"></text></g><g><title>core::ops::function::FnMut::call_mut (103 samples, 0.11%)</title><rect x="95.0860%" y="373" width="0.1061%" height="15" fill="rgb(228,187,13)" fg:x="92319" fg:w="103"/><text x="95.3360%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::lt (10 samples, 0.01%)</title><rect x="95.1818%" y="357" width="0.0103%" height="15" fill="rgb(240,119,24)" fg:x="92412" fg:w="10"/><text x="95.4318%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (68 samples, 0.07%)</title><rect x="95.1921%" y="373" width="0.0700%" height="15" fill="rgb(209,194,42)" fg:x="92422" fg:w="68"/><text x="95.4421%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (54 samples, 0.06%)</title><rect x="95.2065%" y="357" width="0.0556%" height="15" fill="rgb(247,200,46)" fg:x="92436" fg:w="54"/><text x="95.4565%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (38 samples, 0.04%)</title><rect x="95.2230%" y="341" width="0.0391%" height="15" fill="rgb(218,76,16)" fg:x="92452" fg:w="38"/><text x="95.4730%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (29 samples, 0.03%)</title><rect x="95.2323%" y="325" width="0.0299%" height="15" fill="rgb(225,21,48)" fg:x="92461" fg:w="29"/><text x="95.4823%" y="335.50"></text></g><g><title>core::slice::sort::partial_insertion_sort (438 samples, 0.45%)</title><rect x="94.8295%" y="389" width="0.4511%" height="15" fill="rgb(239,223,50)" fg:x="92070" fg:w="438"/><text x="95.0795%" y="399.50"></text></g><g><title>core::ops::function::FnMut::call_mut (11 samples, 0.01%)</title><rect x="95.3136%" y="373" width="0.0113%" height="15" fill="rgb(244,45,21)" fg:x="92540" fg:w="11"/><text x="95.5636%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.01%)</title><rect x="95.5464%" y="357" width="0.0103%" height="15" fill="rgb(232,33,43)" fg:x="92766" fg:w="10"/><text x="95.7964%" y="367.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (23 samples, 0.02%)</title><rect x="95.6700%" y="325" width="0.0237%" height="15" fill="rgb(209,8,3)" fg:x="92886" fg:w="23"/><text x="95.9200%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (19 samples, 0.02%)</title><rect x="95.6947%" y="325" width="0.0196%" height="15" fill="rgb(214,25,53)" fg:x="92910" fg:w="19"/><text x="95.9447%" y="335.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (456 samples, 0.47%)</title><rect x="95.5567%" y="357" width="0.4697%" height="15" fill="rgb(254,186,54)" fg:x="92776" fg:w="456"/><text x="95.8067%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (455 samples, 0.47%)</title><rect x="95.5577%" y="341" width="0.4686%" height="15" fill="rgb(208,174,49)" fg:x="92777" fg:w="455"/><text x="95.8077%" y="351.50"></text></g><g><title>core::mem::replace (303 samples, 0.31%)</title><rect x="95.7143%" y="325" width="0.3121%" height="15" fill="rgb(233,191,51)" fg:x="92929" fg:w="303"/><text x="95.9643%" y="335.50"></text></g><g><title>core::ptr::read (63 samples, 0.06%)</title><rect x="95.9615%" y="309" width="0.0649%" height="15" fill="rgb(222,134,10)" fg:x="93169" fg:w="63"/><text x="96.2115%" y="319.50"></text></g><g><title>core::ops::function::FnMut::call_mut (86 samples, 0.09%)</title><rect x="96.0264%" y="357" width="0.0886%" height="15" fill="rgb(230,226,20)" fg:x="93232" fg:w="86"/><text x="96.2764%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (140 samples, 0.14%)</title><rect x="96.1149%" y="357" width="0.1442%" height="15" fill="rgb(251,111,25)" fg:x="93318" fg:w="140"/><text x="96.3649%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (129 samples, 0.13%)</title><rect x="96.1263%" y="341" width="0.1329%" height="15" fill="rgb(224,40,46)" fg:x="93329" fg:w="129"/><text x="96.3763%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (36 samples, 0.04%)</title><rect x="96.2591%" y="357" width="0.0371%" height="15" fill="rgb(236,108,47)" fg:x="93458" fg:w="36"/><text x="96.5091%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (31 samples, 0.03%)</title><rect x="96.2643%" y="341" width="0.0319%" height="15" fill="rgb(234,93,0)" fg:x="93463" fg:w="31"/><text x="96.5143%" y="351.50"></text></g><g><title>core::ptr::swap (16 samples, 0.02%)</title><rect x="96.2993%" y="357" width="0.0165%" height="15" fill="rgb(224,213,32)" fg:x="93497" fg:w="16"/><text x="96.5493%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.01%)</title><rect x="96.3055%" y="341" width="0.0103%" height="15" fill="rgb(251,11,48)" fg:x="93503" fg:w="10"/><text x="96.5555%" y="351.50"></text></g><g><title>core::slice::sort::partition (1,012 samples, 1.04%)</title><rect x="95.2807%" y="389" width="1.0423%" height="15" fill="rgb(236,173,5)" fg:x="92508" fg:w="1012"/><text x="95.5307%" y="399.50"></text></g><g><title>core::slice::sort::partition_in_blocks (941 samples, 0.97%)</title><rect x="95.3538%" y="373" width="0.9692%" height="15" fill="rgb(230,95,12)" fg:x="92579" fg:w="941"/><text x="95.6038%" y="383.50"></text></g><g><title>core::ops::function::FnMut::call_mut (51 samples, 0.05%)</title><rect x="96.5166%" y="373" width="0.0525%" height="15" fill="rgb(232,209,1)" fg:x="93708" fg:w="51"/><text x="96.7666%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (20 samples, 0.02%)</title><rect x="96.5795%" y="373" width="0.0206%" height="15" fill="rgb(232,6,1)" fg:x="93769" fg:w="20"/><text x="96.8295%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (20 samples, 0.02%)</title><rect x="96.5795%" y="357" width="0.0206%" height="15" fill="rgb(210,224,50)" fg:x="93769" fg:w="20"/><text x="96.8295%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (16 samples, 0.02%)</title><rect x="96.5836%" y="341" width="0.0165%" height="15" fill="rgb(228,127,35)" fg:x="93773" fg:w="16"/><text x="96.8336%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (15 samples, 0.02%)</title><rect x="96.5846%" y="325" width="0.0154%" height="15" fill="rgb(245,102,45)" fg:x="93774" fg:w="15"/><text x="96.8346%" y="335.50"></text></g><g><title>core::slice::sort::partition_equal (272 samples, 0.28%)</title><rect x="96.3230%" y="389" width="0.2802%" height="15" fill="rgb(214,1,49)" fg:x="93520" fg:w="272"/><text x="96.5730%" y="399.50"></text></g><g><title>core::slice::sort::choose_pivot (18 samples, 0.02%)</title><rect x="96.6062%" y="373" width="0.0185%" height="15" fill="rgb(226,163,40)" fg:x="93795" fg:w="18"/><text x="96.8562%" y="383.50"></text></g><g><title>core::slice::sort::choose_pivot::{{closure}} (18 samples, 0.02%)</title><rect x="96.6062%" y="357" width="0.0185%" height="15" fill="rgb(239,212,28)" fg:x="93795" fg:w="18"/><text x="96.8562%" y="367.50"></text></g><g><title>core::slice::sort::choose_pivot::{{closure}} (17 samples, 0.02%)</title><rect x="96.6073%" y="341" width="0.0175%" height="15" fill="rgb(220,20,13)" fg:x="93796" fg:w="17"/><text x="96.8573%" y="351.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (16 samples, 0.02%)</title><rect x="96.6268%" y="357" width="0.0165%" height="15" fill="rgb(210,164,35)" fg:x="93815" fg:w="16"/><text x="96.8768%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (16 samples, 0.02%)</title><rect x="96.6268%" y="341" width="0.0165%" height="15" fill="rgb(248,109,41)" fg:x="93815" fg:w="16"/><text x="96.8768%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (23 samples, 0.02%)</title><rect x="96.6433%" y="357" width="0.0237%" height="15" fill="rgb(238,23,50)" fg:x="93831" fg:w="23"/><text x="96.8933%" y="367.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (23 samples, 0.02%)</title><rect x="96.6433%" y="341" width="0.0237%" height="15" fill="rgb(211,48,49)" fg:x="93831" fg:w="23"/><text x="96.8933%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (22 samples, 0.02%)</title><rect x="96.6444%" y="325" width="0.0227%" height="15" fill="rgb(223,36,21)" fg:x="93832" fg:w="22"/><text x="96.8944%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (14 samples, 0.01%)</title><rect x="96.6526%" y="309" width="0.0144%" height="15" fill="rgb(207,123,46)" fg:x="93840" fg:w="14"/><text x="96.9026%" y="319.50"></text></g><g><title>core::slice::sort::insertion_sort (54 samples, 0.06%)</title><rect x="96.6248%" y="373" width="0.0556%" height="15" fill="rgb(240,218,32)" fg:x="93813" fg:w="54"/><text x="96.8748%" y="383.50"></text></g><g><title>core::slice::sort::shift_tail (13 samples, 0.01%)</title><rect x="96.6670%" y="357" width="0.0134%" height="15" fill="rgb(252,5,43)" fg:x="93854" fg:w="13"/><text x="96.9170%" y="367.50"></text></g><g><title>core::ops::function::FnMut::call_mut (28 samples, 0.03%)</title><rect x="96.7607%" y="357" width="0.0288%" height="15" fill="rgb(252,84,19)" fg:x="93945" fg:w="28"/><text x="97.0107%" y="367.50"></text></g><g><title>core::slice::sort::partial_insertion_sort (121 samples, 0.12%)</title><rect x="96.6804%" y="373" width="0.1246%" height="15" fill="rgb(243,152,39)" fg:x="93867" fg:w="121"/><text x="96.9304%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (15 samples, 0.02%)</title><rect x="96.7896%" y="357" width="0.0154%" height="15" fill="rgb(234,160,15)" fg:x="93973" fg:w="15"/><text x="97.0396%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (12 samples, 0.01%)</title><rect x="96.7927%" y="341" width="0.0124%" height="15" fill="rgb(237,34,20)" fg:x="93976" fg:w="12"/><text x="97.0427%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (11 samples, 0.01%)</title><rect x="96.7937%" y="325" width="0.0113%" height="15" fill="rgb(229,97,13)" fg:x="93977" fg:w="11"/><text x="97.0437%" y="335.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (31 samples, 0.03%)</title><rect x="96.8225%" y="341" width="0.0319%" height="15" fill="rgb(234,71,50)" fg:x="94005" fg:w="31"/><text x="97.0725%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (31 samples, 0.03%)</title><rect x="96.8225%" y="325" width="0.0319%" height="15" fill="rgb(253,155,4)" fg:x="94005" fg:w="31"/><text x="97.0725%" y="335.50"></text></g><g><title>core::mem::replace (19 samples, 0.02%)</title><rect x="96.8349%" y="309" width="0.0196%" height="15" fill="rgb(222,185,37)" fg:x="94017" fg:w="19"/><text x="97.0849%" y="319.50"></text></g><g><title>core::slice::sort::partition (62 samples, 0.06%)</title><rect x="96.8050%" y="373" width="0.0639%" height="15" fill="rgb(251,177,13)" fg:x="93988" fg:w="62"/><text x="97.0550%" y="383.50"></text></g><g><title>core::slice::sort::partition_in_blocks (61 samples, 0.06%)</title><rect x="96.8061%" y="357" width="0.0628%" height="15" fill="rgb(250,179,40)" fg:x="93989" fg:w="61"/><text x="97.0561%" y="367.50"></text></g><g><title>core::slice::sort::partition_equal (10 samples, 0.01%)</title><rect x="96.8689%" y="373" width="0.0103%" height="15" fill="rgb(242,44,2)" fg:x="94050" fg:w="10"/><text x="97.1189%" y="383.50"></text></g><g><title>core::slice::sort::partition (13 samples, 0.01%)</title><rect x="96.8885%" y="357" width="0.0134%" height="15" fill="rgb(216,177,13)" fg:x="94069" fg:w="13"/><text x="97.1385%" y="367.50"></text></g><g><title>core::slice::sort::partition_in_blocks (11 samples, 0.01%)</title><rect x="96.8905%" y="341" width="0.0113%" height="15" fill="rgb(216,106,43)" fg:x="94071" fg:w="11"/><text x="97.1405%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable (66,199 samples, 68.18%)</title><rect x="28.7259%" y="501" width="68.1831%" height="15" fill="rgb(216,183,2)" fg:x="27890" fg:w="66199"/><text x="28.9759%" y="511.50">core::slice::&lt;impl [T]&gt;::sort_unstable</text></g><g><title>core::slice::sort::quicksort (66,199 samples, 68.18%)</title><rect x="28.7259%" y="485" width="68.1831%" height="15" fill="rgb(249,75,3)" fg:x="27890" fg:w="66199"/><text x="28.9759%" y="495.50">core::slice::sort::quicksort</text></g><g><title>core::slice::sort::recurse (66,197 samples, 68.18%)</title><rect x="28.7280%" y="469" width="68.1811%" height="15" fill="rgb(219,67,39)" fg:x="27892" fg:w="66197"/><text x="28.9780%" y="479.50">core::slice::sort::recurse</text></g><g><title>core::slice::sort::recurse (45,150 samples, 46.50%)</title><rect x="50.4058%" y="453" width="46.5032%" height="15" fill="rgb(253,228,2)" fg:x="48939" fg:w="45150"/><text x="50.6558%" y="463.50">core::slice::sort::recurse</text></g><g><title>core::slice::sort::recurse (25,087 samples, 25.84%)</title><rect x="71.0701%" y="437" width="25.8389%" height="15" fill="rgb(235,138,27)" fg:x="69002" fg:w="25087"/><text x="71.3201%" y="447.50">core::slice::sort::recurse</text></g><g><title>core::slice::sort::recurse (10,233 samples, 10.54%)</title><rect x="86.3693%" y="421" width="10.5397%" height="15" fill="rgb(236,97,51)" fg:x="83856" fg:w="10233"/><text x="86.6193%" y="431.50">core::slice::so..</text></g><g><title>core::slice::sort::recurse (2,462 samples, 2.54%)</title><rect x="94.3733%" y="405" width="2.5358%" height="15" fill="rgb(240,80,30)" fg:x="91627" fg:w="2462"/><text x="94.6233%" y="415.50">co..</text></g><g><title>core::slice::sort::recurse (297 samples, 0.31%)</title><rect x="96.6032%" y="389" width="0.3059%" height="15" fill="rgb(230,178,19)" fg:x="93792" fg:w="297"/><text x="96.8532%" y="399.50"></text></g><g><title>core::slice::sort::recurse (29 samples, 0.03%)</title><rect x="96.8792%" y="373" width="0.0299%" height="15" fill="rgb(210,190,27)" fg:x="94060" fg:w="29"/><text x="97.1292%" y="383.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::get_mut (41 samples, 0.04%)</title><rect x="96.9709%" y="485" width="0.0422%" height="15" fill="rgb(222,107,31)" fg:x="94149" fg:w="41"/><text x="97.2209%" y="495.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::get_mut (40 samples, 0.04%)</title><rect x="96.9719%" y="469" width="0.0412%" height="15" fill="rgb(216,127,34)" fg:x="94150" fg:w="40"/><text x="97.2219%" y="479.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (24 samples, 0.02%)</title><rect x="96.9884%" y="453" width="0.0247%" height="15" fill="rgb(234,116,52)" fg:x="94166" fg:w="24"/><text x="97.2384%" y="463.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (137 samples, 0.14%)</title><rect x="96.9091%" y="501" width="0.1411%" height="15" fill="rgb(222,124,15)" fg:x="94089" fg:w="137"/><text x="97.1591%" y="511.50"></text></g><g><title>wfc::wfc::queueprop::QueueProp::legal_tiles::{{closure}} (36 samples, 0.04%)</title><rect x="97.0131%" y="485" width="0.0371%" height="15" fill="rgb(231,179,28)" fg:x="94190" fg:w="36"/><text x="97.2631%" y="495.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (71 samples, 0.07%)</title><rect x="97.1295%" y="485" width="0.0731%" height="15" fill="rgb(226,93,45)" fg:x="94303" fg:w="71"/><text x="97.3795%" y="495.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (58 samples, 0.06%)</title><rect x="97.1429%" y="469" width="0.0597%" height="15" fill="rgb(215,8,51)" fg:x="94316" fg:w="58"/><text x="97.3929%" y="479.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (47 samples, 0.05%)</title><rect x="97.1542%" y="453" width="0.0484%" height="15" fill="rgb(223,106,5)" fg:x="94327" fg:w="47"/><text x="97.4042%" y="463.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (35 samples, 0.04%)</title><rect x="97.1665%" y="437" width="0.0360%" height="15" fill="rgb(250,191,5)" fg:x="94339" fg:w="35"/><text x="97.4165%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (25 samples, 0.03%)</title><rect x="97.1768%" y="421" width="0.0257%" height="15" fill="rgb(242,132,44)" fg:x="94349" fg:w="25"/><text x="97.4268%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (25 samples, 0.03%)</title><rect x="97.1768%" y="405" width="0.0257%" height="15" fill="rgb(251,152,29)" fg:x="94349" fg:w="25"/><text x="97.4268%" y="415.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (13 samples, 0.01%)</title><rect x="97.2180%" y="437" width="0.0134%" height="15" fill="rgb(218,179,5)" fg:x="94389" fg:w="13"/><text x="97.4680%" y="447.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (19 samples, 0.02%)</title><rect x="97.2726%" y="405" width="0.0196%" height="15" fill="rgb(227,67,19)" fg:x="94442" fg:w="19"/><text x="97.5226%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (74 samples, 0.08%)</title><rect x="97.2438%" y="421" width="0.0762%" height="15" fill="rgb(233,119,31)" fg:x="94414" fg:w="74"/><text x="97.4938%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (27 samples, 0.03%)</title><rect x="97.2922%" y="405" width="0.0278%" height="15" fill="rgb(241,120,22)" fg:x="94461" fg:w="27"/><text x="97.5422%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (24 samples, 0.02%)</title><rect x="97.2953%" y="389" width="0.0247%" height="15" fill="rgb(224,102,30)" fg:x="94464" fg:w="24"/><text x="97.5453%" y="399.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert (291 samples, 0.30%)</title><rect x="97.0502%" y="501" width="0.2997%" height="15" fill="rgb(210,164,37)" fg:x="94226" fg:w="291"/><text x="97.3002%" y="511.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (143 samples, 0.15%)</title><rect x="97.2026%" y="485" width="0.1473%" height="15" fill="rgb(226,191,16)" fg:x="94374" fg:w="143"/><text x="97.4526%" y="495.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (141 samples, 0.15%)</title><rect x="97.2047%" y="469" width="0.1452%" height="15" fill="rgb(214,40,45)" fg:x="94376" fg:w="141"/><text x="97.4547%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (134 samples, 0.14%)</title><rect x="97.2119%" y="453" width="0.1380%" height="15" fill="rgb(244,29,26)" fg:x="94383" fg:w="134"/><text x="97.4619%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (106 samples, 0.11%)</title><rect x="97.2407%" y="437" width="0.1092%" height="15" fill="rgb(216,16,5)" fg:x="94411" fg:w="106"/><text x="97.4907%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (29 samples, 0.03%)</title><rect x="97.3200%" y="421" width="0.0299%" height="15" fill="rgb(249,76,35)" fg:x="94488" fg:w="29"/><text x="97.5700%" y="431.50"></text></g><g><title>hashbrown::raw::h2 (21 samples, 0.02%)</title><rect x="97.3283%" y="405" width="0.0216%" height="15" fill="rgb(207,11,44)" fg:x="94496" fg:w="21"/><text x="97.5783%" y="415.50"></text></g><g><title>core::cmp::Ord::min (21 samples, 0.02%)</title><rect x="97.3283%" y="389" width="0.0216%" height="15" fill="rgb(228,190,49)" fg:x="94496" fg:w="21"/><text x="97.5783%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.02%)</title><rect x="97.4869%" y="389" width="0.0175%" height="15" fill="rgb(214,173,12)" fg:x="94650" fg:w="17"/><text x="97.7369%" y="399.50"></text></g><g><title>[libc.so.6] (17 samples, 0.02%)</title><rect x="97.4869%" y="373" width="0.0175%" height="15" fill="rgb(218,26,35)" fg:x="94650" fg:w="17"/><text x="97.7369%" y="383.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (37 samples, 0.04%)</title><rect x="97.5044%" y="389" width="0.0381%" height="15" fill="rgb(220,200,19)" fg:x="94667" fg:w="37"/><text x="97.7544%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (37 samples, 0.04%)</title><rect x="97.5044%" y="373" width="0.0381%" height="15" fill="rgb(239,95,49)" fg:x="94667" fg:w="37"/><text x="97.7544%" y="383.50"></text></g><g><title>core::mem::replace (14 samples, 0.01%)</title><rect x="97.5281%" y="357" width="0.0144%" height="15" fill="rgb(235,85,53)" fg:x="94690" fg:w="14"/><text x="97.7781%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (17 samples, 0.02%)</title><rect x="97.5919%" y="277" width="0.0175%" height="15" fill="rgb(233,133,31)" fg:x="94752" fg:w="17"/><text x="97.8419%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (80 samples, 0.08%)</title><rect x="97.5724%" y="325" width="0.0824%" height="15" fill="rgb(218,25,20)" fg:x="94733" fg:w="80"/><text x="97.8224%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (76 samples, 0.08%)</title><rect x="97.5765%" y="309" width="0.0783%" height="15" fill="rgb(252,210,38)" fg:x="94737" fg:w="76"/><text x="97.8265%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (76 samples, 0.08%)</title><rect x="97.5765%" y="293" width="0.0783%" height="15" fill="rgb(242,134,21)" fg:x="94737" fg:w="76"/><text x="97.8265%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (44 samples, 0.05%)</title><rect x="97.6094%" y="277" width="0.0453%" height="15" fill="rgb(213,28,48)" fg:x="94769" fg:w="44"/><text x="97.8594%" y="287.50"></text></g><g><title>[libc.so.6] (17 samples, 0.02%)</title><rect x="97.6651%" y="293" width="0.0175%" height="15" fill="rgb(250,196,2)" fg:x="94823" fg:w="17"/><text x="97.9151%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (34 samples, 0.04%)</title><rect x="97.6548%" y="325" width="0.0350%" height="15" fill="rgb(227,5,17)" fg:x="94813" fg:w="34"/><text x="97.9048%" y="335.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (24 samples, 0.02%)</title><rect x="97.6651%" y="309" width="0.0247%" height="15" fill="rgb(221,226,24)" fg:x="94823" fg:w="24"/><text x="97.9151%" y="319.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (150 samples, 0.15%)</title><rect x="97.5641%" y="373" width="0.1545%" height="15" fill="rgb(211,5,48)" fg:x="94725" fg:w="150"/><text x="97.8141%" y="383.50"></text></g><g><title>hashbrown::map::make_hash (149 samples, 0.15%)</title><rect x="97.5651%" y="357" width="0.1535%" height="15" fill="rgb(219,150,6)" fg:x="94726" fg:w="149"/><text x="97.8151%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (146 samples, 0.15%)</title><rect x="97.5682%" y="341" width="0.1504%" height="15" fill="rgb(251,46,16)" fg:x="94729" fg:w="146"/><text x="97.8182%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (28 samples, 0.03%)</title><rect x="97.6898%" y="325" width="0.0288%" height="15" fill="rgb(220,204,40)" fg:x="94847" fg:w="28"/><text x="97.9398%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (26 samples, 0.03%)</title><rect x="97.6918%" y="309" width="0.0268%" height="15" fill="rgb(211,85,2)" fg:x="94849" fg:w="26"/><text x="97.9418%" y="319.50"></text></g><g><title>core::hash::Hasher::write_u8 (24 samples, 0.02%)</title><rect x="97.6939%" y="293" width="0.0247%" height="15" fill="rgb(229,17,7)" fg:x="94851" fg:w="24"/><text x="97.9439%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (23 samples, 0.02%)</title><rect x="97.6949%" y="277" width="0.0237%" height="15" fill="rgb(239,72,28)" fg:x="94852" fg:w="23"/><text x="97.9449%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (21 samples, 0.02%)</title><rect x="97.6970%" y="261" width="0.0216%" height="15" fill="rgb(230,47,54)" fg:x="94854" fg:w="21"/><text x="97.9470%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (20 samples, 0.02%)</title><rect x="97.6980%" y="245" width="0.0206%" height="15" fill="rgb(214,50,8)" fg:x="94855" fg:w="20"/><text x="97.9480%" y="255.50"></text></g><g><title>core::hash::sip::u8to64_le (11 samples, 0.01%)</title><rect x="97.7073%" y="229" width="0.0113%" height="15" fill="rgb(216,198,43)" fg:x="94864" fg:w="11"/><text x="97.9573%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (181 samples, 0.19%)</title><rect x="97.5487%" y="389" width="0.1864%" height="15" fill="rgb(234,20,35)" fg:x="94710" fg:w="181"/><text x="97.7987%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket (10 samples, 0.01%)</title><rect x="97.7248%" y="373" width="0.0103%" height="15" fill="rgb(254,45,19)" fg:x="94881" fg:w="10"/><text x="97.9748%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (10 samples, 0.01%)</title><rect x="97.7361%" y="373" width="0.0103%" height="15" fill="rgb(219,14,44)" fg:x="94892" fg:w="10"/><text x="97.9861%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket_ptr (16 samples, 0.02%)</title><rect x="97.7351%" y="389" width="0.0165%" height="15" fill="rgb(217,220,26)" fg:x="94891" fg:w="16"/><text x="97.9851%" y="399.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (15 samples, 0.02%)</title><rect x="97.7773%" y="357" width="0.0154%" height="15" fill="rgb(213,158,28)" fg:x="94932" fg:w="15"/><text x="98.0273%" y="367.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit_nonzero (13 samples, 0.01%)</title><rect x="97.7794%" y="341" width="0.0134%" height="15" fill="rgb(252,51,52)" fg:x="94934" fg:w="13"/><text x="98.0294%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (20 samples, 0.02%)</title><rect x="97.7938%" y="357" width="0.0206%" height="15" fill="rgb(246,89,16)" fg:x="94948" fg:w="20"/><text x="98.0438%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (67 samples, 0.07%)</title><rect x="97.7670%" y="373" width="0.0690%" height="15" fill="rgb(216,158,49)" fg:x="94922" fg:w="67"/><text x="98.0170%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (21 samples, 0.02%)</title><rect x="97.8144%" y="357" width="0.0216%" height="15" fill="rgb(236,107,19)" fg:x="94968" fg:w="21"/><text x="98.0644%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (16 samples, 0.02%)</title><rect x="97.8195%" y="341" width="0.0165%" height="15" fill="rgb(228,185,30)" fg:x="94973" fg:w="16"/><text x="98.0695%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (98 samples, 0.10%)</title><rect x="97.7588%" y="389" width="0.1009%" height="15" fill="rgb(246,134,8)" fg:x="94914" fg:w="98"/><text x="98.0088%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (23 samples, 0.02%)</title><rect x="97.8360%" y="373" width="0.0237%" height="15" fill="rgb(214,143,50)" fg:x="94989" fg:w="23"/><text x="98.0860%" y="383.50"></text></g><g><title>hashbrown::raw::h2 (17 samples, 0.02%)</title><rect x="97.8422%" y="357" width="0.0175%" height="15" fill="rgb(228,75,8)" fg:x="94995" fg:w="17"/><text x="98.0922%" y="367.50"></text></g><g><title>core::cmp::Ord::min (14 samples, 0.01%)</title><rect x="97.8453%" y="341" width="0.0144%" height="15" fill="rgb(207,175,4)" fg:x="94998" fg:w="14"/><text x="98.0953%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (14 samples, 0.01%)</title><rect x="97.8638%" y="357" width="0.0144%" height="15" fill="rgb(205,108,24)" fg:x="95016" fg:w="14"/><text x="98.1138%" y="367.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (12 samples, 0.01%)</title><rect x="97.8659%" y="341" width="0.0124%" height="15" fill="rgb(244,120,49)" fg:x="95018" fg:w="12"/><text x="98.1159%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.01%)</title><rect x="97.8659%" y="325" width="0.0124%" height="15" fill="rgb(223,47,38)" fg:x="95018" fg:w="12"/><text x="98.1159%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.01%)</title><rect x="97.8659%" y="309" width="0.0124%" height="15" fill="rgb(229,179,11)" fg:x="95018" fg:w="12"/><text x="98.1159%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (21 samples, 0.02%)</title><rect x="97.8597%" y="373" width="0.0216%" height="15" fill="rgb(231,122,1)" fg:x="95012" fg:w="21"/><text x="98.1097%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (398 samples, 0.41%)</title><rect x="97.4724%" y="421" width="0.4099%" height="15" fill="rgb(245,119,9)" fg:x="94636" fg:w="398"/><text x="97.7224%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (396 samples, 0.41%)</title><rect x="97.4745%" y="405" width="0.4079%" height="15" fill="rgb(241,163,25)" fg:x="94638" fg:w="396"/><text x="97.7245%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (22 samples, 0.02%)</title><rect x="97.8597%" y="389" width="0.0227%" height="15" fill="rgb(217,214,3)" fg:x="95012" fg:w="22"/><text x="98.1097%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (403 samples, 0.42%)</title><rect x="97.4694%" y="469" width="0.4151%" height="15" fill="rgb(240,86,28)" fg:x="94633" fg:w="403"/><text x="97.7194%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (401 samples, 0.41%)</title><rect x="97.4714%" y="453" width="0.4130%" height="15" fill="rgb(215,47,9)" fg:x="94635" fg:w="401"/><text x="97.7214%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (400 samples, 0.41%)</title><rect x="97.4724%" y="437" width="0.4120%" height="15" fill="rgb(252,25,45)" fg:x="94636" fg:w="400"/><text x="97.7224%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (66 samples, 0.07%)</title><rect x="97.9874%" y="389" width="0.0680%" height="15" fill="rgb(251,164,9)" fg:x="95136" fg:w="66"/><text x="98.2374%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (22 samples, 0.02%)</title><rect x="98.3232%" y="373" width="0.0227%" height="15" fill="rgb(233,194,0)" fg:x="95462" fg:w="22"/><text x="98.5732%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (417 samples, 0.43%)</title><rect x="97.9174%" y="437" width="0.4295%" height="15" fill="rgb(249,111,24)" fg:x="95068" fg:w="417"/><text x="98.1674%" y="447.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (411 samples, 0.42%)</title><rect x="97.9236%" y="421" width="0.4233%" height="15" fill="rgb(250,223,3)" fg:x="95074" fg:w="411"/><text x="98.1736%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (411 samples, 0.42%)</title><rect x="97.9236%" y="405" width="0.4233%" height="15" fill="rgb(236,178,37)" fg:x="95074" fg:w="411"/><text x="98.1736%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (283 samples, 0.29%)</title><rect x="98.0554%" y="389" width="0.2915%" height="15" fill="rgb(241,158,50)" fg:x="95202" fg:w="283"/><text x="98.3054%" y="399.50"></text></g><g><title>[libc.so.6] (51 samples, 0.05%)</title><rect x="98.3469%" y="421" width="0.0525%" height="15" fill="rgb(213,121,41)" fg:x="95485" fg:w="51"/><text x="98.5969%" y="431.50"></text></g><g><title>[libc.so.6] (92 samples, 0.09%)</title><rect x="98.4015%" y="405" width="0.0948%" height="15" fill="rgb(240,92,3)" fg:x="95538" fg:w="92"/><text x="98.6515%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (176 samples, 0.18%)</title><rect x="98.3469%" y="437" width="0.1813%" height="15" fill="rgb(205,123,3)" fg:x="95485" fg:w="176"/><text x="98.5969%" y="447.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (123 samples, 0.13%)</title><rect x="98.4015%" y="421" width="0.1267%" height="15" fill="rgb(205,97,47)" fg:x="95538" fg:w="123"/><text x="98.6515%" y="431.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (31 samples, 0.03%)</title><rect x="98.4962%" y="405" width="0.0319%" height="15" fill="rgb(247,152,14)" fg:x="95630" fg:w="31"/><text x="98.7462%" y="415.50"></text></g><g><title>hashbrown::map::make_insert_hash (733 samples, 0.75%)</title><rect x="97.8844%" y="469" width="0.7550%" height="15" fill="rgb(248,195,53)" fg:x="95036" fg:w="733"/><text x="98.1344%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (721 samples, 0.74%)</title><rect x="97.8968%" y="453" width="0.7426%" height="15" fill="rgb(226,201,16)" fg:x="95048" fg:w="721"/><text x="98.1468%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (108 samples, 0.11%)</title><rect x="98.5282%" y="437" width="0.1112%" height="15" fill="rgb(205,98,0)" fg:x="95661" fg:w="108"/><text x="98.7782%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (103 samples, 0.11%)</title><rect x="98.5333%" y="421" width="0.1061%" height="15" fill="rgb(214,191,48)" fg:x="95666" fg:w="103"/><text x="98.7833%" y="431.50"></text></g><g><title>core::hash::Hasher::write_u8 (92 samples, 0.09%)</title><rect x="98.5446%" y="405" width="0.0948%" height="15" fill="rgb(237,112,39)" fg:x="95677" fg:w="92"/><text x="98.7946%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (88 samples, 0.09%)</title><rect x="98.5488%" y="389" width="0.0906%" height="15" fill="rgb(247,203,27)" fg:x="95681" fg:w="88"/><text x="98.7988%" y="399.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (82 samples, 0.08%)</title><rect x="98.5549%" y="373" width="0.0845%" height="15" fill="rgb(235,124,28)" fg:x="95687" fg:w="82"/><text x="98.8049%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (80 samples, 0.08%)</title><rect x="98.5570%" y="357" width="0.0824%" height="15" fill="rgb(208,207,46)" fg:x="95689" fg:w="80"/><text x="98.8070%" y="367.50"></text></g><g><title>core::hash::sip::u8to64_le (38 samples, 0.04%)</title><rect x="98.6003%" y="341" width="0.0391%" height="15" fill="rgb(234,176,4)" fg:x="95731" fg:w="38"/><text x="98.8503%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (15 samples, 0.02%)</title><rect x="98.6476%" y="453" width="0.0154%" height="15" fill="rgb(230,133,28)" fg:x="95777" fg:w="15"/><text x="98.8976%" y="463.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (14 samples, 0.01%)</title><rect x="98.6487%" y="437" width="0.0144%" height="15" fill="rgb(211,137,40)" fg:x="95778" fg:w="14"/><text x="98.8987%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (20 samples, 0.02%)</title><rect x="98.7579%" y="437" width="0.0206%" height="15" fill="rgb(254,35,13)" fg:x="95884" fg:w="20"/><text x="99.0079%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (94 samples, 0.10%)</title><rect x="98.7785%" y="437" width="0.0968%" height="15" fill="rgb(225,49,51)" fg:x="95904" fg:w="94"/><text x="99.0285%" y="447.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (65 samples, 0.07%)</title><rect x="98.8083%" y="421" width="0.0669%" height="15" fill="rgb(251,10,15)" fg:x="95933" fg:w="65"/><text x="99.0583%" y="431.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit_nonzero (40 samples, 0.04%)</title><rect x="98.8341%" y="405" width="0.0412%" height="15" fill="rgb(228,207,15)" fg:x="95958" fg:w="40"/><text x="99.0841%" y="415.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (37 samples, 0.04%)</title><rect x="98.9546%" y="421" width="0.0381%" height="15" fill="rgb(241,99,19)" fg:x="96075" fg:w="37"/><text x="99.2046%" y="431.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (19 samples, 0.02%)</title><rect x="98.9731%" y="405" width="0.0196%" height="15" fill="rgb(207,104,49)" fg:x="96093" fg:w="19"/><text x="99.2231%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (11 samples, 0.01%)</title><rect x="98.9814%" y="389" width="0.0113%" height="15" fill="rgb(234,99,18)" fg:x="96101" fg:w="11"/><text x="99.2314%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (11 samples, 0.01%)</title><rect x="98.9814%" y="373" width="0.0113%" height="15" fill="rgb(213,191,49)" fg:x="96101" fg:w="11"/><text x="99.2314%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (24 samples, 0.02%)</title><rect x="99.0133%" y="405" width="0.0247%" height="15" fill="rgb(210,226,19)" fg:x="96132" fg:w="24"/><text x="99.2633%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (45 samples, 0.05%)</title><rect x="98.9927%" y="421" width="0.0463%" height="15" fill="rgb(229,97,18)" fg:x="96112" fg:w="45"/><text x="99.2427%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (189 samples, 0.19%)</title><rect x="98.8753%" y="437" width="0.1947%" height="15" fill="rgb(211,167,15)" fg:x="95998" fg:w="189"/><text x="99.1253%" y="447.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::{{closure}} (30 samples, 0.03%)</title><rect x="99.0390%" y="421" width="0.0309%" height="15" fill="rgb(210,169,34)" fg:x="96157" fg:w="30"/><text x="99.2890%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u8&gt;::eq (13 samples, 0.01%)</title><rect x="99.0565%" y="405" width="0.0134%" height="15" fill="rgb(241,121,31)" fg:x="96174" fg:w="13"/><text x="99.3065%" y="415.50"></text></g><g><title>hashbrown::raw::h2 (116 samples, 0.12%)</title><rect x="99.0761%" y="437" width="0.1195%" height="15" fill="rgb(232,40,11)" fg:x="96193" fg:w="116"/><text x="99.3261%" y="447.50"></text></g><g><title>core::cmp::Ord::min (110 samples, 0.11%)</title><rect x="99.0823%" y="421" width="0.1133%" height="15" fill="rgb(205,86,26)" fg:x="96199" fg:w="110"/><text x="99.3323%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (22 samples, 0.02%)</title><rect x="99.1729%" y="405" width="0.0227%" height="15" fill="rgb(231,126,28)" fg:x="96287" fg:w="22"/><text x="99.4229%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (116 samples, 0.12%)</title><rect x="99.1956%" y="437" width="0.1195%" height="15" fill="rgb(219,221,18)" fg:x="96309" fg:w="116"/><text x="99.4456%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (91 samples, 0.09%)</title><rect x="99.4170%" y="421" width="0.0937%" height="15" fill="rgb(211,40,0)" fg:x="96524" fg:w="91"/><text x="99.6670%" y="431.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (24 samples, 0.02%)</title><rect x="99.4860%" y="405" width="0.0247%" height="15" fill="rgb(239,85,43)" fg:x="96591" fg:w="24"/><text x="99.7360%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (75 samples, 0.08%)</title><rect x="99.5108%" y="421" width="0.0772%" height="15" fill="rgb(231,55,21)" fg:x="96615" fg:w="75"/><text x="99.7608%" y="431.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (11 samples, 0.01%)</title><rect x="99.5767%" y="405" width="0.0113%" height="15" fill="rgb(225,184,43)" fg:x="96679" fg:w="11"/><text x="99.8267%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (435 samples, 0.45%)</title><rect x="99.3151%" y="437" width="0.4480%" height="15" fill="rgb(251,158,41)" fg:x="96425" fg:w="435"/><text x="99.5651%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (170 samples, 0.18%)</title><rect x="99.5880%" y="421" width="0.1751%" height="15" fill="rgb(234,159,37)" fg:x="96690" fg:w="170"/><text x="99.8380%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (165 samples, 0.17%)</title><rect x="99.5932%" y="405" width="0.1699%" height="15" fill="rgb(216,204,22)" fg:x="96695" fg:w="165"/><text x="99.8432%" y="415.50"></text></g><g><title>core::core_arch::simd::i8x16::new (42 samples, 0.04%)</title><rect x="99.7198%" y="389" width="0.0433%" height="15" fill="rgb(214,17,3)" fg:x="96818" fg:w="42"/><text x="99.9698%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (21 samples, 0.02%)</title><rect x="99.7786%" y="405" width="0.0216%" height="15" fill="rgb(212,111,17)" fg:x="96875" fg:w="21"/><text x="100.0286%" y="415.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2,423 samples, 2.50%)</title><rect x="97.3571%" y="485" width="2.4956%" height="15" fill="rgb(221,157,24)" fg:x="94524" fg:w="2423"/><text x="97.6071%" y="495.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,178 samples, 1.21%)</title><rect x="98.6394%" y="469" width="1.2133%" height="15" fill="rgb(252,16,13)" fg:x="95769" fg:w="1178"/><text x="98.8894%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1,155 samples, 1.19%)</title><rect x="98.6631%" y="453" width="1.1896%" height="15" fill="rgb(221,62,2)" fg:x="95792" fg:w="1155"/><text x="98.9131%" y="463.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (87 samples, 0.09%)</title><rect x="99.7631%" y="437" width="0.0896%" height="15" fill="rgb(247,87,22)" fg:x="96860" fg:w="87"/><text x="100.0131%" y="447.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (87 samples, 0.09%)</title><rect x="99.7631%" y="421" width="0.0896%" height="15" fill="rgb(215,73,9)" fg:x="96860" fg:w="87"/><text x="100.0131%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (42 samples, 0.04%)</title><rect x="99.8095%" y="405" width="0.0433%" height="15" fill="rgb(207,175,33)" fg:x="96905" fg:w="42"/><text x="100.0595%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (40 samples, 0.04%)</title><rect x="99.8115%" y="389" width="0.0412%" height="15" fill="rgb(243,129,54)" fg:x="96907" fg:w="40"/><text x="100.0615%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (2,448 samples, 2.52%)</title><rect x="97.3499%" y="501" width="2.5214%" height="15" fill="rgb(227,119,45)" fg:x="94517" fg:w="2448"/><text x="97.5999%" y="511.50">st..</text></g><g><title>std::collections::hash::map::map_entry (18 samples, 0.02%)</title><rect x="99.8527%" y="485" width="0.0185%" height="15" fill="rgb(205,109,36)" fg:x="96947" fg:w="18"/><text x="100.1027%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_to_nonoverlapping (10 samples, 0.01%)</title><rect x="99.8929%" y="405" width="0.0103%" height="15" fill="rgb(205,6,39)" fg:x="96986" fg:w="10"/><text x="100.1429%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.01%)</title><rect x="99.8929%" y="389" width="0.0103%" height="15" fill="rgb(221,32,16)" fg:x="96986" fg:w="10"/><text x="100.1429%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (12 samples, 0.01%)</title><rect x="99.8919%" y="421" width="0.0124%" height="15" fill="rgb(228,144,50)" fg:x="96985" fg:w="12"/><text x="100.1419%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (23 samples, 0.02%)</title><rect x="99.8919%" y="437" width="0.0237%" height="15" fill="rgb(229,201,53)" fg:x="96985" fg:w="23"/><text x="100.1419%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (11 samples, 0.01%)</title><rect x="99.9042%" y="421" width="0.0113%" height="15" fill="rgb(249,153,27)" fg:x="96997" fg:w="11"/><text x="100.1542%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (11 samples, 0.01%)</title><rect x="99.9042%" y="405" width="0.0113%" height="15" fill="rgb(227,106,25)" fg:x="96997" fg:w="11"/><text x="100.1542%" y="415.50"></text></g><g><title>wfc::wfc::queueprop::QueueProp::propagate (95,568 samples, 98.43%)</title><rect x="1.4842%" y="533" width="98.4324%" height="15" fill="rgb(230,65,29)" fg:x="1441" fg:w="95568"/><text x="1.7342%" y="543.50">wfc::wfc::queueprop::QueueProp::propagate</text></g><g><title>wfc::wfc::queueprop::QueueProp::legal_tiles (95,228 samples, 98.08%)</title><rect x="1.8344%" y="517" width="98.0822%" height="15" fill="rgb(221,57,46)" fg:x="1781" fg:w="95228"/><text x="2.0844%" y="527.50">wfc::wfc::queueprop::QueueProp::legal_tiles</text></g><g><title>wfc::vec3d::Vec3D&lt;T&gt;::get (28 samples, 0.03%)</title><rect x="99.8877%" y="501" width="0.0288%" height="15" fill="rgb(229,161,17)" fg:x="96981" fg:w="28"/><text x="100.1377%" y="511.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::clone::Clone&gt;::clone (24 samples, 0.02%)</title><rect x="99.8919%" y="485" width="0.0247%" height="15" fill="rgb(222,213,11)" fg:x="96985" fg:w="24"/><text x="100.1419%" y="495.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::clone::Clone&gt;::clone (24 samples, 0.02%)</title><rect x="99.8919%" y="469" width="0.0247%" height="15" fill="rgb(235,35,13)" fg:x="96985" fg:w="24"/><text x="100.1419%" y="479.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (24 samples, 0.02%)</title><rect x="99.8919%" y="453" width="0.0247%" height="15" fill="rgb(233,158,34)" fg:x="96985" fg:w="24"/><text x="100.1419%" y="463.50"></text></g><g><title>&lt;wfc::wfc::queueprop::QueueProp as wfc::wfc::traits::WFC&gt;::solve (97,020 samples, 99.93%)</title><rect x="0.0010%" y="549" width="99.9279%" height="15" fill="rgb(215,151,48)" fg:x="1" fg:w="97020"/><text x="0.2510%" y="559.50">&lt;wfc::wfc::queueprop::QueueProp as wfc::wfc::traits::WFC&gt;::solve</text></g><g><title>wfc::wfc::utils::get_random (12 samples, 0.01%)</title><rect x="99.9166%" y="533" width="0.0124%" height="15" fill="rgb(229,84,14)" fg:x="97009" fg:w="12"/><text x="100.1666%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (12 samples, 0.01%)</title><rect x="99.9413%" y="133" width="0.0124%" height="15" fill="rgb(229,68,14)" fg:x="97033" fg:w="12"/><text x="100.1913%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (12 samples, 0.01%)</title><rect x="99.9413%" y="117" width="0.0124%" height="15" fill="rgb(243,106,26)" fg:x="97033" fg:w="12"/><text x="100.1913%" y="127.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (12 samples, 0.01%)</title><rect x="99.9413%" y="101" width="0.0124%" height="15" fill="rgb(206,45,38)" fg:x="97033" fg:w="12"/><text x="100.1913%" y="111.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (21 samples, 0.02%)</title><rect x="99.9567%" y="117" width="0.0216%" height="15" fill="rgb(226,6,15)" fg:x="97048" fg:w="21"/><text x="100.2067%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (21 samples, 0.02%)</title><rect x="99.9567%" y="101" width="0.0216%" height="15" fill="rgb(232,22,54)" fg:x="97048" fg:w="21"/><text x="100.2067%" y="111.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (21 samples, 0.02%)</title><rect x="99.9567%" y="85" width="0.0216%" height="15" fill="rgb(229,222,32)" fg:x="97048" fg:w="21"/><text x="100.2067%" y="95.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (21 samples, 0.02%)</title><rect x="99.9567%" y="69" width="0.0216%" height="15" fill="rgb(228,62,29)" fg:x="97048" fg:w="21"/><text x="100.2067%" y="79.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (50 samples, 0.05%)</title><rect x="99.9341%" y="197" width="0.0515%" height="15" fill="rgb(251,103,34)" fg:x="97026" fg:w="50"/><text x="100.1841%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (50 samples, 0.05%)</title><rect x="99.9341%" y="181" width="0.0515%" height="15" fill="rgb(233,12,30)" fg:x="97026" fg:w="50"/><text x="100.1841%" y="191.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (50 samples, 0.05%)</title><rect x="99.9341%" y="165" width="0.0515%" height="15" fill="rgb(238,52,0)" fg:x="97026" fg:w="50"/><text x="100.1841%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (50 samples, 0.05%)</title><rect x="99.9341%" y="149" width="0.0515%" height="15" fill="rgb(223,98,5)" fg:x="97026" fg:w="50"/><text x="100.1841%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (31 samples, 0.03%)</title><rect x="99.9537%" y="133" width="0.0319%" height="15" fill="rgb(228,75,37)" fg:x="97045" fg:w="31"/><text x="100.2037%" y="143.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::{{closure}} (58 samples, 0.06%)</title><rect x="99.9320%" y="213" width="0.0597%" height="15" fill="rgb(205,115,49)" fg:x="97024" fg:w="58"/><text x="100.1820%" y="223.50"></text></g><g><title>all (97,090 samples, 100%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(250,154,43)" fg:x="0" fg:w="97090"/><text x="0.2500%" y="879.50"></text></g><g><title>wfc (97,090 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(226,43,29)" fg:x="0" fg:w="97090"/><text x="0.2500%" y="863.50">wfc</text></g><g><title>_start (97,089 samples, 100.00%)</title><rect x="0.0010%" y="837" width="99.9990%" height="15" fill="rgb(249,228,39)" fg:x="1" fg:w="97089"/><text x="0.2510%" y="847.50">_start</text></g><g><title>__libc_start_main (97,089 samples, 100.00%)</title><rect x="0.0010%" y="821" width="99.9990%" height="15" fill="rgb(216,79,43)" fg:x="1" fg:w="97089"/><text x="0.2510%" y="831.50">__libc_start_main</text></g><g><title>[libc.so.6] (97,089 samples, 100.00%)</title><rect x="0.0010%" y="805" width="99.9990%" height="15" fill="rgb(228,95,12)" fg:x="1" fg:w="97089"/><text x="0.2510%" y="815.50">[libc.so.6]</text></g><g><title>main (97,089 samples, 100.00%)</title><rect x="0.0010%" y="789" width="99.9990%" height="15" fill="rgb(249,221,15)" fg:x="1" fg:w="97089"/><text x="0.2510%" y="799.50">main</text></g><g><title>std::rt::lang_start (97,089 samples, 100.00%)</title><rect x="0.0010%" y="773" width="99.9990%" height="15" fill="rgb(233,34,13)" fg:x="1" fg:w="97089"/><text x="0.2510%" y="783.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (97,089 samples, 100.00%)</title><rect x="0.0010%" y="757" width="99.9990%" height="15" fill="rgb(214,103,39)" fg:x="1" fg:w="97089"/><text x="0.2510%" y="767.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (97,089 samples, 100.00%)</title><rect x="0.0010%" y="741" width="99.9990%" height="15" fill="rgb(251,126,39)" fg:x="1" fg:w="97089"/><text x="0.2510%" y="751.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (97,089 samples, 100.00%)</title><rect x="0.0010%" y="725" width="99.9990%" height="15" fill="rgb(214,216,36)" fg:x="1" fg:w="97089"/><text x="0.2510%" y="735.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (97,089 samples, 100.00%)</title><rect x="0.0010%" y="709" width="99.9990%" height="15" fill="rgb(220,221,8)" fg:x="1" fg:w="97089"/><text x="0.2510%" y="719.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (97,089 samples, 100.00%)</title><rect x="0.0010%" y="693" width="99.9990%" height="15" fill="rgb(240,216,3)" fg:x="1" fg:w="97089"/><text x="0.2510%" y="703.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (97,089 samples, 100.00%)</title><rect x="0.0010%" y="677" width="99.9990%" height="15" fill="rgb(232,218,17)" fg:x="1" fg:w="97089"/><text x="0.2510%" y="687.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (97,089 samples, 100.00%)</title><rect x="0.0010%" y="661" width="99.9990%" height="15" fill="rgb(229,163,45)" fg:x="1" fg:w="97089"/><text x="0.2510%" y="671.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (97,089 samples, 100.00%)</title><rect x="0.0010%" y="645" width="99.9990%" height="15" fill="rgb(231,110,42)" fg:x="1" fg:w="97089"/><text x="0.2510%" y="655.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (97,089 samples, 100.00%)</title><rect x="0.0010%" y="629" width="99.9990%" height="15" fill="rgb(208,170,48)" fg:x="1" fg:w="97089"/><text x="0.2510%" y="639.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (97,089 samples, 100.00%)</title><rect x="0.0010%" y="613" width="99.9990%" height="15" fill="rgb(239,116,25)" fg:x="1" fg:w="97089"/><text x="0.2510%" y="623.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (97,089 samples, 100.00%)</title><rect x="0.0010%" y="597" width="99.9990%" height="15" fill="rgb(219,200,50)" fg:x="1" fg:w="97089"/><text x="0.2510%" y="607.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (97,089 samples, 100.00%)</title><rect x="0.0010%" y="581" width="99.9990%" height="15" fill="rgb(245,200,0)" fg:x="1" fg:w="97089"/><text x="0.2510%" y="591.50">core::ops::function::FnOnce::call_once</text></g><g><title>wfc::main (97,089 samples, 100.00%)</title><rect x="0.0010%" y="565" width="99.9990%" height="15" fill="rgb(245,119,33)" fg:x="1" fg:w="97089"/><text x="0.2510%" y="575.50">wfc::main</text></g><g><title>wfc::wfc::rules::get_pipes_rules (69 samples, 0.07%)</title><rect x="99.9289%" y="549" width="0.0711%" height="15" fill="rgb(231,125,12)" fg:x="97021" fg:w="69"/><text x="100.1789%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (69 samples, 0.07%)</title><rect x="99.9289%" y="533" width="0.0711%" height="15" fill="rgb(216,96,41)" fg:x="97021" fg:w="69"/><text x="100.1789%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (69 samples, 0.07%)</title><rect x="99.9289%" y="517" width="0.0711%" height="15" fill="rgb(248,43,45)" fg:x="97021" fg:w="69"/><text x="100.1789%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (69 samples, 0.07%)</title><rect x="99.9289%" y="501" width="0.0711%" height="15" fill="rgb(217,222,7)" fg:x="97021" fg:w="69"/><text x="100.1789%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (69 samples, 0.07%)</title><rect x="99.9289%" y="485" width="0.0711%" height="15" fill="rgb(233,28,6)" fg:x="97021" fg:w="69"/><text x="100.1789%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (69 samples, 0.07%)</title><rect x="99.9289%" y="469" width="0.0711%" height="15" fill="rgb(231,218,15)" fg:x="97021" fg:w="69"/><text x="100.1789%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (69 samples, 0.07%)</title><rect x="99.9289%" y="453" width="0.0711%" height="15" fill="rgb(226,171,48)" fg:x="97021" fg:w="69"/><text x="100.1789%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (69 samples, 0.07%)</title><rect x="99.9289%" y="437" width="0.0711%" height="15" fill="rgb(235,201,9)" fg:x="97021" fg:w="69"/><text x="100.1789%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (69 samples, 0.07%)</title><rect x="99.9289%" y="421" width="0.0711%" height="15" fill="rgb(217,80,15)" fg:x="97021" fg:w="69"/><text x="100.1789%" y="431.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (69 samples, 0.07%)</title><rect x="99.9289%" y="405" width="0.0711%" height="15" fill="rgb(219,152,8)" fg:x="97021" fg:w="69"/><text x="100.1789%" y="415.50"></text></g><g><title>wfc::wfc::rules::get_pipes_rules::{{closure}} (69 samples, 0.07%)</title><rect x="99.9289%" y="389" width="0.0711%" height="15" fill="rgb(243,107,38)" fg:x="97021" fg:w="69"/><text x="100.1789%" y="399.50"></text></g><g><title>wfc::wfc::rules::get_pipe_rules (69 samples, 0.07%)</title><rect x="99.9289%" y="373" width="0.0711%" height="15" fill="rgb(231,17,5)" fg:x="97021" fg:w="69"/><text x="100.1789%" y="383.50"></text></g><g><title>wfc::wfc::rules::get_pipe_dir_rules (67 samples, 0.07%)</title><rect x="99.9310%" y="357" width="0.0690%" height="15" fill="rgb(209,25,54)" fg:x="97023" fg:w="67"/><text x="100.1810%" y="367.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (67 samples, 0.07%)</title><rect x="99.9310%" y="341" width="0.0690%" height="15" fill="rgb(219,0,2)" fg:x="97023" fg:w="67"/><text x="100.1810%" y="351.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (67 samples, 0.07%)</title><rect x="99.9310%" y="325" width="0.0690%" height="15" fill="rgb(246,9,5)" fg:x="97023" fg:w="67"/><text x="100.1810%" y="335.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (67 samples, 0.07%)</title><rect x="99.9310%" y="309" width="0.0690%" height="15" fill="rgb(226,159,4)" fg:x="97023" fg:w="67"/><text x="100.1810%" y="319.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (67 samples, 0.07%)</title><rect x="99.9310%" y="293" width="0.0690%" height="15" fill="rgb(219,175,34)" fg:x="97023" fg:w="67"/><text x="100.1810%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (67 samples, 0.07%)</title><rect x="99.9310%" y="277" width="0.0690%" height="15" fill="rgb(236,10,46)" fg:x="97023" fg:w="67"/><text x="100.1810%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (67 samples, 0.07%)</title><rect x="99.9310%" y="261" width="0.0690%" height="15" fill="rgb(240,211,16)" fg:x="97023" fg:w="67"/><text x="100.1810%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (67 samples, 0.07%)</title><rect x="99.9310%" y="245" width="0.0690%" height="15" fill="rgb(205,3,43)" fg:x="97023" fg:w="67"/><text x="100.1810%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (67 samples, 0.07%)</title><rect x="99.9310%" y="229" width="0.0690%" height="15" fill="rgb(245,7,22)" fg:x="97023" fg:w="67"/><text x="100.1810%" y="239.50"></text></g></svg></svg>