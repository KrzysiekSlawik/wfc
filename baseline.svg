<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#ffffff" offset="5%"/><stop stop-color="#ffffff" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="950" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="933.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="933.00"> </text><svg id="frames" x="10" width="1180" total_samples="12961"><g><title>&lt;wfc::wfc::vec3d::PosIter3D as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.03%)</title><rect x="0.0000%" y="533" width="0.0309%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="543.50"></text></g><g><title>wfc::wfc::vec3d::get_pos_from_index (4 samples, 0.03%)</title><rect x="0.0000%" y="517" width="0.0309%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="4"/><text x="0.2500%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.08%)</title><rect x="0.3858%" y="421" width="0.0772%" height="15" fill="rgb(221,193,54)" fg:x="50" fg:w="10"/><text x="0.6358%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (57 samples, 0.44%)</title><rect x="0.0309%" y="501" width="0.4398%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="57"/><text x="0.2809%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (57 samples, 0.44%)</title><rect x="0.0309%" y="485" width="0.4398%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="57"/><text x="0.2809%" y="495.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (57 samples, 0.44%)</title><rect x="0.0309%" y="469" width="0.4398%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="57"/><text x="0.2809%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (57 samples, 0.44%)</title><rect x="0.0309%" y="453" width="0.4398%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="57"/><text x="0.2809%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (57 samples, 0.44%)</title><rect x="0.0309%" y="437" width="0.4398%" height="15" fill="rgb(228,23,34)" fg:x="4" fg:w="57"/><text x="0.2809%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,usize,usize,alloc::vec::Vec&lt;bool&gt;)&gt; (7 samples, 0.05%)</title><rect x="0.4706%" y="501" width="0.0540%" height="15" fill="rgb(218,30,26)" fg:x="61" fg:w="7"/><text x="0.7206%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bool&gt;&gt; (7 samples, 0.05%)</title><rect x="0.4706%" y="485" width="0.0540%" height="15" fill="rgb(220,122,19)" fg:x="61" fg:w="7"/><text x="0.7206%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;bool&gt;&gt; (7 samples, 0.05%)</title><rect x="0.4706%" y="469" width="0.0540%" height="15" fill="rgb(250,228,42)" fg:x="61" fg:w="7"/><text x="0.7206%" y="479.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.05%)</title><rect x="0.4706%" y="453" width="0.0540%" height="15" fill="rgb(240,193,28)" fg:x="61" fg:w="7"/><text x="0.7206%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.05%)</title><rect x="0.4706%" y="437" width="0.0540%" height="15" fill="rgb(216,20,37)" fg:x="61" fg:w="7"/><text x="0.7206%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.05%)</title><rect x="0.4706%" y="421" width="0.0540%" height="15" fill="rgb(206,188,39)" fg:x="61" fg:w="7"/><text x="0.7206%" y="431.50"></text></g><g><title>free (6 samples, 0.05%)</title><rect x="0.4784%" y="405" width="0.0463%" height="15" fill="rgb(217,207,13)" fg:x="62" fg:w="6"/><text x="0.7284%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6 samples, 0.05%)</title><rect x="0.5401%" y="421" width="0.0463%" height="15" fill="rgb(231,73,38)" fg:x="70" fg:w="6"/><text x="0.7901%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.05%)</title><rect x="0.5401%" y="405" width="0.0463%" height="15" fill="rgb(225,20,46)" fg:x="70" fg:w="6"/><text x="0.7901%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.05%)</title><rect x="0.5401%" y="389" width="0.0463%" height="15" fill="rgb(210,31,41)" fg:x="70" fg:w="6"/><text x="0.7901%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.05%)</title><rect x="0.5401%" y="373" width="0.0463%" height="15" fill="rgb(221,200,47)" fg:x="70" fg:w="6"/><text x="0.7901%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.05%)</title><rect x="0.5401%" y="357" width="0.0463%" height="15" fill="rgb(226,26,5)" fg:x="70" fg:w="6"/><text x="0.7901%" y="367.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.05%)</title><rect x="0.5401%" y="341" width="0.0463%" height="15" fill="rgb(249,33,26)" fg:x="70" fg:w="6"/><text x="0.7901%" y="351.50"></text></g><g><title>malloc (5 samples, 0.04%)</title><rect x="0.5478%" y="325" width="0.0386%" height="15" fill="rgb(235,183,28)" fg:x="71" fg:w="5"/><text x="0.7978%" y="335.50"></text></g><g><title>wfc::wfc::baseline::BaseLine::find_minimal (85 samples, 0.66%)</title><rect x="0.0000%" y="581" width="0.6558%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="85"/><text x="0.2500%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (85 samples, 0.66%)</title><rect x="0.0000%" y="565" width="0.6558%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="85"/><text x="0.2500%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (85 samples, 0.66%)</title><rect x="0.0000%" y="549" width="0.6558%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="85"/><text x="0.2500%" y="559.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (81 samples, 0.62%)</title><rect x="0.0309%" y="533" width="0.6250%" height="15" fill="rgb(249,31,29)" fg:x="4" fg:w="81"/><text x="0.2809%" y="543.50"></text></g><g><title>wfc::wfc::baseline::BaseLine::find_minimal::{{closure}} (81 samples, 0.62%)</title><rect x="0.0309%" y="517" width="0.6250%" height="15" fill="rgb(225,111,53)" fg:x="4" fg:w="81"/><text x="0.2809%" y="527.50"></text></g><g><title>wfc::wfc::vec3d::Vec3D&lt;T&gt;::get (17 samples, 0.13%)</title><rect x="0.5247%" y="501" width="0.1312%" height="15" fill="rgb(238,160,17)" fg:x="68" fg:w="17"/><text x="0.7747%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (16 samples, 0.12%)</title><rect x="0.5324%" y="485" width="0.1234%" height="15" fill="rgb(214,148,48)" fg:x="69" fg:w="16"/><text x="0.7824%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (15 samples, 0.12%)</title><rect x="0.5401%" y="469" width="0.1157%" height="15" fill="rgb(232,36,49)" fg:x="70" fg:w="15"/><text x="0.7901%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (15 samples, 0.12%)</title><rect x="0.5401%" y="453" width="0.1157%" height="15" fill="rgb(209,103,24)" fg:x="70" fg:w="15"/><text x="0.7901%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (15 samples, 0.12%)</title><rect x="0.5401%" y="437" width="0.1157%" height="15" fill="rgb(229,88,8)" fg:x="70" fg:w="15"/><text x="0.7901%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (9 samples, 0.07%)</title><rect x="0.5864%" y="421" width="0.0694%" height="15" fill="rgb(213,181,19)" fg:x="76" fg:w="9"/><text x="0.8364%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.07%)</title><rect x="0.5864%" y="405" width="0.0694%" height="15" fill="rgb(254,191,54)" fg:x="76" fg:w="9"/><text x="0.8364%" y="415.50"></text></g><g><title>[libc.so.6] (9 samples, 0.07%)</title><rect x="0.5864%" y="389" width="0.0694%" height="15" fill="rgb(241,83,37)" fg:x="76" fg:w="9"/><text x="0.8364%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (6 samples, 0.05%)</title><rect x="0.7021%" y="373" width="0.0463%" height="15" fill="rgb(233,36,39)" fg:x="91" fg:w="6"/><text x="0.9521%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (6 samples, 0.05%)</title><rect x="0.7021%" y="357" width="0.0463%" height="15" fill="rgb(226,3,54)" fg:x="91" fg:w="6"/><text x="0.9521%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6 samples, 0.05%)</title><rect x="0.7021%" y="341" width="0.0463%" height="15" fill="rgb(245,192,40)" fg:x="91" fg:w="6"/><text x="0.9521%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.05%)</title><rect x="0.7021%" y="325" width="0.0463%" height="15" fill="rgb(238,167,29)" fg:x="91" fg:w="6"/><text x="0.9521%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (6 samples, 0.05%)</title><rect x="0.7021%" y="309" width="0.0463%" height="15" fill="rgb(232,182,51)" fg:x="91" fg:w="6"/><text x="0.9521%" y="319.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (4 samples, 0.03%)</title><rect x="0.7175%" y="293" width="0.0309%" height="15" fill="rgb(231,60,39)" fg:x="93" fg:w="4"/><text x="0.9675%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (4 samples, 0.03%)</title><rect x="0.7175%" y="277" width="0.0309%" height="15" fill="rgb(208,69,12)" fg:x="93" fg:w="4"/><text x="0.9675%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::{{closure}} (4 samples, 0.03%)</title><rect x="0.7175%" y="261" width="0.0309%" height="15" fill="rgb(235,93,37)" fg:x="93" fg:w="4"/><text x="0.9675%" y="271.50"></text></g><g><title>__rdl_alloc (4 samples, 0.03%)</title><rect x="0.7484%" y="261" width="0.0309%" height="15" fill="rgb(213,116,39)" fg:x="97" fg:w="4"/><text x="0.9984%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.02%)</title><rect x="0.7561%" y="245" width="0.0231%" height="15" fill="rgb(222,207,29)" fg:x="98" fg:w="3"/><text x="1.0061%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (15 samples, 0.12%)</title><rect x="0.7021%" y="437" width="0.1157%" height="15" fill="rgb(206,96,30)" fg:x="91" fg:w="15"/><text x="0.9521%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (15 samples, 0.12%)</title><rect x="0.7021%" y="421" width="0.1157%" height="15" fill="rgb(218,138,4)" fg:x="91" fg:w="15"/><text x="0.9521%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (15 samples, 0.12%)</title><rect x="0.7021%" y="405" width="0.1157%" height="15" fill="rgb(250,191,14)" fg:x="91" fg:w="15"/><text x="0.9521%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (15 samples, 0.12%)</title><rect x="0.7021%" y="389" width="0.1157%" height="15" fill="rgb(239,60,40)" fg:x="91" fg:w="15"/><text x="0.9521%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (9 samples, 0.07%)</title><rect x="0.7484%" y="373" width="0.0694%" height="15" fill="rgb(206,27,48)" fg:x="97" fg:w="9"/><text x="0.9984%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9 samples, 0.07%)</title><rect x="0.7484%" y="357" width="0.0694%" height="15" fill="rgb(225,35,8)" fg:x="97" fg:w="9"/><text x="0.9984%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 0.07%)</title><rect x="0.7484%" y="341" width="0.0694%" height="15" fill="rgb(250,213,24)" fg:x="97" fg:w="9"/><text x="0.9984%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.07%)</title><rect x="0.7484%" y="325" width="0.0694%" height="15" fill="rgb(247,123,22)" fg:x="97" fg:w="9"/><text x="0.9984%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.07%)</title><rect x="0.7484%" y="309" width="0.0694%" height="15" fill="rgb(231,138,38)" fg:x="97" fg:w="9"/><text x="0.9984%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.07%)</title><rect x="0.7484%" y="293" width="0.0694%" height="15" fill="rgb(231,145,46)" fg:x="97" fg:w="9"/><text x="0.9984%" y="303.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.07%)</title><rect x="0.7484%" y="277" width="0.0694%" height="15" fill="rgb(251,118,11)" fg:x="97" fg:w="9"/><text x="0.9984%" y="287.50"></text></g><g><title>malloc (5 samples, 0.04%)</title><rect x="0.7793%" y="261" width="0.0386%" height="15" fill="rgb(217,147,25)" fg:x="101" fg:w="5"/><text x="1.0293%" y="271.50"></text></g><g><title>wfc::wfc::baseline::BaseLine::prepare_map (24 samples, 0.19%)</title><rect x="0.6558%" y="581" width="0.1852%" height="15" fill="rgb(247,81,37)" fg:x="85" fg:w="24"/><text x="0.9058%" y="591.50"></text></g><g><title>wfc::wfc::baseline::BaseLine::propagate (23 samples, 0.18%)</title><rect x="0.6635%" y="565" width="0.1775%" height="15" fill="rgb(209,12,38)" fg:x="86" fg:w="23"/><text x="0.9135%" y="575.50"></text></g><g><title>wfc::wfc::baseline::BaseLine::legal_tiles (23 samples, 0.18%)</title><rect x="0.6635%" y="549" width="0.1775%" height="15" fill="rgb(227,1,9)" fg:x="86" fg:w="23"/><text x="0.9135%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (23 samples, 0.18%)</title><rect x="0.6635%" y="533" width="0.1775%" height="15" fill="rgb(248,47,43)" fg:x="86" fg:w="23"/><text x="0.9135%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (23 samples, 0.18%)</title><rect x="0.6635%" y="517" width="0.1775%" height="15" fill="rgb(221,10,30)" fg:x="86" fg:w="23"/><text x="0.9135%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (23 samples, 0.18%)</title><rect x="0.6635%" y="501" width="0.1775%" height="15" fill="rgb(210,229,1)" fg:x="86" fg:w="23"/><text x="0.9135%" y="511.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_fold::{{closure}} (23 samples, 0.18%)</title><rect x="0.6635%" y="485" width="0.1775%" height="15" fill="rgb(222,148,37)" fg:x="86" fg:w="23"/><text x="0.9135%" y="495.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (22 samples, 0.17%)</title><rect x="0.6712%" y="469" width="0.1697%" height="15" fill="rgb(234,67,33)" fg:x="87" fg:w="22"/><text x="0.9212%" y="479.50"></text></g><g><title>wfc::wfc::baseline::BaseLine::legal_tiles::{{closure}} (18 samples, 0.14%)</title><rect x="0.7021%" y="453" width="0.1389%" height="15" fill="rgb(247,98,35)" fg:x="91" fg:w="18"/><text x="0.9521%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bool&gt;&gt; (3 samples, 0.02%)</title><rect x="0.8178%" y="437" width="0.0231%" height="15" fill="rgb(247,138,52)" fg:x="106" fg:w="3"/><text x="1.0678%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;bool&gt;&gt; (3 samples, 0.02%)</title><rect x="0.8178%" y="421" width="0.0231%" height="15" fill="rgb(213,79,30)" fg:x="106" fg:w="3"/><text x="1.0678%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="0.8178%" y="405" width="0.0231%" height="15" fill="rgb(246,177,23)" fg:x="106" fg:w="3"/><text x="1.0678%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.02%)</title><rect x="0.8178%" y="389" width="0.0231%" height="15" fill="rgb(230,62,27)" fg:x="106" fg:w="3"/><text x="1.0678%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.02%)</title><rect x="0.8178%" y="373" width="0.0231%" height="15" fill="rgb(216,154,8)" fg:x="106" fg:w="3"/><text x="1.0678%" y="383.50"></text></g><g><title>free (3 samples, 0.02%)</title><rect x="0.8178%" y="357" width="0.0231%" height="15" fill="rgb(244,35,45)" fg:x="106" fg:w="3"/><text x="1.0678%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.02%)</title><rect x="0.8410%" y="133" width="0.0231%" height="15" fill="rgb(251,115,12)" fg:x="109" fg:w="3"/><text x="1.0910%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.02%)</title><rect x="0.8410%" y="117" width="0.0231%" height="15" fill="rgb(240,54,50)" fg:x="109" fg:w="3"/><text x="1.0910%" y="127.50"></text></g><g><title>wfc::wfc::baseline::BaseLine::prepare_rules (5 samples, 0.04%)</title><rect x="0.8410%" y="581" width="0.0386%" height="15" fill="rgb(233,84,52)" fg:x="109" fg:w="5"/><text x="1.0910%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (5 samples, 0.04%)</title><rect x="0.8410%" y="565" width="0.0386%" height="15" fill="rgb(207,117,47)" fg:x="109" fg:w="5"/><text x="1.0910%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (5 samples, 0.04%)</title><rect x="0.8410%" y="549" width="0.0386%" height="15" fill="rgb(249,43,39)" fg:x="109" fg:w="5"/><text x="1.0910%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.04%)</title><rect x="0.8410%" y="533" width="0.0386%" height="15" fill="rgb(209,38,44)" fg:x="109" fg:w="5"/><text x="1.0910%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (5 samples, 0.04%)</title><rect x="0.8410%" y="517" width="0.0386%" height="15" fill="rgb(236,212,23)" fg:x="109" fg:w="5"/><text x="1.0910%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (5 samples, 0.04%)</title><rect x="0.8410%" y="501" width="0.0386%" height="15" fill="rgb(242,79,21)" fg:x="109" fg:w="5"/><text x="1.0910%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (5 samples, 0.04%)</title><rect x="0.8410%" y="485" width="0.0386%" height="15" fill="rgb(211,96,35)" fg:x="109" fg:w="5"/><text x="1.0910%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (5 samples, 0.04%)</title><rect x="0.8410%" y="469" width="0.0386%" height="15" fill="rgb(253,215,40)" fg:x="109" fg:w="5"/><text x="1.0910%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.04%)</title><rect x="0.8410%" y="453" width="0.0386%" height="15" fill="rgb(211,81,21)" fg:x="109" fg:w="5"/><text x="1.0910%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (5 samples, 0.04%)</title><rect x="0.8410%" y="437" width="0.0386%" height="15" fill="rgb(208,190,38)" fg:x="109" fg:w="5"/><text x="1.0910%" y="447.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (5 samples, 0.04%)</title><rect x="0.8410%" y="421" width="0.0386%" height="15" fill="rgb(235,213,38)" fg:x="109" fg:w="5"/><text x="1.0910%" y="431.50"></text></g><g><title>wfc::wfc::baseline::BaseLine::prepare_rules::{{closure}} (5 samples, 0.04%)</title><rect x="0.8410%" y="405" width="0.0386%" height="15" fill="rgb(237,122,38)" fg:x="109" fg:w="5"/><text x="1.0910%" y="415.50"></text></g><g><title>wfc::wfc::baseline::BaseLine::vec_bool_set_from_set (5 samples, 0.04%)</title><rect x="0.8410%" y="389" width="0.0386%" height="15" fill="rgb(244,218,35)" fg:x="109" fg:w="5"/><text x="1.0910%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (5 samples, 0.04%)</title><rect x="0.8410%" y="373" width="0.0386%" height="15" fill="rgb(240,68,47)" fg:x="109" fg:w="5"/><text x="1.0910%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (5 samples, 0.04%)</title><rect x="0.8410%" y="357" width="0.0386%" height="15" fill="rgb(210,16,53)" fg:x="109" fg:w="5"/><text x="1.0910%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.04%)</title><rect x="0.8410%" y="341" width="0.0386%" height="15" fill="rgb(235,124,12)" fg:x="109" fg:w="5"/><text x="1.0910%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (5 samples, 0.04%)</title><rect x="0.8410%" y="325" width="0.0386%" height="15" fill="rgb(224,169,11)" fg:x="109" fg:w="5"/><text x="1.0910%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (5 samples, 0.04%)</title><rect x="0.8410%" y="309" width="0.0386%" height="15" fill="rgb(250,166,2)" fg:x="109" fg:w="5"/><text x="1.0910%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (5 samples, 0.04%)</title><rect x="0.8410%" y="293" width="0.0386%" height="15" fill="rgb(242,216,29)" fg:x="109" fg:w="5"/><text x="1.0910%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (5 samples, 0.04%)</title><rect x="0.8410%" y="277" width="0.0386%" height="15" fill="rgb(230,116,27)" fg:x="109" fg:w="5"/><text x="1.0910%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.04%)</title><rect x="0.8410%" y="261" width="0.0386%" height="15" fill="rgb(228,99,48)" fg:x="109" fg:w="5"/><text x="1.0910%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (5 samples, 0.04%)</title><rect x="0.8410%" y="245" width="0.0386%" height="15" fill="rgb(253,11,6)" fg:x="109" fg:w="5"/><text x="1.0910%" y="255.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (5 samples, 0.04%)</title><rect x="0.8410%" y="229" width="0.0386%" height="15" fill="rgb(247,143,39)" fg:x="109" fg:w="5"/><text x="1.0910%" y="239.50"></text></g><g><title>wfc::wfc::baseline::BaseLine::vec_bool_set_from_set::{{closure}} (5 samples, 0.04%)</title><rect x="0.8410%" y="213" width="0.0386%" height="15" fill="rgb(236,97,10)" fg:x="109" fg:w="5"/><text x="1.0910%" y="223.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (5 samples, 0.04%)</title><rect x="0.8410%" y="197" width="0.0386%" height="15" fill="rgb(233,208,19)" fg:x="109" fg:w="5"/><text x="1.0910%" y="207.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (5 samples, 0.04%)</title><rect x="0.8410%" y="181" width="0.0386%" height="15" fill="rgb(216,164,2)" fg:x="109" fg:w="5"/><text x="1.0910%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (5 samples, 0.04%)</title><rect x="0.8410%" y="165" width="0.0386%" height="15" fill="rgb(220,129,5)" fg:x="109" fg:w="5"/><text x="1.0910%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (5 samples, 0.04%)</title><rect x="0.8410%" y="149" width="0.0386%" height="15" fill="rgb(242,17,10)" fg:x="109" fg:w="5"/><text x="1.0910%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2 samples, 0.02%)</title><rect x="0.8641%" y="133" width="0.0154%" height="15" fill="rgb(242,107,0)" fg:x="112" fg:w="2"/><text x="1.1141%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.02%)</title><rect x="0.8641%" y="117" width="0.0154%" height="15" fill="rgb(251,28,31)" fg:x="112" fg:w="2"/><text x="1.1141%" y="127.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (2 samples, 0.02%)</title><rect x="0.8641%" y="101" width="0.0154%" height="15" fill="rgb(233,223,10)" fg:x="112" fg:w="2"/><text x="1.1141%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (14 samples, 0.11%)</title><rect x="0.8796%" y="565" width="0.1080%" height="15" fill="rgb(215,21,27)" fg:x="114" fg:w="14"/><text x="1.1296%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (14 samples, 0.11%)</title><rect x="0.8796%" y="549" width="0.1080%" height="15" fill="rgb(232,23,21)" fg:x="114" fg:w="14"/><text x="1.1296%" y="559.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (14 samples, 0.11%)</title><rect x="0.8796%" y="533" width="0.1080%" height="15" fill="rgb(244,5,23)" fg:x="114" fg:w="14"/><text x="1.1296%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (14 samples, 0.11%)</title><rect x="0.8796%" y="517" width="0.1080%" height="15" fill="rgb(226,81,46)" fg:x="114" fg:w="14"/><text x="1.1296%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (14 samples, 0.11%)</title><rect x="0.8796%" y="501" width="0.1080%" height="15" fill="rgb(247,70,30)" fg:x="114" fg:w="14"/><text x="1.1296%" y="511.50"></text></g><g><title>&lt;wfc::wfc::vec3d::PosIter3D as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.03%)</title><rect x="0.9876%" y="565" width="0.0309%" height="15" fill="rgb(212,68,19)" fg:x="128" fg:w="4"/><text x="1.2376%" y="575.50"></text></g><g><title>wfc::wfc::vec3d::get_pos_from_index (2 samples, 0.02%)</title><rect x="1.0030%" y="549" width="0.0154%" height="15" fill="rgb(240,187,13)" fg:x="130" fg:w="2"/><text x="1.2530%" y="559.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::ne (6 samples, 0.05%)</title><rect x="1.0184%" y="565" width="0.0463%" height="15" fill="rgb(223,113,26)" fg:x="132" fg:w="6"/><text x="1.2684%" y="575.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::ne (6 samples, 0.05%)</title><rect x="1.0184%" y="549" width="0.0463%" height="15" fill="rgb(206,192,2)" fg:x="132" fg:w="6"/><text x="1.2684%" y="559.50"></text></g><g><title>core::slice::cmp::SlicePartialEq::not_equal (6 samples, 0.05%)</title><rect x="1.0184%" y="533" width="0.0463%" height="15" fill="rgb(241,108,4)" fg:x="132" fg:w="6"/><text x="1.2684%" y="543.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (6 samples, 0.05%)</title><rect x="1.0184%" y="517" width="0.0463%" height="15" fill="rgb(247,173,49)" fg:x="132" fg:w="6"/><text x="1.2684%" y="527.50"></text></g><g><title>[libc.so.6] (6 samples, 0.05%)</title><rect x="1.0184%" y="501" width="0.0463%" height="15" fill="rgb(224,114,35)" fg:x="132" fg:w="6"/><text x="1.2684%" y="511.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.02%)</title><rect x="1.0647%" y="485" width="0.0154%" height="15" fill="rgb(245,159,27)" fg:x="138" fg:w="2"/><text x="1.3147%" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.02%)</title><rect x="1.0647%" y="469" width="0.0154%" height="15" fill="rgb(245,172,44)" fg:x="138" fg:w="2"/><text x="1.3147%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bool&gt;&gt; (14 samples, 0.11%)</title><rect x="1.0647%" y="565" width="0.1080%" height="15" fill="rgb(236,23,11)" fg:x="138" fg:w="14"/><text x="1.3147%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;bool&gt;&gt; (14 samples, 0.11%)</title><rect x="1.0647%" y="549" width="0.1080%" height="15" fill="rgb(205,117,38)" fg:x="138" fg:w="14"/><text x="1.3147%" y="559.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.11%)</title><rect x="1.0647%" y="533" width="0.1080%" height="15" fill="rgb(237,72,25)" fg:x="138" fg:w="14"/><text x="1.3147%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.11%)</title><rect x="1.0647%" y="517" width="0.1080%" height="15" fill="rgb(244,70,9)" fg:x="138" fg:w="14"/><text x="1.3147%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.11%)</title><rect x="1.0647%" y="501" width="0.1080%" height="15" fill="rgb(217,125,39)" fg:x="138" fg:w="14"/><text x="1.3147%" y="511.50"></text></g><g><title>free (12 samples, 0.09%)</title><rect x="1.0802%" y="485" width="0.0926%" height="15" fill="rgb(235,36,10)" fg:x="140" fg:w="12"/><text x="1.3302%" y="495.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="1.1496%" y="469" width="0.0231%" height="15" fill="rgb(251,123,47)" fg:x="149" fg:w="3"/><text x="1.3996%" y="479.50"></text></g><g><title>irq_exit_rcu (2 samples, 0.02%)</title><rect x="3.4720%" y="437" width="0.0154%" height="15" fill="rgb(221,13,13)" fg:x="450" fg:w="2"/><text x="3.7220%" y="447.50"></text></g><g><title>__softirqentry_text_start (2 samples, 0.02%)</title><rect x="3.4720%" y="421" width="0.0154%" height="15" fill="rgb(238,131,9)" fg:x="450" fg:w="2"/><text x="3.7220%" y="431.50"></text></g><g><title>run_timer_softirq (2 samples, 0.02%)</title><rect x="3.4720%" y="405" width="0.0154%" height="15" fill="rgb(211,50,8)" fg:x="450" fg:w="2"/><text x="3.7220%" y="415.50"></text></g><g><title>__run_timers.part.0 (2 samples, 0.02%)</title><rect x="3.4720%" y="389" width="0.0154%" height="15" fill="rgb(245,182,24)" fg:x="450" fg:w="2"/><text x="3.7220%" y="399.50"></text></g><g><title>call_timer_fn (2 samples, 0.02%)</title><rect x="3.4720%" y="373" width="0.0154%" height="15" fill="rgb(242,14,37)" fg:x="450" fg:w="2"/><text x="3.7220%" y="383.50"></text></g><g><title>vbg_heartbeat_timer (2 samples, 0.02%)</title><rect x="3.4720%" y="357" width="0.0154%" height="15" fill="rgb(246,228,12)" fg:x="450" fg:w="2"/><text x="3.7220%" y="367.50"></text></g><g><title>vbg_req_perform (2 samples, 0.02%)</title><rect x="3.4720%" y="341" width="0.0154%" height="15" fill="rgb(213,55,15)" fg:x="450" fg:w="2"/><text x="3.7220%" y="351.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (3 samples, 0.02%)</title><rect x="3.4720%" y="469" width="0.0231%" height="15" fill="rgb(209,9,3)" fg:x="450" fg:w="3"/><text x="3.7220%" y="479.50"></text></g><g><title>sysvec_apic_timer_interrupt (3 samples, 0.02%)</title><rect x="3.4720%" y="453" width="0.0231%" height="15" fill="rgb(230,59,30)" fg:x="450" fg:w="3"/><text x="3.7220%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (129 samples, 1.00%)</title><rect x="2.6155%" y="501" width="0.9953%" height="15" fill="rgb(209,121,21)" fg:x="339" fg:w="129"/><text x="2.8655%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (129 samples, 1.00%)</title><rect x="2.6155%" y="485" width="0.9953%" height="15" fill="rgb(220,109,13)" fg:x="339" fg:w="129"/><text x="2.8655%" y="495.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::__iterator_get_unchecked (15 samples, 0.12%)</title><rect x="3.4951%" y="469" width="0.1157%" height="15" fill="rgb(232,18,1)" fg:x="453" fg:w="15"/><text x="3.7451%" y="479.50"></text></g><g><title>&lt;u8 as core::iter::range::Step&gt;::forward_unchecked (15 samples, 0.12%)</title><rect x="3.4951%" y="453" width="0.1157%" height="15" fill="rgb(215,41,42)" fg:x="453" fg:w="15"/><text x="3.7451%" y="463.50"></text></g><g><title>core::num::&lt;impl u8&gt;::unchecked_add (15 samples, 0.12%)</title><rect x="3.4951%" y="437" width="0.1157%" height="15" fill="rgb(224,123,36)" fg:x="453" fg:w="15"/><text x="3.7451%" y="447.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (11 samples, 0.08%)</title><rect x="13.9110%" y="469" width="0.0849%" height="15" fill="rgb(240,125,3)" fg:x="1803" fg:w="11"/><text x="14.1610%" y="479.50"></text></g><g><title>sysvec_apic_timer_interrupt (11 samples, 0.08%)</title><rect x="13.9110%" y="453" width="0.0849%" height="15" fill="rgb(205,98,50)" fg:x="1803" fg:w="11"/><text x="14.1610%" y="463.50"></text></g><g><title>irq_exit_rcu (11 samples, 0.08%)</title><rect x="13.9110%" y="437" width="0.0849%" height="15" fill="rgb(205,185,37)" fg:x="1803" fg:w="11"/><text x="14.1610%" y="447.50"></text></g><g><title>__softirqentry_text_start (11 samples, 0.08%)</title><rect x="13.9110%" y="421" width="0.0849%" height="15" fill="rgb(238,207,15)" fg:x="1803" fg:w="11"/><text x="14.1610%" y="431.50"></text></g><g><title>run_timer_softirq (9 samples, 0.07%)</title><rect x="13.9264%" y="405" width="0.0694%" height="15" fill="rgb(213,199,42)" fg:x="1805" fg:w="9"/><text x="14.1764%" y="415.50"></text></g><g><title>__run_timers.part.0 (9 samples, 0.07%)</title><rect x="13.9264%" y="389" width="0.0694%" height="15" fill="rgb(235,201,11)" fg:x="1805" fg:w="9"/><text x="14.1764%" y="399.50"></text></g><g><title>call_timer_fn (9 samples, 0.07%)</title><rect x="13.9264%" y="373" width="0.0694%" height="15" fill="rgb(207,46,11)" fg:x="1805" fg:w="9"/><text x="14.1764%" y="383.50"></text></g><g><title>vbg_heartbeat_timer (9 samples, 0.07%)</title><rect x="13.9264%" y="357" width="0.0694%" height="15" fill="rgb(241,35,35)" fg:x="1805" fg:w="9"/><text x="14.1764%" y="367.50"></text></g><g><title>vbg_req_perform (9 samples, 0.07%)</title><rect x="13.9264%" y="341" width="0.0694%" height="15" fill="rgb(243,32,47)" fg:x="1805" fg:w="9"/><text x="14.1764%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (184 samples, 1.42%)</title><rect x="14.0113%" y="453" width="1.4196%" height="15" fill="rgb(247,202,23)" fg:x="1816" fg:w="184"/><text x="14.2613%" y="463.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (184 samples, 1.42%)</title><rect x="14.0113%" y="437" width="1.4196%" height="15" fill="rgb(219,102,11)" fg:x="1816" fg:w="184"/><text x="14.2613%" y="447.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (184 samples, 1.42%)</title><rect x="14.0113%" y="421" width="1.4196%" height="15" fill="rgb(243,110,44)" fg:x="1816" fg:w="184"/><text x="14.2613%" y="431.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (2 samples, 0.02%)</title><rect x="15.4155%" y="405" width="0.0154%" height="15" fill="rgb(222,74,54)" fg:x="1998" fg:w="2"/><text x="15.6655%" y="415.50"></text></g><g><title>sysvec_apic_timer_interrupt (2 samples, 0.02%)</title><rect x="15.4155%" y="389" width="0.0154%" height="15" fill="rgb(216,99,12)" fg:x="1998" fg:w="2"/><text x="15.6655%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (757 samples, 5.84%)</title><rect x="18.1159%" y="309" width="5.8406%" height="15" fill="rgb(226,22,26)" fg:x="2348" fg:w="757"/><text x="18.3659%" y="319.50">&lt;core::..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (757 samples, 5.84%)</title><rect x="18.1159%" y="293" width="5.8406%" height="15" fill="rgb(217,163,10)" fg:x="2348" fg:w="757"/><text x="18.3659%" y="303.50">&lt;core::..</text></g><g><title>asm_sysvec_apic_timer_interrupt (8 samples, 0.06%)</title><rect x="23.8948%" y="277" width="0.0617%" height="15" fill="rgb(213,25,53)" fg:x="3097" fg:w="8"/><text x="24.1448%" y="287.50"></text></g><g><title>sysvec_apic_timer_interrupt (8 samples, 0.06%)</title><rect x="23.8948%" y="261" width="0.0617%" height="15" fill="rgb(252,105,26)" fg:x="3097" fg:w="8"/><text x="24.1448%" y="271.50"></text></g><g><title>irq_exit_rcu (8 samples, 0.06%)</title><rect x="23.8948%" y="245" width="0.0617%" height="15" fill="rgb(220,39,43)" fg:x="3097" fg:w="8"/><text x="24.1448%" y="255.50"></text></g><g><title>__softirqentry_text_start (8 samples, 0.06%)</title><rect x="23.8948%" y="229" width="0.0617%" height="15" fill="rgb(229,68,48)" fg:x="3097" fg:w="8"/><text x="24.1448%" y="239.50"></text></g><g><title>run_timer_softirq (8 samples, 0.06%)</title><rect x="23.8948%" y="213" width="0.0617%" height="15" fill="rgb(252,8,32)" fg:x="3097" fg:w="8"/><text x="24.1448%" y="223.50"></text></g><g><title>__run_timers.part.0 (8 samples, 0.06%)</title><rect x="23.8948%" y="197" width="0.0617%" height="15" fill="rgb(223,20,43)" fg:x="3097" fg:w="8"/><text x="24.1448%" y="207.50"></text></g><g><title>call_timer_fn (8 samples, 0.06%)</title><rect x="23.8948%" y="181" width="0.0617%" height="15" fill="rgb(229,81,49)" fg:x="3097" fg:w="8"/><text x="24.1448%" y="191.50"></text></g><g><title>vbg_heartbeat_timer (8 samples, 0.06%)</title><rect x="23.8948%" y="165" width="0.0617%" height="15" fill="rgb(236,28,36)" fg:x="3097" fg:w="8"/><text x="24.1448%" y="175.50"></text></g><g><title>vbg_req_perform (8 samples, 0.06%)</title><rect x="23.8948%" y="149" width="0.0617%" height="15" fill="rgb(249,185,26)" fg:x="3097" fg:w="8"/><text x="24.1448%" y="159.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (5 samples, 0.04%)</title><rect x="23.9642%" y="309" width="0.0386%" height="15" fill="rgb(249,174,33)" fg:x="3106" fg:w="5"/><text x="24.2142%" y="319.50"></text></g><g><title>sysvec_apic_timer_interrupt (5 samples, 0.04%)</title><rect x="23.9642%" y="293" width="0.0386%" height="15" fill="rgb(233,201,37)" fg:x="3106" fg:w="5"/><text x="24.2142%" y="303.50"></text></g><g><title>irq_exit_rcu (5 samples, 0.04%)</title><rect x="23.9642%" y="277" width="0.0386%" height="15" fill="rgb(221,78,26)" fg:x="3106" fg:w="5"/><text x="24.2142%" y="287.50"></text></g><g><title>__softirqentry_text_start (5 samples, 0.04%)</title><rect x="23.9642%" y="261" width="0.0386%" height="15" fill="rgb(250,127,30)" fg:x="3106" fg:w="5"/><text x="24.2142%" y="271.50"></text></g><g><title>run_timer_softirq (5 samples, 0.04%)</title><rect x="23.9642%" y="245" width="0.0386%" height="15" fill="rgb(230,49,44)" fg:x="3106" fg:w="5"/><text x="24.2142%" y="255.50"></text></g><g><title>__run_timers.part.0 (5 samples, 0.04%)</title><rect x="23.9642%" y="229" width="0.0386%" height="15" fill="rgb(229,67,23)" fg:x="3106" fg:w="5"/><text x="24.2142%" y="239.50"></text></g><g><title>call_timer_fn (5 samples, 0.04%)</title><rect x="23.9642%" y="213" width="0.0386%" height="15" fill="rgb(249,83,47)" fg:x="3106" fg:w="5"/><text x="24.2142%" y="223.50"></text></g><g><title>vbg_heartbeat_timer (5 samples, 0.04%)</title><rect x="23.9642%" y="197" width="0.0386%" height="15" fill="rgb(215,43,3)" fg:x="3106" fg:w="5"/><text x="24.2142%" y="207.50"></text></g><g><title>vbg_req_perform (5 samples, 0.04%)</title><rect x="23.9642%" y="181" width="0.0386%" height="15" fill="rgb(238,154,13)" fg:x="3106" fg:w="5"/><text x="24.2142%" y="191.50"></text></g><g><title>alloc::vec::set_len_on_drop::SetLenOnDrop::increment_len (21 samples, 0.16%)</title><rect x="34.2489%" y="261" width="0.1620%" height="15" fill="rgb(219,56,2)" fg:x="4439" fg:w="21"/><text x="34.4989%" y="271.50"></text></g><g><title>irq_exit_rcu (2 samples, 0.02%)</title><rect x="34.4109%" y="229" width="0.0154%" height="15" fill="rgb(233,0,4)" fg:x="4460" fg:w="2"/><text x="34.6609%" y="239.50"></text></g><g><title>__softirqentry_text_start (2 samples, 0.02%)</title><rect x="34.4109%" y="213" width="0.0154%" height="15" fill="rgb(235,30,7)" fg:x="4460" fg:w="2"/><text x="34.6609%" y="223.50"></text></g><g><title>asm_common_interrupt (3 samples, 0.02%)</title><rect x="34.4109%" y="261" width="0.0231%" height="15" fill="rgb(250,79,13)" fg:x="4460" fg:w="3"/><text x="34.6609%" y="271.50"></text></g><g><title>common_interrupt (3 samples, 0.02%)</title><rect x="34.4109%" y="245" width="0.0231%" height="15" fill="rgb(211,146,34)" fg:x="4460" fg:w="3"/><text x="34.6609%" y="255.50"></text></g><g><title>irq_exit_rcu (13 samples, 0.10%)</title><rect x="34.4341%" y="229" width="0.1003%" height="15" fill="rgb(228,22,38)" fg:x="4463" fg:w="13"/><text x="34.6841%" y="239.50"></text></g><g><title>__softirqentry_text_start (13 samples, 0.10%)</title><rect x="34.4341%" y="213" width="0.1003%" height="15" fill="rgb(235,168,5)" fg:x="4463" fg:w="13"/><text x="34.6841%" y="223.50"></text></g><g><title>run_timer_softirq (13 samples, 0.10%)</title><rect x="34.4341%" y="197" width="0.1003%" height="15" fill="rgb(221,155,16)" fg:x="4463" fg:w="13"/><text x="34.6841%" y="207.50"></text></g><g><title>__run_timers.part.0 (13 samples, 0.10%)</title><rect x="34.4341%" y="181" width="0.1003%" height="15" fill="rgb(215,215,53)" fg:x="4463" fg:w="13"/><text x="34.6841%" y="191.50"></text></g><g><title>call_timer_fn (13 samples, 0.10%)</title><rect x="34.4341%" y="165" width="0.1003%" height="15" fill="rgb(223,4,10)" fg:x="4463" fg:w="13"/><text x="34.6841%" y="175.50"></text></g><g><title>vbg_heartbeat_timer (13 samples, 0.10%)</title><rect x="34.4341%" y="149" width="0.1003%" height="15" fill="rgb(234,103,6)" fg:x="4463" fg:w="13"/><text x="34.6841%" y="159.50"></text></g><g><title>vbg_req_perform (13 samples, 0.10%)</title><rect x="34.4341%" y="133" width="0.1003%" height="15" fill="rgb(227,97,0)" fg:x="4463" fg:w="13"/><text x="34.6841%" y="143.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (14 samples, 0.11%)</title><rect x="34.4341%" y="261" width="0.1080%" height="15" fill="rgb(234,150,53)" fg:x="4463" fg:w="14"/><text x="34.6841%" y="271.50"></text></g><g><title>sysvec_apic_timer_interrupt (14 samples, 0.11%)</title><rect x="34.4341%" y="245" width="0.1080%" height="15" fill="rgb(228,201,54)" fg:x="4463" fg:w="14"/><text x="34.6841%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1,729 samples, 13.34%)</title><rect x="24.0028%" y="293" width="13.3400%" height="15" fill="rgb(222,22,37)" fg:x="3111" fg:w="1729"/><text x="24.2528%" y="303.50">core::iter::traits::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::{{closure}} (1,729 samples, 13.34%)</title><rect x="24.0028%" y="277" width="13.3400%" height="15" fill="rgb(237,53,32)" fg:x="3111" fg:w="1729"/><text x="24.2528%" y="287.50">alloc::vec::Vec&lt;T,A&gt;..</text></g><g><title>core::ptr::write (363 samples, 2.80%)</title><rect x="34.5421%" y="261" width="2.8007%" height="15" fill="rgb(233,25,53)" fg:x="4477" fg:w="363"/><text x="34.7921%" y="271.50">co..</text></g><g><title>asm_sysvec_apic_timer_interrupt (2 samples, 0.02%)</title><rect x="37.3274%" y="245" width="0.0154%" height="15" fill="rgb(210,40,34)" fg:x="4838" fg:w="2"/><text x="37.5774%" y="255.50"></text></g><g><title>sysvec_apic_timer_interrupt (2 samples, 0.02%)</title><rect x="37.3274%" y="229" width="0.0154%" height="15" fill="rgb(241,220,44)" fg:x="4838" fg:w="2"/><text x="37.5774%" y="239.50"></text></g><g><title>irq_exit_rcu (2 samples, 0.02%)</title><rect x="37.3274%" y="213" width="0.0154%" height="15" fill="rgb(235,28,35)" fg:x="4838" fg:w="2"/><text x="37.5774%" y="223.50"></text></g><g><title>__softirqentry_text_start (2 samples, 0.02%)</title><rect x="37.3274%" y="197" width="0.0154%" height="15" fill="rgb(210,56,17)" fg:x="4838" fg:w="2"/><text x="37.5774%" y="207.50"></text></g><g><title>run_timer_softirq (2 samples, 0.02%)</title><rect x="37.3274%" y="181" width="0.0154%" height="15" fill="rgb(224,130,29)" fg:x="4838" fg:w="2"/><text x="37.5774%" y="191.50"></text></g><g><title>__run_timers.part.0 (2 samples, 0.02%)</title><rect x="37.3274%" y="165" width="0.0154%" height="15" fill="rgb(235,212,8)" fg:x="4838" fg:w="2"/><text x="37.5774%" y="175.50"></text></g><g><title>call_timer_fn (2 samples, 0.02%)</title><rect x="37.3274%" y="149" width="0.0154%" height="15" fill="rgb(223,33,50)" fg:x="4838" fg:w="2"/><text x="37.5774%" y="159.50"></text></g><g><title>vbg_heartbeat_timer (2 samples, 0.02%)</title><rect x="37.3274%" y="133" width="0.0154%" height="15" fill="rgb(219,149,13)" fg:x="4838" fg:w="2"/><text x="37.5774%" y="143.50"></text></g><g><title>vbg_req_perform (2 samples, 0.02%)</title><rect x="37.3274%" y="117" width="0.0154%" height="15" fill="rgb(250,156,29)" fg:x="4838" fg:w="2"/><text x="37.5774%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3,022 samples, 23.32%)</title><rect x="15.4309%" y="389" width="23.3161%" height="15" fill="rgb(216,193,19)" fg:x="2000" fg:w="3022"/><text x="15.6809%" y="399.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (3,022 samples, 23.32%)</title><rect x="15.4309%" y="373" width="23.3161%" height="15" fill="rgb(216,135,14)" fg:x="2000" fg:w="3022"/><text x="15.6809%" y="383.50">alloc::vec::Vec&lt;T,A&gt;::extend_trusted</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3,022 samples, 23.32%)</title><rect x="15.4309%" y="357" width="23.3161%" height="15" fill="rgb(241,47,5)" fg:x="2000" fg:w="3022"/><text x="15.6809%" y="367.50">core::iter::traits::iterator::Iterato..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,022 samples, 23.32%)</title><rect x="15.4309%" y="341" width="23.3161%" height="15" fill="rgb(233,42,35)" fg:x="2000" fg:w="3022"/><text x="15.6809%" y="351.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; ..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (3,022 samples, 23.32%)</title><rect x="15.4309%" y="325" width="23.3161%" height="15" fill="rgb(231,13,6)" fg:x="2000" fg:w="3022"/><text x="15.6809%" y="335.50">core::iter::traits::iterator::Iterato..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1,911 samples, 14.74%)</title><rect x="24.0028%" y="309" width="14.7442%" height="15" fill="rgb(207,181,40)" fg:x="3111" fg:w="1911"/><text x="24.2528%" y="319.50">core::iter::adapters::..</text></g><g><title>wfc::wfc::baseline::BaseLine::legal_tiles::{{closure}}::{{closure}} (182 samples, 1.40%)</title><rect x="37.3428%" y="293" width="1.4042%" height="15" fill="rgb(254,173,49)" fg:x="4840" fg:w="182"/><text x="37.5928%" y="303.50"></text></g><g><title>asm_common_interrupt (2 samples, 0.02%)</title><rect x="38.7316%" y="277" width="0.0154%" height="15" fill="rgb(221,1,38)" fg:x="5020" fg:w="2"/><text x="38.9816%" y="287.50"></text></g><g><title>common_interrupt (2 samples, 0.02%)</title><rect x="38.7316%" y="261" width="0.0154%" height="15" fill="rgb(206,124,46)" fg:x="5020" fg:w="2"/><text x="38.9816%" y="271.50"></text></g><g><title>irq_exit_rcu (2 samples, 0.02%)</title><rect x="38.7316%" y="245" width="0.0154%" height="15" fill="rgb(249,21,11)" fg:x="5020" fg:w="2"/><text x="38.9816%" y="255.50"></text></g><g><title>__softirqentry_text_start (2 samples, 0.02%)</title><rect x="38.7316%" y="229" width="0.0154%" height="15" fill="rgb(222,201,40)" fg:x="5020" fg:w="2"/><text x="38.9816%" y="239.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (5 samples, 0.04%)</title><rect x="47.4809%" y="261" width="0.0386%" height="15" fill="rgb(235,61,29)" fg:x="6154" fg:w="5"/><text x="47.7309%" y="271.50"></text></g><g><title>sysvec_apic_timer_interrupt (5 samples, 0.04%)</title><rect x="47.4809%" y="245" width="0.0386%" height="15" fill="rgb(219,207,3)" fg:x="6154" fg:w="5"/><text x="47.7309%" y="255.50"></text></g><g><title>irq_exit_rcu (5 samples, 0.04%)</title><rect x="47.4809%" y="229" width="0.0386%" height="15" fill="rgb(222,56,46)" fg:x="6154" fg:w="5"/><text x="47.7309%" y="239.50"></text></g><g><title>__softirqentry_text_start (5 samples, 0.04%)</title><rect x="47.4809%" y="213" width="0.0386%" height="15" fill="rgb(239,76,54)" fg:x="6154" fg:w="5"/><text x="47.7309%" y="223.50"></text></g><g><title>run_timer_softirq (4 samples, 0.03%)</title><rect x="47.4886%" y="197" width="0.0309%" height="15" fill="rgb(231,124,27)" fg:x="6155" fg:w="4"/><text x="47.7386%" y="207.50"></text></g><g><title>__run_timers.part.0 (4 samples, 0.03%)</title><rect x="47.4886%" y="181" width="0.0309%" height="15" fill="rgb(249,195,6)" fg:x="6155" fg:w="4"/><text x="47.7386%" y="191.50"></text></g><g><title>call_timer_fn (4 samples, 0.03%)</title><rect x="47.4886%" y="165" width="0.0309%" height="15" fill="rgb(237,174,47)" fg:x="6155" fg:w="4"/><text x="47.7386%" y="175.50"></text></g><g><title>vbg_heartbeat_timer (4 samples, 0.03%)</title><rect x="47.4886%" y="149" width="0.0309%" height="15" fill="rgb(206,201,31)" fg:x="6155" fg:w="4"/><text x="47.7386%" y="159.50"></text></g><g><title>vbg_req_perform (4 samples, 0.03%)</title><rect x="47.4886%" y="133" width="0.0309%" height="15" fill="rgb(231,57,52)" fg:x="6155" fg:w="4"/><text x="47.7386%" y="143.50"></text></g><g><title>__rdl_alloc (1,513 samples, 11.67%)</title><rect x="39.2022%" y="277" width="11.6735%" height="15" fill="rgb(248,177,22)" fg:x="5081" fg:w="1513"/><text x="39.4522%" y="287.50">__rdl_alloc</text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (435 samples, 3.36%)</title><rect x="47.5195%" y="261" width="3.3562%" height="15" fill="rgb(215,211,37)" fg:x="6159" fg:w="435"/><text x="47.7695%" y="271.50">std..</text></g><g><title>asm_sysvec_apic_timer_interrupt (2 samples, 0.02%)</title><rect x="50.8603%" y="245" width="0.0154%" height="15" fill="rgb(241,128,51)" fg:x="6592" fg:w="2"/><text x="51.1103%" y="255.50"></text></g><g><title>sysvec_apic_timer_interrupt (2 samples, 0.02%)</title><rect x="50.8603%" y="229" width="0.0154%" height="15" fill="rgb(227,165,31)" fg:x="6592" fg:w="2"/><text x="51.1103%" y="239.50"></text></g><g><title>irq_exit_rcu (2 samples, 0.02%)</title><rect x="50.8603%" y="213" width="0.0154%" height="15" fill="rgb(228,167,24)" fg:x="6592" fg:w="2"/><text x="51.1103%" y="223.50"></text></g><g><title>__softirqentry_text_start (2 samples, 0.02%)</title><rect x="50.8603%" y="197" width="0.0154%" height="15" fill="rgb(228,143,12)" fg:x="6592" fg:w="2"/><text x="51.1103%" y="207.50"></text></g><g><title>run_timer_softirq (2 samples, 0.02%)</title><rect x="50.8603%" y="181" width="0.0154%" height="15" fill="rgb(249,149,8)" fg:x="6592" fg:w="2"/><text x="51.1103%" y="191.50"></text></g><g><title>__run_timers.part.0 (2 samples, 0.02%)</title><rect x="50.8603%" y="165" width="0.0154%" height="15" fill="rgb(243,35,44)" fg:x="6592" fg:w="2"/><text x="51.1103%" y="175.50"></text></g><g><title>call_timer_fn (2 samples, 0.02%)</title><rect x="50.8603%" y="149" width="0.0154%" height="15" fill="rgb(246,89,9)" fg:x="6592" fg:w="2"/><text x="51.1103%" y="159.50"></text></g><g><title>vbg_heartbeat_timer (2 samples, 0.02%)</title><rect x="50.8603%" y="133" width="0.0154%" height="15" fill="rgb(233,213,13)" fg:x="6592" fg:w="2"/><text x="51.1103%" y="143.50"></text></g><g><title>vbg_req_perform (2 samples, 0.02%)</title><rect x="50.8603%" y="117" width="0.0154%" height="15" fill="rgb(233,141,41)" fg:x="6592" fg:w="2"/><text x="51.1103%" y="127.50"></text></g><g><title>__rust_alloc (78 samples, 0.60%)</title><rect x="50.8757%" y="277" width="0.6018%" height="15" fill="rgb(239,167,4)" fg:x="6594" fg:w="78"/><text x="51.1257%" y="287.50"></text></g><g><title>asm_common_interrupt (3 samples, 0.02%)</title><rect x="68.2355%" y="261" width="0.0231%" height="15" fill="rgb(209,217,16)" fg:x="8844" fg:w="3"/><text x="68.4855%" y="271.50"></text></g><g><title>common_interrupt (3 samples, 0.02%)</title><rect x="68.2355%" y="245" width="0.0231%" height="15" fill="rgb(219,88,35)" fg:x="8844" fg:w="3"/><text x="68.4855%" y="255.50"></text></g><g><title>irq_exit_rcu (3 samples, 0.02%)</title><rect x="68.2355%" y="229" width="0.0231%" height="15" fill="rgb(220,193,23)" fg:x="8844" fg:w="3"/><text x="68.4855%" y="239.50"></text></g><g><title>__softirqentry_text_start (3 samples, 0.02%)</title><rect x="68.2355%" y="213" width="0.0231%" height="15" fill="rgb(230,90,52)" fg:x="8844" fg:w="3"/><text x="68.4855%" y="223.50"></text></g><g><title>irq_exit_rcu (18 samples, 0.14%)</title><rect x="68.2586%" y="229" width="0.1389%" height="15" fill="rgb(252,106,19)" fg:x="8847" fg:w="18"/><text x="68.5086%" y="239.50"></text></g><g><title>__softirqentry_text_start (18 samples, 0.14%)</title><rect x="68.2586%" y="213" width="0.1389%" height="15" fill="rgb(206,74,20)" fg:x="8847" fg:w="18"/><text x="68.5086%" y="223.50"></text></g><g><title>run_timer_softirq (18 samples, 0.14%)</title><rect x="68.2586%" y="197" width="0.1389%" height="15" fill="rgb(230,138,44)" fg:x="8847" fg:w="18"/><text x="68.5086%" y="207.50"></text></g><g><title>__run_timers.part.0 (18 samples, 0.14%)</title><rect x="68.2586%" y="181" width="0.1389%" height="15" fill="rgb(235,182,43)" fg:x="8847" fg:w="18"/><text x="68.5086%" y="191.50"></text></g><g><title>call_timer_fn (18 samples, 0.14%)</title><rect x="68.2586%" y="165" width="0.1389%" height="15" fill="rgb(242,16,51)" fg:x="8847" fg:w="18"/><text x="68.5086%" y="175.50"></text></g><g><title>vbg_heartbeat_timer (18 samples, 0.14%)</title><rect x="68.2586%" y="149" width="0.1389%" height="15" fill="rgb(248,9,4)" fg:x="8847" fg:w="18"/><text x="68.5086%" y="159.50"></text></g><g><title>vbg_req_perform (18 samples, 0.14%)</title><rect x="68.2586%" y="133" width="0.1389%" height="15" fill="rgb(210,31,22)" fg:x="8847" fg:w="18"/><text x="68.5086%" y="143.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (19 samples, 0.15%)</title><rect x="68.2586%" y="261" width="0.1466%" height="15" fill="rgb(239,54,39)" fg:x="8847" fg:w="19"/><text x="68.5086%" y="271.50"></text></g><g><title>sysvec_apic_timer_interrupt (19 samples, 0.15%)</title><rect x="68.2586%" y="245" width="0.1466%" height="15" fill="rgb(230,99,41)" fg:x="8847" fg:w="19"/><text x="68.5086%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (6,867 samples, 52.98%)</title><rect x="15.4309%" y="453" width="52.9820%" height="15" fill="rgb(253,106,12)" fg:x="2000" fg:w="6867"/><text x="15.6809%" y="463.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (6,867 samples, 52.98%)</title><rect x="15.4309%" y="437" width="52.9820%" height="15" fill="rgb(213,46,41)" fg:x="2000" fg:w="6867"/><text x="15.6809%" y="447.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6,867 samples, 52.98%)</title><rect x="15.4309%" y="421" width="52.9820%" height="15" fill="rgb(215,133,35)" fg:x="2000" fg:w="6867"/><text x="15.6809%" y="431.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (6,867 samples, 52.98%)</title><rect x="15.4309%" y="405" width="52.9820%" height="15" fill="rgb(213,28,5)" fg:x="2000" fg:w="6867"/><text x="15.6809%" y="415.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::fro..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3,845 samples, 29.67%)</title><rect x="38.7470%" y="389" width="29.6659%" height="15" fill="rgb(215,77,49)" fg:x="5022" fg:w="3845"/><text x="38.9970%" y="399.50">alloc::vec::Vec&lt;T&gt;::with_capacity</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3,845 samples, 29.67%)</title><rect x="38.7470%" y="373" width="29.6659%" height="15" fill="rgb(248,100,22)" fg:x="5022" fg:w="3845"/><text x="38.9970%" y="383.50">alloc::vec::Vec&lt;T,A&gt;::with_capacity_in</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3,845 samples, 29.67%)</title><rect x="38.7470%" y="357" width="29.6659%" height="15" fill="rgb(208,67,9)" fg:x="5022" fg:w="3845"/><text x="38.9970%" y="367.50">alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3,845 samples, 29.67%)</title><rect x="38.7470%" y="341" width="29.6659%" height="15" fill="rgb(219,133,21)" fg:x="5022" fg:w="3845"/><text x="38.9970%" y="351.50">alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,804 samples, 29.35%)</title><rect x="39.0633%" y="325" width="29.3496%" height="15" fill="rgb(246,46,29)" fg:x="5063" fg:w="3804"/><text x="39.3133%" y="335.50">&lt;alloc::alloc::Global as core::alloc::Allocator..</text></g><g><title>alloc::alloc::Global::alloc_impl (3,804 samples, 29.35%)</title><rect x="39.0633%" y="309" width="29.3496%" height="15" fill="rgb(246,185,52)" fg:x="5063" fg:w="3804"/><text x="39.3133%" y="319.50">alloc::alloc::Global::alloc_impl</text></g><g><title>alloc::alloc::alloc (3,804 samples, 29.35%)</title><rect x="39.0633%" y="293" width="29.3496%" height="15" fill="rgb(252,136,11)" fg:x="5063" fg:w="3804"/><text x="39.3133%" y="303.50">alloc::alloc::alloc</text></g><g><title>malloc (2,195 samples, 16.94%)</title><rect x="51.4775%" y="277" width="16.9354%" height="15" fill="rgb(219,138,53)" fg:x="6672" fg:w="2195"/><text x="51.7275%" y="287.50">malloc</text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (101 samples, 0.78%)</title><rect x="68.4129%" y="437" width="0.7793%" height="15" fill="rgb(211,51,23)" fg:x="8867" fg:w="101"/><text x="68.6629%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (113 samples, 0.87%)</title><rect x="68.4129%" y="453" width="0.8718%" height="15" fill="rgb(247,221,28)" fg:x="8867" fg:w="113"/><text x="68.6629%" y="463.50"></text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (12 samples, 0.09%)</title><rect x="69.1922%" y="437" width="0.0926%" height="15" fill="rgb(251,222,45)" fg:x="8968" fg:w="12"/><text x="69.4422%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (12 samples, 0.09%)</title><rect x="69.1922%" y="421" width="0.0926%" height="15" fill="rgb(217,162,53)" fg:x="8968" fg:w="12"/><text x="69.4422%" y="431.50"></text></g><g><title>core::cmp::min (12 samples, 0.09%)</title><rect x="69.1922%" y="405" width="0.0926%" height="15" fill="rgb(229,93,14)" fg:x="8968" fg:w="12"/><text x="69.4422%" y="415.50"></text></g><g><title>core::cmp::Ord::min (12 samples, 0.09%)</title><rect x="69.1922%" y="389" width="0.0926%" height="15" fill="rgb(209,67,49)" fg:x="8968" fg:w="12"/><text x="69.4422%" y="399.50"></text></g><g><title>core::cmp::min_by (12 samples, 0.09%)</title><rect x="69.1922%" y="373" width="0.0926%" height="15" fill="rgb(213,87,29)" fg:x="8968" fg:w="12"/><text x="69.4422%" y="383.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (6 samples, 0.05%)</title><rect x="74.3384%" y="341" width="0.0463%" height="15" fill="rgb(205,151,52)" fg:x="9635" fg:w="6"/><text x="74.5884%" y="351.50"></text></g><g><title>sysvec_apic_timer_interrupt (6 samples, 0.05%)</title><rect x="74.3384%" y="325" width="0.0463%" height="15" fill="rgb(253,215,39)" fg:x="9635" fg:w="6"/><text x="74.5884%" y="335.50"></text></g><g><title>irq_exit_rcu (6 samples, 0.05%)</title><rect x="74.3384%" y="309" width="0.0463%" height="15" fill="rgb(221,220,41)" fg:x="9635" fg:w="6"/><text x="74.5884%" y="319.50"></text></g><g><title>__softirqentry_text_start (6 samples, 0.05%)</title><rect x="74.3384%" y="293" width="0.0463%" height="15" fill="rgb(218,133,21)" fg:x="9635" fg:w="6"/><text x="74.5884%" y="303.50"></text></g><g><title>run_timer_softirq (6 samples, 0.05%)</title><rect x="74.3384%" y="277" width="0.0463%" height="15" fill="rgb(221,193,43)" fg:x="9635" fg:w="6"/><text x="74.5884%" y="287.50"></text></g><g><title>__run_timers.part.0 (6 samples, 0.05%)</title><rect x="74.3384%" y="261" width="0.0463%" height="15" fill="rgb(240,128,52)" fg:x="9635" fg:w="6"/><text x="74.5884%" y="271.50"></text></g><g><title>call_timer_fn (6 samples, 0.05%)</title><rect x="74.3384%" y="245" width="0.0463%" height="15" fill="rgb(253,114,12)" fg:x="9635" fg:w="6"/><text x="74.5884%" y="255.50"></text></g><g><title>vbg_heartbeat_timer (6 samples, 0.05%)</title><rect x="74.3384%" y="229" width="0.0463%" height="15" fill="rgb(215,223,47)" fg:x="9635" fg:w="6"/><text x="74.5884%" y="239.50"></text></g><g><title>vbg_req_perform (6 samples, 0.05%)</title><rect x="74.3384%" y="213" width="0.0463%" height="15" fill="rgb(248,225,23)" fg:x="9635" fg:w="6"/><text x="74.5884%" y="223.50"></text></g><g><title>__rdl_dealloc (645 samples, 4.98%)</title><rect x="69.4159%" y="373" width="4.9765%" height="15" fill="rgb(250,108,0)" fg:x="8997" fg:w="645"/><text x="69.6659%" y="383.50">__rdl_..</text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (645 samples, 4.98%)</title><rect x="69.4159%" y="357" width="4.9765%" height="15" fill="rgb(228,208,7)" fg:x="8997" fg:w="645"/><text x="69.6659%" y="367.50">std::s..</text></g><g><title>__rust_dealloc (82 samples, 0.63%)</title><rect x="74.3924%" y="373" width="0.6327%" height="15" fill="rgb(244,45,10)" fg:x="9642" fg:w="82"/><text x="74.6424%" y="383.50"></text></g><g><title>[libc.so.6] (935 samples, 7.21%)</title><rect x="89.6304%" y="357" width="7.2139%" height="15" fill="rgb(207,125,25)" fg:x="11617" fg:w="935"/><text x="89.8804%" y="367.50">[libc.so.6]</text></g><g><title>asm_sysvec_apic_timer_interrupt (8 samples, 0.06%)</title><rect x="96.7827%" y="341" width="0.0617%" height="15" fill="rgb(210,195,18)" fg:x="12544" fg:w="8"/><text x="97.0327%" y="351.50"></text></g><g><title>sysvec_apic_timer_interrupt (8 samples, 0.06%)</title><rect x="96.7827%" y="325" width="0.0617%" height="15" fill="rgb(249,80,12)" fg:x="12544" fg:w="8"/><text x="97.0327%" y="335.50"></text></g><g><title>irq_exit_rcu (8 samples, 0.06%)</title><rect x="96.7827%" y="309" width="0.0617%" height="15" fill="rgb(221,65,9)" fg:x="12544" fg:w="8"/><text x="97.0327%" y="319.50"></text></g><g><title>__softirqentry_text_start (8 samples, 0.06%)</title><rect x="96.7827%" y="293" width="0.0617%" height="15" fill="rgb(235,49,36)" fg:x="12544" fg:w="8"/><text x="97.0327%" y="303.50"></text></g><g><title>run_timer_softirq (7 samples, 0.05%)</title><rect x="96.7904%" y="277" width="0.0540%" height="15" fill="rgb(225,32,20)" fg:x="12545" fg:w="7"/><text x="97.0404%" y="287.50"></text></g><g><title>__run_timers.part.0 (7 samples, 0.05%)</title><rect x="96.7904%" y="261" width="0.0540%" height="15" fill="rgb(215,141,46)" fg:x="12545" fg:w="7"/><text x="97.0404%" y="271.50"></text></g><g><title>call_timer_fn (7 samples, 0.05%)</title><rect x="96.7904%" y="245" width="0.0540%" height="15" fill="rgb(250,160,47)" fg:x="12545" fg:w="7"/><text x="97.0404%" y="255.50"></text></g><g><title>vbg_heartbeat_timer (7 samples, 0.05%)</title><rect x="96.7904%" y="229" width="0.0540%" height="15" fill="rgb(216,222,40)" fg:x="12545" fg:w="7"/><text x="97.0404%" y="239.50"></text></g><g><title>vbg_req_perform (7 samples, 0.05%)</title><rect x="96.7904%" y="213" width="0.0540%" height="15" fill="rgb(234,217,39)" fg:x="12545" fg:w="7"/><text x="97.0404%" y="223.50"></text></g><g><title>irq_exit_rcu (3 samples, 0.02%)</title><rect x="96.8444%" y="325" width="0.0231%" height="15" fill="rgb(207,178,40)" fg:x="12552" fg:w="3"/><text x="97.0944%" y="335.50"></text></g><g><title>__softirqentry_text_start (3 samples, 0.02%)</title><rect x="96.8444%" y="309" width="0.0231%" height="15" fill="rgb(221,136,13)" fg:x="12552" fg:w="3"/><text x="97.0944%" y="319.50"></text></g><g><title>asm_common_interrupt (4 samples, 0.03%)</title><rect x="96.8444%" y="357" width="0.0309%" height="15" fill="rgb(249,199,10)" fg:x="12552" fg:w="4"/><text x="97.0944%" y="367.50"></text></g><g><title>common_interrupt (4 samples, 0.03%)</title><rect x="96.8444%" y="341" width="0.0309%" height="15" fill="rgb(249,222,13)" fg:x="12552" fg:w="4"/><text x="97.0944%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,588 samples, 27.68%)</title><rect x="69.3388%" y="405" width="27.6830%" height="15" fill="rgb(244,185,38)" fg:x="8987" fg:w="3588"/><text x="69.5888%" y="415.50">&lt;alloc::alloc::Global as core::alloc::Alloca..</text></g><g><title>alloc::alloc::dealloc (3,588 samples, 27.68%)</title><rect x="69.3388%" y="389" width="27.6830%" height="15" fill="rgb(236,202,9)" fg:x="8987" fg:w="3588"/><text x="69.5888%" y="399.50">alloc::alloc::dealloc</text></g><g><title>free (2,851 samples, 22.00%)</title><rect x="75.0251%" y="373" width="21.9968%" height="15" fill="rgb(250,229,37)" fg:x="9724" fg:w="2851"/><text x="75.2751%" y="383.50">free</text></g><g><title>asm_sysvec_apic_timer_interrupt (19 samples, 0.15%)</title><rect x="96.8752%" y="357" width="0.1466%" height="15" fill="rgb(206,174,23)" fg:x="12556" fg:w="19"/><text x="97.1252%" y="367.50"></text></g><g><title>sysvec_apic_timer_interrupt (19 samples, 0.15%)</title><rect x="96.8752%" y="341" width="0.1466%" height="15" fill="rgb(211,33,43)" fg:x="12556" fg:w="19"/><text x="97.1252%" y="351.50"></text></g><g><title>irq_exit_rcu (19 samples, 0.15%)</title><rect x="96.8752%" y="325" width="0.1466%" height="15" fill="rgb(245,58,50)" fg:x="12556" fg:w="19"/><text x="97.1252%" y="335.50"></text></g><g><title>__softirqentry_text_start (19 samples, 0.15%)</title><rect x="96.8752%" y="309" width="0.1466%" height="15" fill="rgb(244,68,36)" fg:x="12556" fg:w="19"/><text x="97.1252%" y="319.50"></text></g><g><title>run_timer_softirq (17 samples, 0.13%)</title><rect x="96.8907%" y="293" width="0.1312%" height="15" fill="rgb(232,229,15)" fg:x="12558" fg:w="17"/><text x="97.1407%" y="303.50"></text></g><g><title>__run_timers.part.0 (17 samples, 0.13%)</title><rect x="96.8907%" y="277" width="0.1312%" height="15" fill="rgb(254,30,23)" fg:x="12558" fg:w="17"/><text x="97.1407%" y="287.50"></text></g><g><title>call_timer_fn (17 samples, 0.13%)</title><rect x="96.8907%" y="261" width="0.1312%" height="15" fill="rgb(235,160,14)" fg:x="12558" fg:w="17"/><text x="97.1407%" y="271.50"></text></g><g><title>vbg_heartbeat_timer (17 samples, 0.13%)</title><rect x="96.8907%" y="245" width="0.1312%" height="15" fill="rgb(212,155,44)" fg:x="12558" fg:w="17"/><text x="97.1407%" y="255.50"></text></g><g><title>vbg_req_perform (17 samples, 0.13%)</title><rect x="96.8907%" y="229" width="0.1312%" height="15" fill="rgb(226,2,50)" fg:x="12558" fg:w="17"/><text x="97.1407%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bool&gt;&gt; (3,622 samples, 27.95%)</title><rect x="69.2848%" y="453" width="27.9454%" height="15" fill="rgb(234,177,6)" fg:x="8980" fg:w="3622"/><text x="69.5348%" y="463.50">core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bool..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;bool&gt;&gt; (3,622 samples, 27.95%)</title><rect x="69.2848%" y="437" width="27.9454%" height="15" fill="rgb(217,24,9)" fg:x="8980" fg:w="3622"/><text x="69.5348%" y="447.50">core::ptr::drop_in_place&lt;alloc::raw_vec::RawV..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,622 samples, 27.95%)</title><rect x="69.2848%" y="421" width="27.9454%" height="15" fill="rgb(220,13,46)" fg:x="8980" fg:w="3622"/><text x="69.5348%" y="431.50">&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::dr..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (27 samples, 0.21%)</title><rect x="97.0218%" y="405" width="0.2083%" height="15" fill="rgb(239,221,27)" fg:x="12575" fg:w="27"/><text x="97.2718%" y="415.50"></text></g><g><title>wfc::wfc::direction_mapping::DirectionMapping&lt;T&gt;::down (2 samples, 0.02%)</title><rect x="97.2379%" y="453" width="0.0154%" height="15" fill="rgb(222,198,25)" fg:x="12603" fg:w="2"/><text x="97.4879%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.02%)</title><rect x="97.2379%" y="437" width="0.0154%" height="15" fill="rgb(211,99,13)" fg:x="12603" fg:w="2"/><text x="97.4879%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.02%)</title><rect x="97.2379%" y="421" width="0.0154%" height="15" fill="rgb(232,111,31)" fg:x="12603" fg:w="2"/><text x="97.4879%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.02%)</title><rect x="97.2379%" y="405" width="0.0154%" height="15" fill="rgb(245,82,37)" fg:x="12603" fg:w="2"/><text x="97.4879%" y="415.50"></text></g><g><title>wfc::wfc::direction_mapping::DirectionMapping&lt;T&gt;::front (4 samples, 0.03%)</title><rect x="97.2533%" y="453" width="0.0309%" height="15" fill="rgb(227,149,46)" fg:x="12605" fg:w="4"/><text x="97.5033%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 0.03%)</title><rect x="97.2533%" y="437" width="0.0309%" height="15" fill="rgb(218,36,50)" fg:x="12605" fg:w="4"/><text x="97.5033%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.03%)</title><rect x="97.2533%" y="421" width="0.0309%" height="15" fill="rgb(226,80,48)" fg:x="12605" fg:w="4"/><text x="97.5033%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.03%)</title><rect x="97.2533%" y="405" width="0.0309%" height="15" fill="rgb(238,224,15)" fg:x="12605" fg:w="4"/><text x="97.5033%" y="415.50"></text></g><g><title>wfc::wfc::direction_mapping::DirectionMapping&lt;T&gt;::left (2 samples, 0.02%)</title><rect x="97.2842%" y="453" width="0.0154%" height="15" fill="rgb(241,136,10)" fg:x="12609" fg:w="2"/><text x="97.5342%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.02%)</title><rect x="97.2842%" y="437" width="0.0154%" height="15" fill="rgb(208,32,45)" fg:x="12609" fg:w="2"/><text x="97.5342%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.02%)</title><rect x="97.2842%" y="421" width="0.0154%" height="15" fill="rgb(207,135,9)" fg:x="12609" fg:w="2"/><text x="97.5342%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.02%)</title><rect x="97.2842%" y="405" width="0.0154%" height="15" fill="rgb(206,86,44)" fg:x="12609" fg:w="2"/><text x="97.5342%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12,459 samples, 96.13%)</title><rect x="1.1882%" y="549" width="96.1268%" height="15" fill="rgb(245,177,15)" fg:x="154" fg:w="12459"/><text x="1.4382%" y="559.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12,450 samples, 96.06%)</title><rect x="1.2576%" y="533" width="96.0574%" height="15" fill="rgb(206,64,50)" fg:x="163" fg:w="12450"/><text x="1.5076%" y="543.50">&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (12,439 samples, 95.97%)</title><rect x="1.3425%" y="517" width="95.9725%" height="15" fill="rgb(234,36,40)" fg:x="174" fg:w="12439"/><text x="1.5925%" y="527.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::filter_map::filter_map_fold::{{closure}} (12,144 samples, 93.70%)</title><rect x="3.6185%" y="501" width="93.6965%" height="15" fill="rgb(213,64,8)" fg:x="469" fg:w="12144"/><text x="3.8685%" y="511.50">core::iter::adapters::filter_map::filter_map_fold::{{closure}}</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (11,959 samples, 92.27%)</title><rect x="5.0459%" y="485" width="92.2691%" height="15" fill="rgb(210,75,36)" fg:x="654" fg:w="11959"/><text x="5.2959%" y="495.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>wfc::wfc::baseline::BaseLine::legal_tiles::{{closure}} (10,799 samples, 83.32%)</title><rect x="13.9958%" y="469" width="83.3192%" height="15" fill="rgb(229,88,21)" fg:x="1814" fg:w="10799"/><text x="14.2458%" y="479.50">wfc::wfc::baseline::BaseLine::legal_tiles::{{closure}}</text></g><g><title>[libc.so.6] (9 samples, 0.07%)</title><rect x="97.3227%" y="437" width="0.0694%" height="15" fill="rgb(252,204,47)" fg:x="12614" fg:w="9"/><text x="97.5727%" y="447.50"></text></g><g><title>__libc_calloc (46 samples, 0.35%)</title><rect x="97.3922%" y="437" width="0.3549%" height="15" fill="rgb(208,77,27)" fg:x="12623" fg:w="46"/><text x="97.6422%" y="447.50"></text></g><g><title>[libc.so.6] (25 samples, 0.19%)</title><rect x="97.5542%" y="421" width="0.1929%" height="15" fill="rgb(221,76,26)" fg:x="12644" fg:w="25"/><text x="97.8042%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (62 samples, 0.48%)</title><rect x="97.3227%" y="517" width="0.4784%" height="15" fill="rgb(225,139,18)" fg:x="12614" fg:w="62"/><text x="97.5727%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (62 samples, 0.48%)</title><rect x="97.3227%" y="501" width="0.4784%" height="15" fill="rgb(230,137,11)" fg:x="12614" fg:w="62"/><text x="97.5727%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (62 samples, 0.48%)</title><rect x="97.3227%" y="485" width="0.4784%" height="15" fill="rgb(212,28,1)" fg:x="12614" fg:w="62"/><text x="97.5727%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (62 samples, 0.48%)</title><rect x="97.3227%" y="469" width="0.4784%" height="15" fill="rgb(248,164,17)" fg:x="12614" fg:w="62"/><text x="97.5727%" y="479.50"></text></g><g><title>alloc::alloc::alloc_zeroed (62 samples, 0.48%)</title><rect x="97.3227%" y="453" width="0.4784%" height="15" fill="rgb(222,171,42)" fg:x="12614" fg:w="62"/><text x="97.5727%" y="463.50"></text></g><g><title>__rdl_alloc_zeroed (7 samples, 0.05%)</title><rect x="97.7471%" y="437" width="0.0540%" height="15" fill="rgb(243,84,45)" fg:x="12669" fg:w="7"/><text x="97.9971%" y="447.50"></text></g><g><title>alloc::vec::from_elem (65 samples, 0.50%)</title><rect x="97.3227%" y="549" width="0.5015%" height="15" fill="rgb(252,49,23)" fg:x="12614" fg:w="65"/><text x="97.5727%" y="559.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (65 samples, 0.50%)</title><rect x="97.3227%" y="533" width="0.5015%" height="15" fill="rgb(215,19,7)" fg:x="12614" fg:w="65"/><text x="97.5727%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="97.8088%" y="517" width="0.0154%" height="15" fill="rgb(238,81,41)" fg:x="12677" fg:w="2"/><text x="98.0588%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="97.8088%" y="501" width="0.0154%" height="15" fill="rgb(210,199,37)" fg:x="12677" fg:w="2"/><text x="98.0588%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="97.8088%" y="485" width="0.0154%" height="15" fill="rgb(244,192,49)" fg:x="12677" fg:w="2"/><text x="98.0588%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="97.8088%" y="469" width="0.0154%" height="15" fill="rgb(226,211,11)" fg:x="12677" fg:w="2"/><text x="98.0588%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="97.8088%" y="453" width="0.0154%" height="15" fill="rgb(236,162,54)" fg:x="12677" fg:w="2"/><text x="98.0588%" y="463.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="97.8088%" y="437" width="0.0154%" height="15" fill="rgb(220,229,9)" fg:x="12677" fg:w="2"/><text x="98.0588%" y="447.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="97.8088%" y="421" width="0.0154%" height="15" fill="rgb(250,87,22)" fg:x="12677" fg:w="2"/><text x="98.0588%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.03%)</title><rect x="97.8397%" y="373" width="0.0309%" height="15" fill="rgb(239,43,17)" fg:x="12681" fg:w="4"/><text x="98.0897%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (4 samples, 0.03%)</title><rect x="97.8397%" y="357" width="0.0309%" height="15" fill="rgb(231,177,25)" fg:x="12681" fg:w="4"/><text x="98.0897%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (6 samples, 0.05%)</title><rect x="97.8705%" y="357" width="0.0463%" height="15" fill="rgb(219,179,1)" fg:x="12685" fg:w="6"/><text x="98.1205%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::{{closure}} (6 samples, 0.05%)</title><rect x="97.8705%" y="341" width="0.0463%" height="15" fill="rgb(238,219,53)" fg:x="12685" fg:w="6"/><text x="98.1205%" y="351.50"></text></g><g><title>core::ptr::write (2 samples, 0.02%)</title><rect x="97.9014%" y="325" width="0.0154%" height="15" fill="rgb(232,167,36)" fg:x="12689" fg:w="2"/><text x="98.1514%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (22 samples, 0.17%)</title><rect x="97.8242%" y="453" width="0.1697%" height="15" fill="rgb(244,19,51)" fg:x="12679" fg:w="22"/><text x="98.0742%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (22 samples, 0.17%)</title><rect x="97.8242%" y="437" width="0.1697%" height="15" fill="rgb(224,6,22)" fg:x="12679" fg:w="22"/><text x="98.0742%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (22 samples, 0.17%)</title><rect x="97.8242%" y="421" width="0.1697%" height="15" fill="rgb(224,145,5)" fg:x="12679" fg:w="22"/><text x="98.0742%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (22 samples, 0.17%)</title><rect x="97.8242%" y="405" width="0.1697%" height="15" fill="rgb(234,130,49)" fg:x="12679" fg:w="22"/><text x="98.0742%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (22 samples, 0.17%)</title><rect x="97.8242%" y="389" width="0.1697%" height="15" fill="rgb(254,6,2)" fg:x="12679" fg:w="22"/><text x="98.0742%" y="399.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (16 samples, 0.12%)</title><rect x="97.8705%" y="373" width="0.1234%" height="15" fill="rgb(208,96,46)" fg:x="12685" fg:w="16"/><text x="98.1205%" y="383.50"></text></g><g><title>wfc::wfc::baseline::BaseLine::legal_tiles::{{closure}}::{{closure}} (10 samples, 0.08%)</title><rect x="97.9168%" y="357" width="0.0772%" height="15" fill="rgb(239,3,39)" fg:x="12691" fg:w="10"/><text x="98.1668%" y="367.50"></text></g><g><title>__rdl_alloc (5 samples, 0.04%)</title><rect x="97.9940%" y="341" width="0.0386%" height="15" fill="rgb(233,210,1)" fg:x="12701" fg:w="5"/><text x="98.2440%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="98.0171%" y="325" width="0.0154%" height="15" fill="rgb(244,137,37)" fg:x="12704" fg:w="2"/><text x="98.2671%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (41 samples, 0.32%)</title><rect x="97.8242%" y="517" width="0.3163%" height="15" fill="rgb(240,136,2)" fg:x="12679" fg:w="41"/><text x="98.0742%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (41 samples, 0.32%)</title><rect x="97.8242%" y="501" width="0.3163%" height="15" fill="rgb(239,18,37)" fg:x="12679" fg:w="41"/><text x="98.0742%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (41 samples, 0.32%)</title><rect x="97.8242%" y="485" width="0.3163%" height="15" fill="rgb(218,185,22)" fg:x="12679" fg:w="41"/><text x="98.0742%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (41 samples, 0.32%)</title><rect x="97.8242%" y="469" width="0.3163%" height="15" fill="rgb(225,218,4)" fg:x="12679" fg:w="41"/><text x="98.0742%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (19 samples, 0.15%)</title><rect x="97.9940%" y="453" width="0.1466%" height="15" fill="rgb(230,182,32)" fg:x="12701" fg:w="19"/><text x="98.2440%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (19 samples, 0.15%)</title><rect x="97.9940%" y="437" width="0.1466%" height="15" fill="rgb(242,56,43)" fg:x="12701" fg:w="19"/><text x="98.2440%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (19 samples, 0.15%)</title><rect x="97.9940%" y="421" width="0.1466%" height="15" fill="rgb(233,99,24)" fg:x="12701" fg:w="19"/><text x="98.2440%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (19 samples, 0.15%)</title><rect x="97.9940%" y="405" width="0.1466%" height="15" fill="rgb(234,209,42)" fg:x="12701" fg:w="19"/><text x="98.2440%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (19 samples, 0.15%)</title><rect x="97.9940%" y="389" width="0.1466%" height="15" fill="rgb(227,7,12)" fg:x="12701" fg:w="19"/><text x="98.2440%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (19 samples, 0.15%)</title><rect x="97.9940%" y="373" width="0.1466%" height="15" fill="rgb(245,203,43)" fg:x="12701" fg:w="19"/><text x="98.2440%" y="383.50"></text></g><g><title>alloc::alloc::alloc (19 samples, 0.15%)</title><rect x="97.9940%" y="357" width="0.1466%" height="15" fill="rgb(238,205,33)" fg:x="12701" fg:w="19"/><text x="98.2440%" y="367.50"></text></g><g><title>malloc (13 samples, 0.10%)</title><rect x="98.0403%" y="341" width="0.1003%" height="15" fill="rgb(231,56,7)" fg:x="12707" fg:w="13"/><text x="98.2903%" y="351.50"></text></g><g><title>__rdl_dealloc (4 samples, 0.03%)</title><rect x="98.1483%" y="437" width="0.0309%" height="15" fill="rgb(244,186,29)" fg:x="12721" fg:w="4"/><text x="98.3983%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (4 samples, 0.03%)</title><rect x="98.1483%" y="421" width="0.0309%" height="15" fill="rgb(234,111,31)" fg:x="12721" fg:w="4"/><text x="98.3983%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (68 samples, 0.52%)</title><rect x="97.8242%" y="549" width="0.5247%" height="15" fill="rgb(241,149,10)" fg:x="12679" fg:w="68"/><text x="98.0742%" y="559.50"></text></g><g><title>wfc::wfc::baseline::BaseLine::legal_tiles::{{closure}} (68 samples, 0.52%)</title><rect x="97.8242%" y="533" width="0.5247%" height="15" fill="rgb(249,206,44)" fg:x="12679" fg:w="68"/><text x="98.0742%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bool&gt;&gt; (26 samples, 0.20%)</title><rect x="98.1483%" y="517" width="0.2006%" height="15" fill="rgb(251,153,30)" fg:x="12721" fg:w="26"/><text x="98.3983%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;bool&gt;&gt; (26 samples, 0.20%)</title><rect x="98.1483%" y="501" width="0.2006%" height="15" fill="rgb(239,152,38)" fg:x="12721" fg:w="26"/><text x="98.3983%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.20%)</title><rect x="98.1483%" y="485" width="0.2006%" height="15" fill="rgb(249,139,47)" fg:x="12721" fg:w="26"/><text x="98.3983%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (26 samples, 0.20%)</title><rect x="98.1483%" y="469" width="0.2006%" height="15" fill="rgb(244,64,35)" fg:x="12721" fg:w="26"/><text x="98.3983%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (26 samples, 0.20%)</title><rect x="98.1483%" y="453" width="0.2006%" height="15" fill="rgb(216,46,15)" fg:x="12721" fg:w="26"/><text x="98.3983%" y="463.50"></text></g><g><title>free (22 samples, 0.17%)</title><rect x="98.1792%" y="437" width="0.1697%" height="15" fill="rgb(250,74,19)" fg:x="12725" fg:w="22"/><text x="98.4292%" y="447.50"></text></g><g><title>[libc.so.6] (11 samples, 0.08%)</title><rect x="98.2640%" y="421" width="0.0849%" height="15" fill="rgb(249,42,33)" fg:x="12736" fg:w="11"/><text x="98.5140%" y="431.50"></text></g><g><title>__rdl_dealloc (8 samples, 0.06%)</title><rect x="98.3643%" y="421" width="0.0617%" height="15" fill="rgb(242,149,17)" fg:x="12749" fg:w="8"/><text x="98.6143%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (8 samples, 0.06%)</title><rect x="98.3643%" y="405" width="0.0617%" height="15" fill="rgb(244,29,21)" fg:x="12749" fg:w="8"/><text x="98.6143%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (46 samples, 0.35%)</title><rect x="98.3643%" y="453" width="0.3549%" height="15" fill="rgb(220,130,37)" fg:x="12749" fg:w="46"/><text x="98.6143%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (46 samples, 0.35%)</title><rect x="98.3643%" y="437" width="0.3549%" height="15" fill="rgb(211,67,2)" fg:x="12749" fg:w="46"/><text x="98.6143%" y="447.50"></text></g><g><title>free (38 samples, 0.29%)</title><rect x="98.4260%" y="421" width="0.2932%" height="15" fill="rgb(235,68,52)" fg:x="12757" fg:w="38"/><text x="98.6760%" y="431.50"></text></g><g><title>[libc.so.6] (23 samples, 0.18%)</title><rect x="98.5418%" y="405" width="0.1775%" height="15" fill="rgb(246,142,3)" fg:x="12772" fg:w="23"/><text x="98.7918%" y="415.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="98.6961%" y="389" width="0.0231%" height="15" fill="rgb(241,25,7)" fg:x="12792" fg:w="3"/><text x="98.9461%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (52 samples, 0.40%)</title><rect x="98.3566%" y="533" width="0.4012%" height="15" fill="rgb(242,119,39)" fg:x="12748" fg:w="52"/><text x="98.6066%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;bool&gt;]&gt; (52 samples, 0.40%)</title><rect x="98.3566%" y="517" width="0.4012%" height="15" fill="rgb(241,98,45)" fg:x="12748" fg:w="52"/><text x="98.6066%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bool&gt;&gt; (52 samples, 0.40%)</title><rect x="98.3566%" y="501" width="0.4012%" height="15" fill="rgb(254,28,30)" fg:x="12748" fg:w="52"/><text x="98.6066%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;bool&gt;&gt; (52 samples, 0.40%)</title><rect x="98.3566%" y="485" width="0.4012%" height="15" fill="rgb(241,142,54)" fg:x="12748" fg:w="52"/><text x="98.6066%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (52 samples, 0.40%)</title><rect x="98.3566%" y="469" width="0.4012%" height="15" fill="rgb(222,85,15)" fg:x="12748" fg:w="52"/><text x="98.6066%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (5 samples, 0.04%)</title><rect x="98.7192%" y="453" width="0.0386%" height="15" fill="rgb(210,85,47)" fg:x="12795" fg:w="5"/><text x="98.9692%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;bool&gt;&gt;&gt; (57 samples, 0.44%)</title><rect x="98.3566%" y="549" width="0.4398%" height="15" fill="rgb(224,206,25)" fg:x="12748" fg:w="57"/><text x="98.6066%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;bool&gt;&gt;&gt; (5 samples, 0.04%)</title><rect x="98.7578%" y="533" width="0.0386%" height="15" fill="rgb(243,201,19)" fg:x="12800" fg:w="5"/><text x="99.0078%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.04%)</title><rect x="98.7578%" y="517" width="0.0386%" height="15" fill="rgb(236,59,4)" fg:x="12800" fg:w="5"/><text x="99.0078%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.04%)</title><rect x="98.7578%" y="501" width="0.0386%" height="15" fill="rgb(254,179,45)" fg:x="12800" fg:w="5"/><text x="99.0078%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.04%)</title><rect x="98.7578%" y="485" width="0.0386%" height="15" fill="rgb(226,14,10)" fg:x="12800" fg:w="5"/><text x="99.0078%" y="495.50"></text></g><g><title>free (5 samples, 0.04%)</title><rect x="98.7578%" y="469" width="0.0386%" height="15" fill="rgb(244,27,41)" fg:x="12800" fg:w="5"/><text x="99.0078%" y="479.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="98.7732%" y="453" width="0.0231%" height="15" fill="rgb(235,35,32)" fg:x="12802" fg:w="3"/><text x="99.0232%" y="463.50"></text></g><g><title>__rdl_dealloc (4 samples, 0.03%)</title><rect x="98.7964%" y="469" width="0.0309%" height="15" fill="rgb(218,68,31)" fg:x="12805" fg:w="4"/><text x="99.0464%" y="479.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (4 samples, 0.03%)</title><rect x="98.7964%" y="453" width="0.0309%" height="15" fill="rgb(207,120,37)" fg:x="12805" fg:w="4"/><text x="99.0464%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bool&gt;&gt; (29 samples, 0.22%)</title><rect x="98.7964%" y="549" width="0.2237%" height="15" fill="rgb(227,98,0)" fg:x="12805" fg:w="29"/><text x="99.0464%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;bool&gt;&gt; (29 samples, 0.22%)</title><rect x="98.7964%" y="533" width="0.2237%" height="15" fill="rgb(207,7,3)" fg:x="12805" fg:w="29"/><text x="99.0464%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.22%)</title><rect x="98.7964%" y="517" width="0.2237%" height="15" fill="rgb(206,98,19)" fg:x="12805" fg:w="29"/><text x="99.0464%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (29 samples, 0.22%)</title><rect x="98.7964%" y="501" width="0.2237%" height="15" fill="rgb(217,5,26)" fg:x="12805" fg:w="29"/><text x="99.0464%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (29 samples, 0.22%)</title><rect x="98.7964%" y="485" width="0.2237%" height="15" fill="rgb(235,190,38)" fg:x="12805" fg:w="29"/><text x="99.0464%" y="495.50"></text></g><g><title>free (25 samples, 0.19%)</title><rect x="98.8273%" y="469" width="0.1929%" height="15" fill="rgb(247,86,24)" fg:x="12809" fg:w="25"/><text x="99.0773%" y="479.50"></text></g><g><title>[libc.so.6] (6 samples, 0.05%)</title><rect x="98.9738%" y="453" width="0.0463%" height="15" fill="rgb(205,101,16)" fg:x="12828" fg:w="6"/><text x="99.2238%" y="463.50"></text></g><g><title>__rdl_alloc (11 samples, 0.08%)</title><rect x="99.1127%" y="373" width="0.0849%" height="15" fill="rgb(246,168,33)" fg:x="12846" fg:w="11"/><text x="99.3627%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (5 samples, 0.04%)</title><rect x="99.1590%" y="357" width="0.0386%" height="15" fill="rgb(231,114,1)" fg:x="12852" fg:w="5"/><text x="99.4090%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (38 samples, 0.29%)</title><rect x="99.0819%" y="469" width="0.2932%" height="15" fill="rgb(207,184,53)" fg:x="12842" fg:w="38"/><text x="99.3319%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (38 samples, 0.29%)</title><rect x="99.0819%" y="453" width="0.2932%" height="15" fill="rgb(224,95,51)" fg:x="12842" fg:w="38"/><text x="99.3319%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (38 samples, 0.29%)</title><rect x="99.0819%" y="437" width="0.2932%" height="15" fill="rgb(212,188,45)" fg:x="12842" fg:w="38"/><text x="99.3319%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (36 samples, 0.28%)</title><rect x="99.0973%" y="421" width="0.2778%" height="15" fill="rgb(223,154,38)" fg:x="12844" fg:w="36"/><text x="99.3473%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (36 samples, 0.28%)</title><rect x="99.0973%" y="405" width="0.2778%" height="15" fill="rgb(251,22,52)" fg:x="12844" fg:w="36"/><text x="99.3473%" y="415.50"></text></g><g><title>alloc::alloc::alloc (36 samples, 0.28%)</title><rect x="99.0973%" y="389" width="0.2778%" height="15" fill="rgb(229,209,22)" fg:x="12844" fg:w="36"/><text x="99.3473%" y="399.50"></text></g><g><title>malloc (21 samples, 0.16%)</title><rect x="99.2130%" y="373" width="0.1620%" height="15" fill="rgb(234,138,34)" fg:x="12859" fg:w="21"/><text x="99.4630%" y="383.50"></text></g><g><title>wfc::wfc::baseline::BaseLine::legal_tiles (12,768 samples, 98.51%)</title><rect x="1.1727%" y="565" width="98.5109%" height="15" fill="rgb(212,95,11)" fg:x="152" fg:w="12768"/><text x="1.4227%" y="575.50">wfc::wfc::baseline::BaseLine::legal_tiles</text></g><g><title>wfc::wfc::vec3d::Vec3D&lt;T&gt;::get (85 samples, 0.66%)</title><rect x="99.0279%" y="549" width="0.6558%" height="15" fill="rgb(240,179,47)" fg:x="12835" fg:w="85"/><text x="99.2779%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (85 samples, 0.66%)</title><rect x="99.0279%" y="533" width="0.6558%" height="15" fill="rgb(240,163,11)" fg:x="12835" fg:w="85"/><text x="99.2779%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (78 samples, 0.60%)</title><rect x="99.0819%" y="517" width="0.6018%" height="15" fill="rgb(236,37,12)" fg:x="12842" fg:w="78"/><text x="99.3319%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (78 samples, 0.60%)</title><rect x="99.0819%" y="501" width="0.6018%" height="15" fill="rgb(232,164,16)" fg:x="12842" fg:w="78"/><text x="99.3319%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (78 samples, 0.60%)</title><rect x="99.0819%" y="485" width="0.6018%" height="15" fill="rgb(244,205,15)" fg:x="12842" fg:w="78"/><text x="99.3319%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (40 samples, 0.31%)</title><rect x="99.3750%" y="469" width="0.3086%" height="15" fill="rgb(223,117,47)" fg:x="12880" fg:w="40"/><text x="99.6250%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (40 samples, 0.31%)</title><rect x="99.3750%" y="453" width="0.3086%" height="15" fill="rgb(244,107,35)" fg:x="12880" fg:w="40"/><text x="99.6250%" y="463.50"></text></g><g><title>[libc.so.6] (40 samples, 0.31%)</title><rect x="99.3750%" y="437" width="0.3086%" height="15" fill="rgb(205,140,8)" fg:x="12880" fg:w="40"/><text x="99.6250%" y="447.50"></text></g><g><title>__rdl_alloc (5 samples, 0.04%)</title><rect x="99.7145%" y="389" width="0.0386%" height="15" fill="rgb(228,84,46)" fg:x="12924" fg:w="5"/><text x="99.9645%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="99.7377%" y="373" width="0.0154%" height="15" fill="rgb(254,188,9)" fg:x="12927" fg:w="2"/><text x="99.9877%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (14 samples, 0.11%)</title><rect x="99.7145%" y="485" width="0.1080%" height="15" fill="rgb(206,112,54)" fg:x="12924" fg:w="14"/><text x="99.9645%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (14 samples, 0.11%)</title><rect x="99.7145%" y="469" width="0.1080%" height="15" fill="rgb(216,84,49)" fg:x="12924" fg:w="14"/><text x="99.9645%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (14 samples, 0.11%)</title><rect x="99.7145%" y="453" width="0.1080%" height="15" fill="rgb(214,194,35)" fg:x="12924" fg:w="14"/><text x="99.9645%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.11%)</title><rect x="99.7145%" y="437" width="0.1080%" height="15" fill="rgb(249,28,3)" fg:x="12924" fg:w="14"/><text x="99.9645%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.11%)</title><rect x="99.7145%" y="421" width="0.1080%" height="15" fill="rgb(222,56,52)" fg:x="12924" fg:w="14"/><text x="99.9645%" y="431.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.11%)</title><rect x="99.7145%" y="405" width="0.1080%" height="15" fill="rgb(245,217,50)" fg:x="12924" fg:w="14"/><text x="99.9645%" y="415.50"></text></g><g><title>malloc (9 samples, 0.07%)</title><rect x="99.7531%" y="389" width="0.0694%" height="15" fill="rgb(213,201,24)" fg:x="12929" fg:w="9"/><text x="100.0031%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (28 samples, 0.22%)</title><rect x="99.6837%" y="549" width="0.2160%" height="15" fill="rgb(248,116,28)" fg:x="12920" fg:w="28"/><text x="99.9337%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (24 samples, 0.19%)</title><rect x="99.7145%" y="533" width="0.1852%" height="15" fill="rgb(219,72,43)" fg:x="12924" fg:w="24"/><text x="99.9645%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (24 samples, 0.19%)</title><rect x="99.7145%" y="517" width="0.1852%" height="15" fill="rgb(209,138,14)" fg:x="12924" fg:w="24"/><text x="99.9645%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (24 samples, 0.19%)</title><rect x="99.7145%" y="501" width="0.1852%" height="15" fill="rgb(222,18,33)" fg:x="12924" fg:w="24"/><text x="99.9645%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (10 samples, 0.08%)</title><rect x="99.8225%" y="485" width="0.0772%" height="15" fill="rgb(213,199,7)" fg:x="12938" fg:w="10"/><text x="100.0725%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.08%)</title><rect x="99.8225%" y="469" width="0.0772%" height="15" fill="rgb(250,110,10)" fg:x="12938" fg:w="10"/><text x="100.0725%" y="479.50"></text></g><g><title>[libc.so.6] (10 samples, 0.08%)</title><rect x="99.8225%" y="453" width="0.0772%" height="15" fill="rgb(248,123,6)" fg:x="12938" fg:w="10"/><text x="100.0725%" y="463.50"></text></g><g><title>wfc::wfc::baseline::BaseLine::propagate (12,835 samples, 99.03%)</title><rect x="0.8796%" y="581" width="99.0279%" height="15" fill="rgb(206,91,31)" fg:x="114" fg:w="12835"/><text x="1.1296%" y="591.50">wfc::wfc::baseline::BaseLine::propagate</text></g><g><title>wfc::wfc::vec3d::Vec3D&lt;T&gt;::get (29 samples, 0.22%)</title><rect x="99.6837%" y="565" width="0.2237%" height="15" fill="rgb(211,154,13)" fg:x="12920" fg:w="29"/><text x="99.9337%" y="575.50"></text></g><g><title>&lt;wfc::wfc::baseline::BaseLine as wfc::wfc::traits::WFC&gt;::solve (12,952 samples, 99.93%)</title><rect x="0.0000%" y="597" width="99.9306%" height="15" fill="rgb(225,148,7)" fg:x="0" fg:w="12952"/><text x="0.2500%" y="607.50">&lt;wfc::wfc::baseline::BaseLine as wfc::wfc::traits::WFC&gt;::solve</text></g><g><title>wfc::wfc::utils::get_random (3 samples, 0.02%)</title><rect x="99.9074%" y="581" width="0.0231%" height="15" fill="rgb(220,160,43)" fg:x="12949" fg:w="3"/><text x="100.1574%" y="591.50"></text></g><g><title>rand::rngs::thread::thread_rng (2 samples, 0.02%)</title><rect x="99.9151%" y="565" width="0.0154%" height="15" fill="rgb(213,52,39)" fg:x="12950" fg:w="2"/><text x="100.1651%" y="575.50"></text></g><g><title>__x64_sys_write (2 samples, 0.02%)</title><rect x="99.9306%" y="325" width="0.0154%" height="15" fill="rgb(243,137,7)" fg:x="12952" fg:w="2"/><text x="100.1806%" y="335.50"></text></g><g><title>ksys_write (2 samples, 0.02%)</title><rect x="99.9306%" y="309" width="0.0154%" height="15" fill="rgb(230,79,13)" fg:x="12952" fg:w="2"/><text x="100.1806%" y="319.50"></text></g><g><title>vfs_write (2 samples, 0.02%)</title><rect x="99.9306%" y="293" width="0.0154%" height="15" fill="rgb(247,105,23)" fg:x="12952" fg:w="2"/><text x="100.1806%" y="303.50"></text></g><g><title>new_sync_write (2 samples, 0.02%)</title><rect x="99.9306%" y="277" width="0.0154%" height="15" fill="rgb(223,179,41)" fg:x="12952" fg:w="2"/><text x="100.1806%" y="287.50"></text></g><g><title>tty_write (2 samples, 0.02%)</title><rect x="99.9306%" y="261" width="0.0154%" height="15" fill="rgb(218,9,34)" fg:x="12952" fg:w="2"/><text x="100.1806%" y="271.50"></text></g><g><title>file_tty_write.constprop.0 (2 samples, 0.02%)</title><rect x="99.9306%" y="245" width="0.0154%" height="15" fill="rgb(222,106,8)" fg:x="12952" fg:w="2"/><text x="100.1806%" y="255.50"></text></g><g><title>do_tty_write (2 samples, 0.02%)</title><rect x="99.9306%" y="229" width="0.0154%" height="15" fill="rgb(211,220,0)" fg:x="12952" fg:w="2"/><text x="100.1806%" y="239.50"></text></g><g><title>n_tty_write (2 samples, 0.02%)</title><rect x="99.9306%" y="213" width="0.0154%" height="15" fill="rgb(229,52,16)" fg:x="12952" fg:w="2"/><text x="100.1806%" y="223.50"></text></g><g><title>std::io::stdio::_print (4 samples, 0.03%)</title><rect x="99.9306%" y="597" width="0.0309%" height="15" fill="rgb(212,155,18)" fg:x="12952" fg:w="4"/><text x="100.1806%" y="607.50"></text></g><g><title>std::io::stdio::print_to (4 samples, 0.03%)</title><rect x="99.9306%" y="581" width="0.0309%" height="15" fill="rgb(242,21,14)" fg:x="12952" fg:w="4"/><text x="100.1806%" y="591.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (4 samples, 0.03%)</title><rect x="99.9306%" y="565" width="0.0309%" height="15" fill="rgb(222,19,48)" fg:x="12952" fg:w="4"/><text x="100.1806%" y="575.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (4 samples, 0.03%)</title><rect x="99.9306%" y="549" width="0.0309%" height="15" fill="rgb(232,45,27)" fg:x="12952" fg:w="4"/><text x="100.1806%" y="559.50"></text></g><g><title>std::io::Write::write_fmt (4 samples, 0.03%)</title><rect x="99.9306%" y="533" width="0.0309%" height="15" fill="rgb(249,103,42)" fg:x="12952" fg:w="4"/><text x="100.1806%" y="543.50"></text></g><g><title>core::fmt::write (4 samples, 0.03%)</title><rect x="99.9306%" y="517" width="0.0309%" height="15" fill="rgb(246,81,33)" fg:x="12952" fg:w="4"/><text x="100.1806%" y="527.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (4 samples, 0.03%)</title><rect x="99.9306%" y="501" width="0.0309%" height="15" fill="rgb(252,33,42)" fg:x="12952" fg:w="4"/><text x="100.1806%" y="511.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (4 samples, 0.03%)</title><rect x="99.9306%" y="485" width="0.0309%" height="15" fill="rgb(209,212,41)" fg:x="12952" fg:w="4"/><text x="100.1806%" y="495.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (4 samples, 0.03%)</title><rect x="99.9306%" y="469" width="0.0309%" height="15" fill="rgb(207,154,6)" fg:x="12952" fg:w="4"/><text x="100.1806%" y="479.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (4 samples, 0.03%)</title><rect x="99.9306%" y="453" width="0.0309%" height="15" fill="rgb(223,64,47)" fg:x="12952" fg:w="4"/><text x="100.1806%" y="463.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (4 samples, 0.03%)</title><rect x="99.9306%" y="437" width="0.0309%" height="15" fill="rgb(211,161,38)" fg:x="12952" fg:w="4"/><text x="100.1806%" y="447.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (4 samples, 0.03%)</title><rect x="99.9306%" y="421" width="0.0309%" height="15" fill="rgb(219,138,40)" fg:x="12952" fg:w="4"/><text x="100.1806%" y="431.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (4 samples, 0.03%)</title><rect x="99.9306%" y="405" width="0.0309%" height="15" fill="rgb(241,228,46)" fg:x="12952" fg:w="4"/><text x="100.1806%" y="415.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (4 samples, 0.03%)</title><rect x="99.9306%" y="389" width="0.0309%" height="15" fill="rgb(223,209,38)" fg:x="12952" fg:w="4"/><text x="100.1806%" y="399.50"></text></g><g><title>write (4 samples, 0.03%)</title><rect x="99.9306%" y="373" width="0.0309%" height="15" fill="rgb(236,164,45)" fg:x="12952" fg:w="4"/><text x="100.1806%" y="383.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (4 samples, 0.03%)</title><rect x="99.9306%" y="357" width="0.0309%" height="15" fill="rgb(231,15,5)" fg:x="12952" fg:w="4"/><text x="100.1806%" y="367.50"></text></g><g><title>do_syscall_64 (4 samples, 0.03%)</title><rect x="99.9306%" y="341" width="0.0309%" height="15" fill="rgb(252,35,15)" fg:x="12952" fg:w="4"/><text x="100.1806%" y="351.50"></text></g><g><title>syscall_exit_to_user_mode (2 samples, 0.02%)</title><rect x="99.9460%" y="325" width="0.0154%" height="15" fill="rgb(248,181,18)" fg:x="12954" fg:w="2"/><text x="100.1960%" y="335.50"></text></g><g><title>exit_to_user_mode_prepare (2 samples, 0.02%)</title><rect x="99.9460%" y="309" width="0.0154%" height="15" fill="rgb(233,39,42)" fg:x="12954" fg:w="2"/><text x="100.1960%" y="319.50"></text></g><g><title>exit_to_user_mode_loop (2 samples, 0.02%)</title><rect x="99.9460%" y="293" width="0.0154%" height="15" fill="rgb(238,110,33)" fg:x="12954" fg:w="2"/><text x="100.1960%" y="303.50"></text></g><g><title>schedule (2 samples, 0.02%)</title><rect x="99.9460%" y="277" width="0.0154%" height="15" fill="rgb(233,195,10)" fg:x="12954" fg:w="2"/><text x="100.1960%" y="287.50"></text></g><g><title>__schedule (2 samples, 0.02%)</title><rect x="99.9460%" y="261" width="0.0154%" height="15" fill="rgb(254,105,3)" fg:x="12954" fg:w="2"/><text x="100.1960%" y="271.50"></text></g><g><title>finish_task_switch.isra.0 (2 samples, 0.02%)</title><rect x="99.9460%" y="245" width="0.0154%" height="15" fill="rgb(221,225,9)" fg:x="12954" fg:w="2"/><text x="100.1960%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (2 samples, 0.02%)</title><rect x="99.9614%" y="165" width="0.0154%" height="15" fill="rgb(224,227,45)" fg:x="12956" fg:w="2"/><text x="100.2114%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.02%)</title><rect x="99.9614%" y="149" width="0.0154%" height="15" fill="rgb(229,198,43)" fg:x="12956" fg:w="2"/><text x="100.2114%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (2 samples, 0.02%)</title><rect x="99.9614%" y="133" width="0.0154%" height="15" fill="rgb(206,209,35)" fg:x="12956" fg:w="2"/><text x="100.2114%" y="143.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.02%)</title><rect x="99.9614%" y="117" width="0.0154%" height="15" fill="rgb(245,195,53)" fg:x="12956" fg:w="2"/><text x="100.2114%" y="127.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (4 samples, 0.03%)</title><rect x="99.9614%" y="229" width="0.0309%" height="15" fill="rgb(240,92,26)" fg:x="12956" fg:w="4"/><text x="100.2114%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (4 samples, 0.03%)</title><rect x="99.9614%" y="213" width="0.0309%" height="15" fill="rgb(207,40,23)" fg:x="12956" fg:w="4"/><text x="100.2114%" y="223.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (4 samples, 0.03%)</title><rect x="99.9614%" y="197" width="0.0309%" height="15" fill="rgb(223,111,35)" fg:x="12956" fg:w="4"/><text x="100.2114%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.03%)</title><rect x="99.9614%" y="181" width="0.0309%" height="15" fill="rgb(229,147,28)" fg:x="12956" fg:w="4"/><text x="100.2114%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.02%)</title><rect x="99.9769%" y="165" width="0.0154%" height="15" fill="rgb(211,29,28)" fg:x="12958" fg:w="2"/><text x="100.2269%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (2 samples, 0.02%)</title><rect x="99.9769%" y="149" width="0.0154%" height="15" fill="rgb(228,72,33)" fg:x="12958" fg:w="2"/><text x="100.2269%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.02%)</title><rect x="99.9769%" y="133" width="0.0154%" height="15" fill="rgb(205,214,31)" fg:x="12958" fg:w="2"/><text x="100.2269%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (2 samples, 0.02%)</title><rect x="99.9769%" y="117" width="0.0154%" height="15" fill="rgb(224,111,15)" fg:x="12958" fg:w="2"/><text x="100.2269%" y="127.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (2 samples, 0.02%)</title><rect x="99.9769%" y="101" width="0.0154%" height="15" fill="rgb(253,21,26)" fg:x="12958" fg:w="2"/><text x="100.2269%" y="111.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (2 samples, 0.02%)</title><rect x="99.9769%" y="85" width="0.0154%" height="15" fill="rgb(245,139,43)" fg:x="12958" fg:w="2"/><text x="100.2269%" y="95.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (2 samples, 0.02%)</title><rect x="99.9769%" y="69" width="0.0154%" height="15" fill="rgb(252,170,7)" fg:x="12958" fg:w="2"/><text x="100.2269%" y="79.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.02%)</title><rect x="99.9769%" y="53" width="0.0154%" height="15" fill="rgb(231,118,14)" fg:x="12958" fg:w="2"/><text x="100.2269%" y="63.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.02%)</title><rect x="99.9769%" y="37" width="0.0154%" height="15" fill="rgb(238,83,0)" fg:x="12958" fg:w="2"/><text x="100.2269%" y="47.50"></text></g><g><title>all (12,961 samples, 100%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(221,39,39)" fg:x="0" fg:w="12961"/><text x="0.2500%" y="911.50"></text></g><g><title>baseline (12,961 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(222,119,46)" fg:x="0" fg:w="12961"/><text x="0.2500%" y="895.50">baseline</text></g><g><title>_start (12,961 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(222,165,49)" fg:x="0" fg:w="12961"/><text x="0.2500%" y="879.50">_start</text></g><g><title>__libc_start_main (12,961 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(219,113,52)" fg:x="0" fg:w="12961"/><text x="0.2500%" y="863.50">__libc_start_main</text></g><g><title>[libc.so.6] (12,961 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(214,7,15)" fg:x="0" fg:w="12961"/><text x="0.2500%" y="847.50">[libc.so.6]</text></g><g><title>main (12,961 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(235,32,4)" fg:x="0" fg:w="12961"/><text x="0.2500%" y="831.50">main</text></g><g><title>std::rt::lang_start_internal (12,961 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(238,90,54)" fg:x="0" fg:w="12961"/><text x="0.2500%" y="815.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (12,961 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(213,208,19)" fg:x="0" fg:w="12961"/><text x="0.2500%" y="799.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (12,961 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(233,156,4)" fg:x="0" fg:w="12961"/><text x="0.2500%" y="783.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (12,961 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(207,194,5)" fg:x="0" fg:w="12961"/><text x="0.2500%" y="767.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (12,961 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(206,111,30)" fg:x="0" fg:w="12961"/><text x="0.2500%" y="751.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (12,961 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(243,70,54)" fg:x="0" fg:w="12961"/><text x="0.2500%" y="735.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (12,961 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(242,28,8)" fg:x="0" fg:w="12961"/><text x="0.2500%" y="719.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (12,961 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(219,106,18)" fg:x="0" fg:w="12961"/><text x="0.2500%" y="703.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (12,961 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(244,222,10)" fg:x="0" fg:w="12961"/><text x="0.2500%" y="687.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (12,961 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(236,179,52)" fg:x="0" fg:w="12961"/><text x="0.2500%" y="671.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (12,961 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(213,23,39)" fg:x="0" fg:w="12961"/><text x="0.2500%" y="655.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (12,961 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(238,48,10)" fg:x="0" fg:w="12961"/><text x="0.2500%" y="639.50">core::ops::function::FnOnce::call_once</text></g><g><title>baseline::main (12,961 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(251,196,23)" fg:x="0" fg:w="12961"/><text x="0.2500%" y="623.50">baseline::main</text></g><g><title>wfc::wfc::rules::get_pipes_rules (5 samples, 0.04%)</title><rect x="99.9614%" y="597" width="0.0386%" height="15" fill="rgb(250,152,24)" fg:x="12956" fg:w="5"/><text x="100.2114%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (5 samples, 0.04%)</title><rect x="99.9614%" y="581" width="0.0386%" height="15" fill="rgb(209,150,17)" fg:x="12956" fg:w="5"/><text x="100.2114%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (5 samples, 0.04%)</title><rect x="99.9614%" y="565" width="0.0386%" height="15" fill="rgb(234,202,34)" fg:x="12956" fg:w="5"/><text x="100.2114%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.04%)</title><rect x="99.9614%" y="549" width="0.0386%" height="15" fill="rgb(253,148,53)" fg:x="12956" fg:w="5"/><text x="100.2114%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (5 samples, 0.04%)</title><rect x="99.9614%" y="533" width="0.0386%" height="15" fill="rgb(218,129,16)" fg:x="12956" fg:w="5"/><text x="100.2114%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (5 samples, 0.04%)</title><rect x="99.9614%" y="517" width="0.0386%" height="15" fill="rgb(216,85,19)" fg:x="12956" fg:w="5"/><text x="100.2114%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (5 samples, 0.04%)</title><rect x="99.9614%" y="501" width="0.0386%" height="15" fill="rgb(235,228,7)" fg:x="12956" fg:w="5"/><text x="100.2114%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (5 samples, 0.04%)</title><rect x="99.9614%" y="485" width="0.0386%" height="15" fill="rgb(245,175,0)" fg:x="12956" fg:w="5"/><text x="100.2114%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.04%)</title><rect x="99.9614%" y="469" width="0.0386%" height="15" fill="rgb(208,168,36)" fg:x="12956" fg:w="5"/><text x="100.2114%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (5 samples, 0.04%)</title><rect x="99.9614%" y="453" width="0.0386%" height="15" fill="rgb(246,171,24)" fg:x="12956" fg:w="5"/><text x="100.2114%" y="463.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (5 samples, 0.04%)</title><rect x="99.9614%" y="437" width="0.0386%" height="15" fill="rgb(215,142,24)" fg:x="12956" fg:w="5"/><text x="100.2114%" y="447.50"></text></g><g><title>wfc::wfc::rules::get_pipes_rules::{{closure}} (5 samples, 0.04%)</title><rect x="99.9614%" y="421" width="0.0386%" height="15" fill="rgb(250,187,7)" fg:x="12956" fg:w="5"/><text x="100.2114%" y="431.50"></text></g><g><title>wfc::wfc::rules::get_pipe_rules (5 samples, 0.04%)</title><rect x="99.9614%" y="405" width="0.0386%" height="15" fill="rgb(228,66,33)" fg:x="12956" fg:w="5"/><text x="100.2114%" y="415.50"></text></g><g><title>wfc::wfc::rules::get_pipe_dir_rules (5 samples, 0.04%)</title><rect x="99.9614%" y="389" width="0.0386%" height="15" fill="rgb(234,215,21)" fg:x="12956" fg:w="5"/><text x="100.2114%" y="399.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (5 samples, 0.04%)</title><rect x="99.9614%" y="373" width="0.0386%" height="15" fill="rgb(222,191,20)" fg:x="12956" fg:w="5"/><text x="100.2114%" y="383.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (5 samples, 0.04%)</title><rect x="99.9614%" y="357" width="0.0386%" height="15" fill="rgb(245,79,54)" fg:x="12956" fg:w="5"/><text x="100.2114%" y="367.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (5 samples, 0.04%)</title><rect x="99.9614%" y="341" width="0.0386%" height="15" fill="rgb(240,10,37)" fg:x="12956" fg:w="5"/><text x="100.2114%" y="351.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (5 samples, 0.04%)</title><rect x="99.9614%" y="325" width="0.0386%" height="15" fill="rgb(214,192,32)" fg:x="12956" fg:w="5"/><text x="100.2114%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (5 samples, 0.04%)</title><rect x="99.9614%" y="309" width="0.0386%" height="15" fill="rgb(209,36,54)" fg:x="12956" fg:w="5"/><text x="100.2114%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.04%)</title><rect x="99.9614%" y="293" width="0.0386%" height="15" fill="rgb(220,10,11)" fg:x="12956" fg:w="5"/><text x="100.2114%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.04%)</title><rect x="99.9614%" y="277" width="0.0386%" height="15" fill="rgb(221,106,17)" fg:x="12956" fg:w="5"/><text x="100.2114%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (5 samples, 0.04%)</title><rect x="99.9614%" y="261" width="0.0386%" height="15" fill="rgb(251,142,44)" fg:x="12956" fg:w="5"/><text x="100.2114%" y="271.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::{{closure}} (5 samples, 0.04%)</title><rect x="99.9614%" y="245" width="0.0386%" height="15" fill="rgb(238,13,15)" fg:x="12956" fg:w="5"/><text x="100.2114%" y="255.50"></text></g></svg></svg>