<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="902" onload="init(evt)" viewBox="0 0 1200 902" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#ffffff" offset="5%"/><stop stop-color="#ffffff" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="902" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="885.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="885.00"> </text><svg id="frames" x="10" width="1180" total_samples="4345"><g><title>wfc::wfc::rules::get_pipes_rules (1 samples, 0.02%)</title><rect x="0.0000%" y="549" width="0.0230%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.02%)</title><rect x="0.0000%" y="533" width="0.0230%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="0.0000%" y="517" width="0.0230%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="0.0000%" y="501" width="0.0230%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="0.0000%" y="485" width="0.0230%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="0.0000%" y="469" width="0.0230%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.02%)</title><rect x="0.0000%" y="453" width="0.0230%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.02%)</title><rect x="0.0000%" y="437" width="0.0230%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="0.0000%" y="421" width="0.0230%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.02%)</title><rect x="0.0000%" y="405" width="0.0230%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.02%)</title><rect x="0.0000%" y="389" width="0.0230%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50"></text></g><g><title>wfc::wfc::rules::get_pipes_rules::{{closure}} (1 samples, 0.02%)</title><rect x="0.0000%" y="373" width="0.0230%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="383.50"></text></g><g><title>wfc::wfc::rules::get_pipe_rules (1 samples, 0.02%)</title><rect x="0.0000%" y="357" width="0.0230%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>wfc::wfc::rules::get_pipe_dir_rules (1 samples, 0.02%)</title><rect x="0.0000%" y="341" width="0.0230%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="0.0000%" y="325" width="0.0230%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.02%)</title><rect x="0.0000%" y="309" width="0.0230%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.02%)</title><rect x="0.0000%" y="293" width="0.0230%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.02%)</title><rect x="0.0000%" y="277" width="0.0230%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.02%)</title><rect x="0.0000%" y="261" width="0.0230%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="0.0000%" y="245" width="0.0230%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="1"/><text x="0.2500%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="0.0000%" y="229" width="0.0230%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.02%)</title><rect x="0.0000%" y="213" width="0.0230%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="223.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::{{closure}} (1 samples, 0.02%)</title><rect x="0.0000%" y="197" width="0.0230%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="207.50"></text></g><g><title>wfc::wfc::rules::get_pipe_dir_rules::{{closure}} (1 samples, 0.02%)</title><rect x="0.0000%" y="181" width="0.0230%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="191.50"></text></g><g><title>wfc::wfc::rules::is_pipe_with_direction (1 samples, 0.02%)</title><rect x="0.0000%" y="165" width="0.0230%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="1"/><text x="0.2500%" y="175.50"></text></g><g><title>wfc::wfc::rules::is_pipe (1 samples, 0.02%)</title><rect x="0.0000%" y="149" width="0.0230%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="1"/><text x="0.2500%" y="159.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (1 samples, 0.02%)</title><rect x="0.0230%" y="453" width="0.0230%" height="15" fill="rgb(225,111,53)" fg:x="1" fg:w="1"/><text x="0.2730%" y="463.50"></text></g><g><title>&lt;u8 as core::fmt::num::DisplayInt&gt;::to_u64 (1 samples, 0.02%)</title><rect x="0.0230%" y="437" width="0.0230%" height="15" fill="rgb(238,160,17)" fg:x="1" fg:w="1"/><text x="0.2730%" y="447.50"></text></g><g><title>asm_common_interrupt (3 samples, 0.07%)</title><rect x="0.0460%" y="181" width="0.0690%" height="15" fill="rgb(214,148,48)" fg:x="2" fg:w="3"/><text x="0.2960%" y="191.50"></text></g><g><title>common_interrupt (3 samples, 0.07%)</title><rect x="0.0460%" y="165" width="0.0690%" height="15" fill="rgb(232,36,49)" fg:x="2" fg:w="3"/><text x="0.2960%" y="175.50"></text></g><g><title>irq_exit_rcu (3 samples, 0.07%)</title><rect x="0.0460%" y="149" width="0.0690%" height="15" fill="rgb(209,103,24)" fg:x="2" fg:w="3"/><text x="0.2960%" y="159.50"></text></g><g><title>__softirqentry_text_start (3 samples, 0.07%)</title><rect x="0.0460%" y="133" width="0.0690%" height="15" fill="rgb(229,88,8)" fg:x="2" fg:w="3"/><text x="0.2960%" y="143.50"></text></g><g><title>schedule (26 samples, 0.60%)</title><rect x="0.0460%" y="229" width="0.5984%" height="15" fill="rgb(213,181,19)" fg:x="2" fg:w="26"/><text x="0.2960%" y="239.50"></text></g><g><title>__schedule (26 samples, 0.60%)</title><rect x="0.0460%" y="213" width="0.5984%" height="15" fill="rgb(254,191,54)" fg:x="2" fg:w="26"/><text x="0.2960%" y="223.50"></text></g><g><title>finish_task_switch.isra.0 (26 samples, 0.60%)</title><rect x="0.0460%" y="197" width="0.5984%" height="15" fill="rgb(241,83,37)" fg:x="2" fg:w="26"/><text x="0.2960%" y="207.50"></text></g><g><title>syscall_exit_to_user_mode (27 samples, 0.62%)</title><rect x="0.0460%" y="277" width="0.6214%" height="15" fill="rgb(233,36,39)" fg:x="2" fg:w="27"/><text x="0.2960%" y="287.50"></text></g><g><title>exit_to_user_mode_prepare (27 samples, 0.62%)</title><rect x="0.0460%" y="261" width="0.6214%" height="15" fill="rgb(226,3,54)" fg:x="2" fg:w="27"/><text x="0.2960%" y="271.50"></text></g><g><title>exit_to_user_mode_loop (27 samples, 0.62%)</title><rect x="0.0460%" y="245" width="0.6214%" height="15" fill="rgb(245,192,40)" fg:x="2" fg:w="27"/><text x="0.2960%" y="255.50"></text></g><g><title>__rseq_handle_notify_resume (1 samples, 0.02%)</title><rect x="0.6444%" y="229" width="0.0230%" height="15" fill="rgb(238,167,29)" fg:x="28" fg:w="1"/><text x="0.8944%" y="239.50"></text></g><g><title>rseq_ip_fixup (1 samples, 0.02%)</title><rect x="0.6444%" y="213" width="0.0230%" height="15" fill="rgb(232,182,51)" fg:x="28" fg:w="1"/><text x="0.8944%" y="223.50"></text></g><g><title>__get_user_8 (1 samples, 0.02%)</title><rect x="0.6444%" y="197" width="0.0230%" height="15" fill="rgb(231,60,39)" fg:x="28" fg:w="1"/><text x="0.8944%" y="207.50"></text></g><g><title>rw_verify_area (1 samples, 0.02%)</title><rect x="0.6674%" y="229" width="0.0230%" height="15" fill="rgb(208,69,12)" fg:x="29" fg:w="1"/><text x="0.9174%" y="239.50"></text></g><g><title>security_file_permission (1 samples, 0.02%)</title><rect x="0.6674%" y="213" width="0.0230%" height="15" fill="rgb(235,93,37)" fg:x="29" fg:w="1"/><text x="0.9174%" y="223.50"></text></g><g><title>apparmor_file_permission (1 samples, 0.02%)</title><rect x="0.6674%" y="197" width="0.0230%" height="15" fill="rgb(213,116,39)" fg:x="29" fg:w="1"/><text x="0.9174%" y="207.50"></text></g><g><title>n_tty_write (1 samples, 0.02%)</title><rect x="0.6904%" y="181" width="0.0230%" height="15" fill="rgb(222,207,29)" fg:x="30" fg:w="1"/><text x="0.9404%" y="191.50"></text></g><g><title>up_read (1 samples, 0.02%)</title><rect x="0.7135%" y="165" width="0.0230%" height="15" fill="rgb(206,96,30)" fg:x="31" fg:w="1"/><text x="0.9635%" y="175.50"></text></g><g><title>tty_write_room (1 samples, 0.02%)</title><rect x="0.7365%" y="133" width="0.0230%" height="15" fill="rgb(218,138,4)" fg:x="32" fg:w="1"/><text x="0.9865%" y="143.50"></text></g><g><title>tty_buffer_space_avail (1 samples, 0.02%)</title><rect x="0.7365%" y="117" width="0.0230%" height="15" fill="rgb(250,191,14)" fg:x="32" fg:w="1"/><text x="0.9865%" y="127.50"></text></g><g><title>pty_write (3 samples, 0.07%)</title><rect x="0.7595%" y="133" width="0.0690%" height="15" fill="rgb(239,60,40)" fg:x="33" fg:w="3"/><text x="1.0095%" y="143.50"></text></g><g><title>tty_insert_flip_string_and_push_buffer (3 samples, 0.07%)</title><rect x="0.7595%" y="117" width="0.0690%" height="15" fill="rgb(206,27,48)" fg:x="33" fg:w="3"/><text x="1.0095%" y="127.50"></text></g><g><title>queue_work_on (3 samples, 0.07%)</title><rect x="0.7595%" y="101" width="0.0690%" height="15" fill="rgb(225,35,8)" fg:x="33" fg:w="3"/><text x="1.0095%" y="111.50"></text></g><g><title>mutex_lock (1 samples, 0.02%)</title><rect x="0.8285%" y="133" width="0.0230%" height="15" fill="rgb(250,213,24)" fg:x="36" fg:w="1"/><text x="1.0785%" y="143.50"></text></g><g><title>__cond_resched (1 samples, 0.02%)</title><rect x="0.8285%" y="117" width="0.0230%" height="15" fill="rgb(247,123,22)" fg:x="36" fg:w="1"/><text x="1.0785%" y="127.50"></text></g><g><title>process_output_block (6 samples, 0.14%)</title><rect x="0.7365%" y="149" width="0.1381%" height="15" fill="rgb(231,138,38)" fg:x="32" fg:w="6"/><text x="0.9865%" y="159.50"></text></g><g><title>asm_common_interrupt (8 samples, 0.18%)</title><rect x="0.8746%" y="85" width="0.1841%" height="15" fill="rgb(231,145,46)" fg:x="38" fg:w="8"/><text x="1.1246%" y="95.50"></text></g><g><title>common_interrupt (8 samples, 0.18%)</title><rect x="0.8746%" y="69" width="0.1841%" height="15" fill="rgb(251,118,11)" fg:x="38" fg:w="8"/><text x="1.1246%" y="79.50"></text></g><g><title>irq_exit_rcu (8 samples, 0.18%)</title><rect x="0.8746%" y="53" width="0.1841%" height="15" fill="rgb(217,147,25)" fg:x="38" fg:w="8"/><text x="1.1246%" y="63.50"></text></g><g><title>__softirqentry_text_start (8 samples, 0.18%)</title><rect x="0.8746%" y="37" width="0.1841%" height="15" fill="rgb(247,81,37)" fg:x="38" fg:w="8"/><text x="1.1246%" y="47.50"></text></g><g><title>mutex_lock (31 samples, 0.71%)</title><rect x="0.8746%" y="149" width="0.7135%" height="15" fill="rgb(209,12,38)" fg:x="38" fg:w="31"/><text x="1.1246%" y="159.50"></text></g><g><title>__cond_resched (31 samples, 0.71%)</title><rect x="0.8746%" y="133" width="0.7135%" height="15" fill="rgb(227,1,9)" fg:x="38" fg:w="31"/><text x="1.1246%" y="143.50"></text></g><g><title>__schedule (31 samples, 0.71%)</title><rect x="0.8746%" y="117" width="0.7135%" height="15" fill="rgb(248,47,43)" fg:x="38" fg:w="31"/><text x="1.1246%" y="127.50"></text></g><g><title>finish_task_switch.isra.0 (31 samples, 0.71%)</title><rect x="0.8746%" y="101" width="0.7135%" height="15" fill="rgb(221,10,30)" fg:x="38" fg:w="31"/><text x="1.1246%" y="111.50"></text></g><g><title>n_tty_write (38 samples, 0.87%)</title><rect x="0.7365%" y="165" width="0.8746%" height="15" fill="rgb(210,229,1)" fg:x="32" fg:w="38"/><text x="0.9865%" y="175.50"></text></g><g><title>do_output_char (1 samples, 0.02%)</title><rect x="1.5880%" y="149" width="0.0230%" height="15" fill="rgb(222,148,37)" fg:x="69" fg:w="1"/><text x="1.8380%" y="159.50"></text></g><g><title>pty_write (1 samples, 0.02%)</title><rect x="1.5880%" y="133" width="0.0230%" height="15" fill="rgb(234,67,33)" fg:x="69" fg:w="1"/><text x="1.8380%" y="143.50"></text></g><g><title>tty_insert_flip_string_and_push_buffer (1 samples, 0.02%)</title><rect x="1.5880%" y="117" width="0.0230%" height="15" fill="rgb(247,98,35)" fg:x="69" fg:w="1"/><text x="1.8380%" y="127.50"></text></g><g><title>queue_work_on (1 samples, 0.02%)</title><rect x="1.5880%" y="101" width="0.0230%" height="15" fill="rgb(247,138,52)" fg:x="69" fg:w="1"/><text x="1.8380%" y="111.50"></text></g><g><title>do_tty_write (41 samples, 0.94%)</title><rect x="0.7135%" y="181" width="0.9436%" height="15" fill="rgb(213,79,30)" fg:x="31" fg:w="41"/><text x="0.9635%" y="191.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (71 samples, 1.63%)</title><rect x="0.0460%" y="309" width="1.6341%" height="15" fill="rgb(246,177,23)" fg:x="2" fg:w="71"/><text x="0.2960%" y="319.50"></text></g><g><title>do_syscall_64 (71 samples, 1.63%)</title><rect x="0.0460%" y="293" width="1.6341%" height="15" fill="rgb(230,62,27)" fg:x="2" fg:w="71"/><text x="0.2960%" y="303.50"></text></g><g><title>__x64_sys_write (44 samples, 1.01%)</title><rect x="0.6674%" y="277" width="1.0127%" height="15" fill="rgb(216,154,8)" fg:x="29" fg:w="44"/><text x="0.9174%" y="287.50"></text></g><g><title>ksys_write (44 samples, 1.01%)</title><rect x="0.6674%" y="261" width="1.0127%" height="15" fill="rgb(244,35,45)" fg:x="29" fg:w="44"/><text x="0.9174%" y="271.50"></text></g><g><title>vfs_write (44 samples, 1.01%)</title><rect x="0.6674%" y="245" width="1.0127%" height="15" fill="rgb(251,115,12)" fg:x="29" fg:w="44"/><text x="0.9174%" y="255.50"></text></g><g><title>new_sync_write (43 samples, 0.99%)</title><rect x="0.6904%" y="229" width="0.9896%" height="15" fill="rgb(240,54,50)" fg:x="30" fg:w="43"/><text x="0.9404%" y="239.50"></text></g><g><title>tty_write (43 samples, 0.99%)</title><rect x="0.6904%" y="213" width="0.9896%" height="15" fill="rgb(233,84,52)" fg:x="30" fg:w="43"/><text x="0.9404%" y="223.50"></text></g><g><title>file_tty_write.constprop.0 (43 samples, 0.99%)</title><rect x="0.6904%" y="197" width="0.9896%" height="15" fill="rgb(207,117,47)" fg:x="30" fg:w="43"/><text x="0.9404%" y="207.50"></text></g><g><title>std::io::stdio::_print (73 samples, 1.68%)</title><rect x="0.0230%" y="549" width="1.6801%" height="15" fill="rgb(249,43,39)" fg:x="1" fg:w="73"/><text x="0.2730%" y="559.50"></text></g><g><title>std::io::stdio::print_to (73 samples, 1.68%)</title><rect x="0.0230%" y="533" width="1.6801%" height="15" fill="rgb(209,38,44)" fg:x="1" fg:w="73"/><text x="0.2730%" y="543.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (73 samples, 1.68%)</title><rect x="0.0230%" y="517" width="1.6801%" height="15" fill="rgb(236,212,23)" fg:x="1" fg:w="73"/><text x="0.2730%" y="527.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (73 samples, 1.68%)</title><rect x="0.0230%" y="501" width="1.6801%" height="15" fill="rgb(242,79,21)" fg:x="1" fg:w="73"/><text x="0.2730%" y="511.50"></text></g><g><title>std::io::Write::write_fmt (73 samples, 1.68%)</title><rect x="0.0230%" y="485" width="1.6801%" height="15" fill="rgb(211,96,35)" fg:x="1" fg:w="73"/><text x="0.2730%" y="495.50"></text></g><g><title>core::fmt::write (73 samples, 1.68%)</title><rect x="0.0230%" y="469" width="1.6801%" height="15" fill="rgb(253,215,40)" fg:x="1" fg:w="73"/><text x="0.2730%" y="479.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (72 samples, 1.66%)</title><rect x="0.0460%" y="453" width="1.6571%" height="15" fill="rgb(211,81,21)" fg:x="2" fg:w="72"/><text x="0.2960%" y="463.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (72 samples, 1.66%)</title><rect x="0.0460%" y="437" width="1.6571%" height="15" fill="rgb(208,190,38)" fg:x="2" fg:w="72"/><text x="0.2960%" y="447.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (72 samples, 1.66%)</title><rect x="0.0460%" y="421" width="1.6571%" height="15" fill="rgb(235,213,38)" fg:x="2" fg:w="72"/><text x="0.2960%" y="431.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (72 samples, 1.66%)</title><rect x="0.0460%" y="405" width="1.6571%" height="15" fill="rgb(237,122,38)" fg:x="2" fg:w="72"/><text x="0.2960%" y="415.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (72 samples, 1.66%)</title><rect x="0.0460%" y="389" width="1.6571%" height="15" fill="rgb(244,218,35)" fg:x="2" fg:w="72"/><text x="0.2960%" y="399.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (72 samples, 1.66%)</title><rect x="0.0460%" y="373" width="1.6571%" height="15" fill="rgb(240,68,47)" fg:x="2" fg:w="72"/><text x="0.2960%" y="383.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (72 samples, 1.66%)</title><rect x="0.0460%" y="357" width="1.6571%" height="15" fill="rgb(210,16,53)" fg:x="2" fg:w="72"/><text x="0.2960%" y="367.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (72 samples, 1.66%)</title><rect x="0.0460%" y="341" width="1.6571%" height="15" fill="rgb(235,124,12)" fg:x="2" fg:w="72"/><text x="0.2960%" y="351.50"></text></g><g><title>write (72 samples, 1.66%)</title><rect x="0.0460%" y="325" width="1.6571%" height="15" fill="rgb(224,169,11)" fg:x="2" fg:w="72"/><text x="0.2960%" y="335.50"></text></g><g><title>wfc::wfc::vec3d::Vec3D&lt;T&gt;::get (1 samples, 0.02%)</title><rect x="1.7031%" y="533" width="0.0230%" height="15" fill="rgb(250,166,2)" fg:x="74" fg:w="1"/><text x="1.9531%" y="543.50"></text></g><g><title>rand::rngs::thread::thread_rng (1 samples, 0.02%)</title><rect x="1.7261%" y="517" width="0.0230%" height="15" fill="rgb(242,216,29)" fg:x="75" fg:w="1"/><text x="1.9761%" y="527.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="1.7261%" y="501" width="0.0230%" height="15" fill="rgb(230,116,27)" fg:x="75" fg:w="1"/><text x="1.9761%" y="511.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.02%)</title><rect x="1.7261%" y="485" width="0.0230%" height="15" fill="rgb(228,99,48)" fg:x="75" fg:w="1"/><text x="1.9761%" y="495.50"></text></g><g><title>rand::rngs::thread::THREAD_RNG_KEY::__getit (1 samples, 0.02%)</title><rect x="1.7261%" y="469" width="0.0230%" height="15" fill="rgb(253,11,6)" fg:x="75" fg:w="1"/><text x="1.9761%" y="479.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (1 samples, 0.02%)</title><rect x="1.7261%" y="453" width="0.0230%" height="15" fill="rgb(247,143,39)" fg:x="75" fg:w="1"/><text x="1.9761%" y="463.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::try_initialize (1 samples, 0.02%)</title><rect x="1.7261%" y="437" width="0.0230%" height="15" fill="rgb(236,97,10)" fg:x="75" fg:w="1"/><text x="1.9761%" y="447.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::initialize (1 samples, 0.02%)</title><rect x="1.7261%" y="421" width="0.0230%" height="15" fill="rgb(233,208,19)" fg:x="75" fg:w="1"/><text x="1.9761%" y="431.50"></text></g><g><title>rand::rngs::thread::THREAD_RNG_KEY::__getit::{{closure}} (1 samples, 0.02%)</title><rect x="1.7261%" y="405" width="0.0230%" height="15" fill="rgb(216,164,2)" fg:x="75" fg:w="1"/><text x="1.9761%" y="415.50"></text></g><g><title>rand::rngs::thread::THREAD_RNG_KEY::__init (1 samples, 0.02%)</title><rect x="1.7261%" y="389" width="0.0230%" height="15" fill="rgb(220,129,5)" fg:x="75" fg:w="1"/><text x="1.9761%" y="399.50"></text></g><g><title>rand_core::SeedableRng::from_rng (1 samples, 0.02%)</title><rect x="1.7261%" y="373" width="0.0230%" height="15" fill="rgb(242,17,10)" fg:x="75" fg:w="1"/><text x="1.9761%" y="383.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::SeedableRng&gt;::from_seed (1 samples, 0.02%)</title><rect x="1.7261%" y="357" width="0.0230%" height="15" fill="rgb(242,107,0)" fg:x="75" fg:w="1"/><text x="1.9761%" y="367.50"></text></g><g><title>rand_chacha::guts::ChaCha::new (1 samples, 0.02%)</title><rect x="1.7261%" y="341" width="0.0230%" height="15" fill="rgb(251,28,31)" fg:x="75" fg:w="1"/><text x="1.9761%" y="351.50"></text></g><g><title>rand_chacha::guts::init_chacha (1 samples, 0.02%)</title><rect x="1.7261%" y="325" width="0.0230%" height="15" fill="rgb(233,223,10)" fg:x="75" fg:w="1"/><text x="1.9761%" y="335.50"></text></g><g><title>std_detect::detect::arch::x86::__is_feature_detected::avx (1 samples, 0.02%)</title><rect x="1.7261%" y="309" width="0.0230%" height="15" fill="rgb(215,21,27)" fg:x="75" fg:w="1"/><text x="1.9761%" y="319.50"></text></g><g><title>std_detect::detect::check_for (1 samples, 0.02%)</title><rect x="1.7261%" y="293" width="0.0230%" height="15" fill="rgb(232,23,21)" fg:x="75" fg:w="1"/><text x="1.9761%" y="303.50"></text></g><g><title>std_detect::detect::cache::test (1 samples, 0.02%)</title><rect x="1.7261%" y="277" width="0.0230%" height="15" fill="rgb(244,5,23)" fg:x="75" fg:w="1"/><text x="1.9761%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (1 samples, 0.02%)</title><rect x="1.7261%" y="261" width="0.0230%" height="15" fill="rgb(226,81,46)" fg:x="75" fg:w="1"/><text x="1.9761%" y="271.50"></text></g><g><title>std_detect::detect::cache::test::{{closure}} (1 samples, 0.02%)</title><rect x="1.7261%" y="245" width="0.0230%" height="15" fill="rgb(247,70,30)" fg:x="75" fg:w="1"/><text x="1.9761%" y="255.50"></text></g><g><title>std_detect::detect::cache::detect_and_initialize (1 samples, 0.02%)</title><rect x="1.7261%" y="229" width="0.0230%" height="15" fill="rgb(212,68,19)" fg:x="75" fg:w="1"/><text x="1.9761%" y="239.50"></text></g><g><title>std_detect::detect::os::detect_features (1 samples, 0.02%)</title><rect x="1.7261%" y="213" width="0.0230%" height="15" fill="rgb(240,187,13)" fg:x="75" fg:w="1"/><text x="1.9761%" y="223.50"></text></g><g><title>core::core_arch::x86::cpuid::__cpuid (1 samples, 0.02%)</title><rect x="1.7261%" y="197" width="0.0230%" height="15" fill="rgb(223,113,26)" fg:x="75" fg:w="1"/><text x="1.9761%" y="207.50"></text></g><g><title>core::core_arch::x86::cpuid::__cpuid_count (1 samples, 0.02%)</title><rect x="1.7261%" y="181" width="0.0230%" height="15" fill="rgb(206,192,2)" fg:x="75" fg:w="1"/><text x="1.9761%" y="191.50"></text></g><g><title>rand::rng::Rng::gen_range (1 samples, 0.02%)</title><rect x="1.7491%" y="517" width="0.0230%" height="15" fill="rgb(241,108,4)" fg:x="76" fg:w="1"/><text x="1.9991%" y="527.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (1 samples, 0.02%)</title><rect x="1.7491%" y="501" width="0.0230%" height="15" fill="rgb(247,173,49)" fg:x="76" fg:w="1"/><text x="1.9991%" y="511.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (1 samples, 0.02%)</title><rect x="1.7491%" y="485" width="0.0230%" height="15" fill="rgb(224,114,35)" fg:x="76" fg:w="1"/><text x="1.9991%" y="495.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (1 samples, 0.02%)</title><rect x="1.7491%" y="469" width="0.0230%" height="15" fill="rgb(245,159,27)" fg:x="76" fg:w="1"/><text x="1.9991%" y="479.50"></text></g><g><title>rand::rng::Rng::gen (1 samples, 0.02%)</title><rect x="1.7491%" y="453" width="0.0230%" height="15" fill="rgb(245,172,44)" fg:x="76" fg:w="1"/><text x="1.9991%" y="463.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;usize&gt; for rand::distributions::Standard&gt;::sample (1 samples, 0.02%)</title><rect x="1.7491%" y="437" width="0.0230%" height="15" fill="rgb(236,23,11)" fg:x="76" fg:w="1"/><text x="1.9991%" y="447.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (1 samples, 0.02%)</title><rect x="1.7491%" y="421" width="0.0230%" height="15" fill="rgb(205,117,38)" fg:x="76" fg:w="1"/><text x="1.9991%" y="431.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (1 samples, 0.02%)</title><rect x="1.7491%" y="405" width="0.0230%" height="15" fill="rgb(237,72,25)" fg:x="76" fg:w="1"/><text x="1.9991%" y="415.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (1 samples, 0.02%)</title><rect x="1.7491%" y="389" width="0.0230%" height="15" fill="rgb(244,70,9)" fg:x="76" fg:w="1"/><text x="1.9991%" y="399.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (1 samples, 0.02%)</title><rect x="1.7491%" y="373" width="0.0230%" height="15" fill="rgb(217,125,39)" fg:x="76" fg:w="1"/><text x="1.9991%" y="383.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (1 samples, 0.02%)</title><rect x="1.7491%" y="357" width="0.0230%" height="15" fill="rgb(235,36,10)" fg:x="76" fg:w="1"/><text x="1.9991%" y="367.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (1 samples, 0.02%)</title><rect x="1.7491%" y="341" width="0.0230%" height="15" fill="rgb(251,123,47)" fg:x="76" fg:w="1"/><text x="1.9991%" y="351.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (1 samples, 0.02%)</title><rect x="1.7491%" y="325" width="0.0230%" height="15" fill="rgb(221,13,13)" fg:x="76" fg:w="1"/><text x="1.9991%" y="335.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (1 samples, 0.02%)</title><rect x="1.7491%" y="309" width="0.0230%" height="15" fill="rgb(238,131,9)" fg:x="76" fg:w="1"/><text x="1.9991%" y="319.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (1 samples, 0.02%)</title><rect x="1.7491%" y="293" width="0.0230%" height="15" fill="rgb(211,50,8)" fg:x="76" fg:w="1"/><text x="1.9991%" y="303.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (1 samples, 0.02%)</title><rect x="1.7491%" y="277" width="0.0230%" height="15" fill="rgb(245,182,24)" fg:x="76" fg:w="1"/><text x="1.9991%" y="287.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::u32x4_sse2&lt;S3,S4,NI&gt; as core::ops::arith::Add&gt;::add (1 samples, 0.02%)</title><rect x="1.7491%" y="261" width="0.0230%" height="15" fill="rgb(242,14,37)" fg:x="76" fg:w="1"/><text x="1.9991%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_add_epi32 (1 samples, 0.02%)</title><rect x="1.7491%" y="245" width="0.0230%" height="15" fill="rgb(246,228,12)" fg:x="76" fg:w="1"/><text x="1.9991%" y="255.50"></text></g><g><title>wfc::wfc::utils::get_random (3 samples, 0.07%)</title><rect x="1.7261%" y="533" width="0.0690%" height="15" fill="rgb(213,55,15)" fg:x="75" fg:w="3"/><text x="1.9761%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="1.7722%" y="517" width="0.0230%" height="15" fill="rgb(209,9,3)" fg:x="77" fg:w="1"/><text x="2.0222%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="1.7722%" y="501" width="0.0230%" height="15" fill="rgb(230,59,30)" fg:x="77" fg:w="1"/><text x="2.0222%" y="511.50"></text></g><g><title>wfc::wfc::vec3d::Vec3D&lt;T&gt;::get (1 samples, 0.02%)</title><rect x="1.7952%" y="517" width="0.0230%" height="15" fill="rgb(209,121,21)" fg:x="78" fg:w="1"/><text x="2.0452%" y="527.50"></text></g><g><title>asm_common_interrupt (1 samples, 0.02%)</title><rect x="1.8182%" y="485" width="0.0230%" height="15" fill="rgb(220,109,13)" fg:x="79" fg:w="1"/><text x="2.0682%" y="495.50"></text></g><g><title>common_interrupt (1 samples, 0.02%)</title><rect x="1.8182%" y="469" width="0.0230%" height="15" fill="rgb(232,18,1)" fg:x="79" fg:w="1"/><text x="2.0682%" y="479.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.02%)</title><rect x="1.8182%" y="453" width="0.0230%" height="15" fill="rgb(215,41,42)" fg:x="79" fg:w="1"/><text x="2.0682%" y="463.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="1.8182%" y="437" width="0.0230%" height="15" fill="rgb(224,123,36)" fg:x="79" fg:w="1"/><text x="2.0682%" y="447.50"></text></g><g><title>net_rx_action (1 samples, 0.02%)</title><rect x="1.8182%" y="421" width="0.0230%" height="15" fill="rgb(240,125,3)" fg:x="79" fg:w="1"/><text x="2.0682%" y="431.50"></text></g><g><title>__napi_poll (1 samples, 0.02%)</title><rect x="1.8182%" y="405" width="0.0230%" height="15" fill="rgb(205,98,50)" fg:x="79" fg:w="1"/><text x="2.0682%" y="415.50"></text></g><g><title>e1000_clean (1 samples, 0.02%)</title><rect x="1.8182%" y="389" width="0.0230%" height="15" fill="rgb(205,185,37)" fg:x="79" fg:w="1"/><text x="2.0682%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.02%)</title><rect x="1.8412%" y="485" width="0.0230%" height="15" fill="rgb(238,207,15)" fg:x="80" fg:w="1"/><text x="2.0912%" y="495.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.02%)</title><rect x="1.8412%" y="469" width="0.0230%" height="15" fill="rgb(213,199,42)" fg:x="80" fg:w="1"/><text x="2.0912%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="1.8412%" y="453" width="0.0230%" height="15" fill="rgb(235,201,11)" fg:x="80" fg:w="1"/><text x="2.0912%" y="463.50"></text></g><g><title>wfc::wfc::vec3d::Vec3D&lt;T&gt;::get (22 samples, 0.51%)</title><rect x="1.8182%" y="501" width="0.5063%" height="15" fill="rgb(207,46,11)" fg:x="79" fg:w="22"/><text x="2.0682%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.02%)</title><rect x="2.3245%" y="437" width="0.0230%" height="15" fill="rgb(241,35,35)" fg:x="101" fg:w="1"/><text x="2.5745%" y="447.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="2.3475%" y="373" width="0.0230%" height="15" fill="rgb(243,32,47)" fg:x="102" fg:w="1"/><text x="2.5975%" y="383.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="2.3475%" y="357" width="0.0230%" height="15" fill="rgb(247,202,23)" fg:x="102" fg:w="1"/><text x="2.5975%" y="367.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.02%)</title><rect x="2.3475%" y="341" width="0.0230%" height="15" fill="rgb(219,102,11)" fg:x="102" fg:w="1"/><text x="2.5975%" y="351.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="2.3475%" y="325" width="0.0230%" height="15" fill="rgb(243,110,44)" fg:x="102" fg:w="1"/><text x="2.5975%" y="335.50"></text></g><g><title>run_timer_softirq (1 samples, 0.02%)</title><rect x="2.3475%" y="309" width="0.0230%" height="15" fill="rgb(222,74,54)" fg:x="102" fg:w="1"/><text x="2.5975%" y="319.50"></text></g><g><title>__run_timers.part.0 (1 samples, 0.02%)</title><rect x="2.3475%" y="293" width="0.0230%" height="15" fill="rgb(216,99,12)" fg:x="102" fg:w="1"/><text x="2.5975%" y="303.50"></text></g><g><title>call_timer_fn (1 samples, 0.02%)</title><rect x="2.3475%" y="277" width="0.0230%" height="15" fill="rgb(226,22,26)" fg:x="102" fg:w="1"/><text x="2.5975%" y="287.50"></text></g><g><title>vbg_heartbeat_timer (1 samples, 0.02%)</title><rect x="2.3475%" y="261" width="0.0230%" height="15" fill="rgb(217,163,10)" fg:x="102" fg:w="1"/><text x="2.5975%" y="271.50"></text></g><g><title>vbg_req_perform (1 samples, 0.02%)</title><rect x="2.3475%" y="245" width="0.0230%" height="15" fill="rgb(213,25,53)" fg:x="102" fg:w="1"/><text x="2.5975%" y="255.50"></text></g><g><title>[libc.so.6] (12 samples, 0.28%)</title><rect x="2.3475%" y="389" width="0.2762%" height="15" fill="rgb(252,105,26)" fg:x="102" fg:w="12"/><text x="2.5975%" y="399.50"></text></g><g><title>free (25 samples, 0.58%)</title><rect x="2.3475%" y="405" width="0.5754%" height="15" fill="rgb(220,39,43)" fg:x="102" fg:w="25"/><text x="2.5975%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (27 samples, 0.62%)</title><rect x="2.3475%" y="437" width="0.6214%" height="15" fill="rgb(229,68,48)" fg:x="102" fg:w="27"/><text x="2.5975%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (27 samples, 0.62%)</title><rect x="2.3475%" y="421" width="0.6214%" height="15" fill="rgb(252,8,32)" fg:x="102" fg:w="27"/><text x="2.5975%" y="431.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.05%)</title><rect x="2.9229%" y="405" width="0.0460%" height="15" fill="rgb(223,20,43)" fg:x="127" fg:w="2"/><text x="3.1729%" y="415.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.05%)</title><rect x="2.9229%" y="389" width="0.0460%" height="15" fill="rgb(229,81,49)" fg:x="127" fg:w="2"/><text x="3.1729%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;wfc::wfc::bits256_set::Bits256Set&gt;&gt; (29 samples, 0.67%)</title><rect x="2.3245%" y="485" width="0.6674%" height="15" fill="rgb(236,28,36)" fg:x="101" fg:w="29"/><text x="2.5745%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;wfc::wfc::bits256_set::Bits256Set&gt;&gt; (29 samples, 0.67%)</title><rect x="2.3245%" y="469" width="0.6674%" height="15" fill="rgb(249,185,26)" fg:x="101" fg:w="29"/><text x="2.5745%" y="479.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.67%)</title><rect x="2.3245%" y="453" width="0.6674%" height="15" fill="rgb(249,174,33)" fg:x="101" fg:w="29"/><text x="2.5745%" y="463.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::new_sum::{{closure}} (76 samples, 1.75%)</title><rect x="2.9919%" y="469" width="1.7491%" height="15" fill="rgb(233,201,37)" fg:x="130" fg:w="76"/><text x="3.2419%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (78 samples, 1.80%)</title><rect x="2.9919%" y="485" width="1.7952%" height="15" fill="rgb(221,78,26)" fg:x="130" fg:w="78"/><text x="3.2419%" y="495.50">c..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="4.7411%" y="469" width="0.0460%" height="15" fill="rgb(250,127,30)" fg:x="206" fg:w="2"/><text x="4.9911%" y="479.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::new_sum (112 samples, 2.58%)</title><rect x="2.3245%" y="501" width="2.5777%" height="15" fill="rgb(230,49,44)" fg:x="101" fg:w="112"/><text x="2.5745%" y="511.50">wf..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;wfc::wfc::bits256_set::Bits256Set&gt;&gt; (6 samples, 0.14%)</title><rect x="4.9022%" y="485" width="0.1381%" height="15" fill="rgb(229,67,23)" fg:x="213" fg:w="6"/><text x="5.1522%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;wfc::wfc::bits256_set::Bits256Set&gt;&gt; (6 samples, 0.14%)</title><rect x="4.9022%" y="469" width="0.1381%" height="15" fill="rgb(249,83,47)" fg:x="213" fg:w="6"/><text x="5.1522%" y="479.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.14%)</title><rect x="4.9022%" y="453" width="0.1381%" height="15" fill="rgb(215,43,3)" fg:x="213" fg:w="6"/><text x="5.1522%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.14%)</title><rect x="4.9022%" y="437" width="0.1381%" height="15" fill="rgb(238,154,13)" fg:x="213" fg:w="6"/><text x="5.1522%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.14%)</title><rect x="4.9022%" y="421" width="0.1381%" height="15" fill="rgb(219,56,2)" fg:x="213" fg:w="6"/><text x="5.1522%" y="431.50"></text></g><g><title>free (6 samples, 0.14%)</title><rect x="4.9022%" y="405" width="0.1381%" height="15" fill="rgb(233,0,4)" fg:x="213" fg:w="6"/><text x="5.1522%" y="415.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::new_intersection (7 samples, 0.16%)</title><rect x="4.9022%" y="501" width="0.1611%" height="15" fill="rgb(235,30,7)" fg:x="213" fg:w="7"/><text x="5.1522%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.02%)</title><rect x="5.0403%" y="485" width="0.0230%" height="15" fill="rgb(250,79,13)" fg:x="219" fg:w="1"/><text x="5.2903%" y="495.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::new_intersection::{{closure}} (1 samples, 0.02%)</title><rect x="5.0403%" y="469" width="0.0230%" height="15" fill="rgb(211,146,34)" fg:x="219" fg:w="1"/><text x="5.2903%" y="479.50"></text></g><g><title>malloc (15 samples, 0.35%)</title><rect x="5.0633%" y="309" width="0.3452%" height="15" fill="rgb(228,22,38)" fg:x="220" fg:w="15"/><text x="5.3133%" y="319.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="5.4085%" y="309" width="0.0230%" height="15" fill="rgb(235,168,5)" fg:x="235" fg:w="1"/><text x="5.6585%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.05%)</title><rect x="5.4315%" y="293" width="0.0460%" height="15" fill="rgb(221,155,16)" fg:x="236" fg:w="2"/><text x="5.6815%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (21 samples, 0.48%)</title><rect x="5.0633%" y="357" width="0.4833%" height="15" fill="rgb(215,215,53)" fg:x="220" fg:w="21"/><text x="5.3133%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (21 samples, 0.48%)</title><rect x="5.0633%" y="341" width="0.4833%" height="15" fill="rgb(223,4,10)" fg:x="220" fg:w="21"/><text x="5.3133%" y="351.50"></text></g><g><title>alloc::alloc::alloc (21 samples, 0.48%)</title><rect x="5.0633%" y="325" width="0.4833%" height="15" fill="rgb(234,103,6)" fg:x="220" fg:w="21"/><text x="5.3133%" y="335.50"></text></g><g><title>__rdl_alloc (5 samples, 0.12%)</title><rect x="5.4315%" y="309" width="0.1151%" height="15" fill="rgb(227,97,0)" fg:x="236" fg:w="5"/><text x="5.6815%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (23 samples, 0.53%)</title><rect x="5.0633%" y="421" width="0.5293%" height="15" fill="rgb(234,150,53)" fg:x="220" fg:w="23"/><text x="5.3133%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (23 samples, 0.53%)</title><rect x="5.0633%" y="405" width="0.5293%" height="15" fill="rgb(228,201,54)" fg:x="220" fg:w="23"/><text x="5.3133%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (23 samples, 0.53%)</title><rect x="5.0633%" y="389" width="0.5293%" height="15" fill="rgb(222,22,37)" fg:x="220" fg:w="23"/><text x="5.3133%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (23 samples, 0.53%)</title><rect x="5.0633%" y="373" width="0.5293%" height="15" fill="rgb(237,53,32)" fg:x="220" fg:w="23"/><text x="5.3133%" y="383.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (2 samples, 0.05%)</title><rect x="5.5926%" y="293" width="0.0460%" height="15" fill="rgb(233,25,53)" fg:x="243" fg:w="2"/><text x="5.8426%" y="303.50"></text></g><g><title>sysvec_apic_timer_interrupt (2 samples, 0.05%)</title><rect x="5.5926%" y="277" width="0.0460%" height="15" fill="rgb(210,40,34)" fg:x="243" fg:w="2"/><text x="5.8426%" y="287.50"></text></g><g><title>irq_exit_rcu (2 samples, 0.05%)</title><rect x="5.5926%" y="261" width="0.0460%" height="15" fill="rgb(241,220,44)" fg:x="243" fg:w="2"/><text x="5.8426%" y="271.50"></text></g><g><title>__softirqentry_text_start (2 samples, 0.05%)</title><rect x="5.5926%" y="245" width="0.0460%" height="15" fill="rgb(235,28,35)" fg:x="243" fg:w="2"/><text x="5.8426%" y="255.50"></text></g><g><title>run_timer_softirq (2 samples, 0.05%)</title><rect x="5.5926%" y="229" width="0.0460%" height="15" fill="rgb(210,56,17)" fg:x="243" fg:w="2"/><text x="5.8426%" y="239.50"></text></g><g><title>__run_timers.part.0 (2 samples, 0.05%)</title><rect x="5.5926%" y="213" width="0.0460%" height="15" fill="rgb(224,130,29)" fg:x="243" fg:w="2"/><text x="5.8426%" y="223.50"></text></g><g><title>call_timer_fn (2 samples, 0.05%)</title><rect x="5.5926%" y="197" width="0.0460%" height="15" fill="rgb(235,212,8)" fg:x="243" fg:w="2"/><text x="5.8426%" y="207.50"></text></g><g><title>vbg_heartbeat_timer (2 samples, 0.05%)</title><rect x="5.5926%" y="181" width="0.0460%" height="15" fill="rgb(223,33,50)" fg:x="243" fg:w="2"/><text x="5.8426%" y="191.50"></text></g><g><title>vbg_req_perform (2 samples, 0.05%)</title><rect x="5.5926%" y="165" width="0.0460%" height="15" fill="rgb(219,149,13)" fg:x="243" fg:w="2"/><text x="5.8426%" y="175.50"></text></g><g><title>core::num::&lt;impl u128&gt;::pow (177 samples, 4.07%)</title><rect x="5.5926%" y="309" width="4.0736%" height="15" fill="rgb(250,156,29)" fg:x="243" fg:w="177"/><text x="5.8426%" y="319.50">core..</text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (192 samples, 4.42%)</title><rect x="5.5926%" y="373" width="4.4189%" height="15" fill="rgb(216,193,19)" fg:x="243" fg:w="192"/><text x="5.8426%" y="383.50">core:..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (192 samples, 4.42%)</title><rect x="5.5926%" y="357" width="4.4189%" height="15" fill="rgb(216,135,14)" fg:x="243" fg:w="192"/><text x="5.8426%" y="367.50">core:..</text></g><g><title>wfc::wfc::bits256_set::Bits256Set::items::{{closure}} (192 samples, 4.42%)</title><rect x="5.5926%" y="341" width="4.4189%" height="15" fill="rgb(241,47,5)" fg:x="243" fg:w="192"/><text x="5.8426%" y="351.50">wfc::..</text></g><g><title>wfc::wfc::bits256_set::Bits256Set::contains (192 samples, 4.42%)</title><rect x="5.5926%" y="325" width="4.4189%" height="15" fill="rgb(233,42,35)" fg:x="243" fg:w="192"/><text x="5.8426%" y="335.50">wfc::..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::lt (10 samples, 0.23%)</title><rect x="10.0115%" y="341" width="0.2301%" height="15" fill="rgb(231,13,6)" fg:x="435" fg:w="10"/><text x="10.2615%" y="351.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (13 samples, 0.30%)</title><rect x="10.0115%" y="373" width="0.2992%" height="15" fill="rgb(207,181,40)" fg:x="435" fg:w="13"/><text x="10.2615%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (13 samples, 0.30%)</title><rect x="10.0115%" y="357" width="0.2992%" height="15" fill="rgb(254,173,49)" fg:x="435" fg:w="13"/><text x="10.2615%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (226 samples, 5.20%)</title><rect x="5.5926%" y="421" width="5.2014%" height="15" fill="rgb(221,1,38)" fg:x="243" fg:w="226"/><text x="5.8426%" y="431.50">&lt;core:..</text></g><g><title>core::iter::traits::iterator::Iterator::find (226 samples, 5.20%)</title><rect x="5.5926%" y="405" width="5.2014%" height="15" fill="rgb(206,124,46)" fg:x="243" fg:w="226"/><text x="5.8426%" y="415.50">core::..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (226 samples, 5.20%)</title><rect x="5.5926%" y="389" width="5.2014%" height="15" fill="rgb(249,21,11)" fg:x="243" fg:w="226"/><text x="5.8426%" y="399.50">core::..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (3 samples, 0.07%)</title><rect x="10.7940%" y="325" width="0.0690%" height="15" fill="rgb(222,201,40)" fg:x="469" fg:w="3"/><text x="11.0440%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (3 samples, 0.07%)</title><rect x="10.7940%" y="309" width="0.0690%" height="15" fill="rgb(235,61,29)" fg:x="469" fg:w="3"/><text x="11.0440%" y="319.50"></text></g><g><title>core::cmp::max (2 samples, 0.05%)</title><rect x="10.8631%" y="325" width="0.0460%" height="15" fill="rgb(219,207,3)" fg:x="472" fg:w="2"/><text x="11.1131%" y="335.50"></text></g><g><title>core::cmp::Ord::max (2 samples, 0.05%)</title><rect x="10.8631%" y="309" width="0.0460%" height="15" fill="rgb(222,56,46)" fg:x="472" fg:w="2"/><text x="11.1131%" y="319.50"></text></g><g><title>core::cmp::max_by (2 samples, 0.05%)</title><rect x="10.8631%" y="293" width="0.0460%" height="15" fill="rgb(239,76,54)" fg:x="472" fg:w="2"/><text x="11.1131%" y="303.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.02%)</title><rect x="10.9091%" y="325" width="0.0230%" height="15" fill="rgb(231,124,27)" fg:x="474" fg:w="1"/><text x="11.1591%" y="335.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.02%)</title><rect x="10.9091%" y="309" width="0.0230%" height="15" fill="rgb(249,195,6)" fg:x="474" fg:w="1"/><text x="11.1591%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.05%)</title><rect x="10.9321%" y="309" width="0.0460%" height="15" fill="rgb(237,174,47)" fg:x="475" fg:w="2"/><text x="11.1821%" y="319.50"></text></g><g><title>[libc.so.6] (7 samples, 0.16%)</title><rect x="10.9781%" y="213" width="0.1611%" height="15" fill="rgb(206,201,31)" fg:x="477" fg:w="7"/><text x="11.2281%" y="223.50"></text></g><g><title>[libc.so.6] (81 samples, 1.86%)</title><rect x="10.9781%" y="229" width="1.8642%" height="15" fill="rgb(231,57,52)" fg:x="477" fg:w="81"/><text x="11.2281%" y="239.50">[..</text></g><g><title>[libc.so.6] (98 samples, 2.26%)</title><rect x="10.9781%" y="245" width="2.2555%" height="15" fill="rgb(248,177,22)" fg:x="477" fg:w="98"/><text x="11.2281%" y="255.50">[..</text></g><g><title>realloc (127 samples, 2.92%)</title><rect x="10.9781%" y="261" width="2.9229%" height="15" fill="rgb(215,211,37)" fg:x="477" fg:w="127"/><text x="11.2281%" y="271.50">re..</text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (6 samples, 0.14%)</title><rect x="13.9010%" y="245" width="0.1381%" height="15" fill="rgb(241,128,51)" fg:x="604" fg:w="6"/><text x="14.1510%" y="255.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="14.0391%" y="245" width="0.0230%" height="15" fill="rgb(227,165,31)" fg:x="610" fg:w="1"/><text x="14.2891%" y="255.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="14.0391%" y="229" width="0.0230%" height="15" fill="rgb(228,167,24)" fg:x="610" fg:w="1"/><text x="14.2891%" y="239.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.02%)</title><rect x="14.0391%" y="213" width="0.0230%" height="15" fill="rgb(228,143,12)" fg:x="610" fg:w="1"/><text x="14.2891%" y="223.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="14.0391%" y="197" width="0.0230%" height="15" fill="rgb(249,149,8)" fg:x="610" fg:w="1"/><text x="14.2891%" y="207.50"></text></g><g><title>run_timer_softirq (1 samples, 0.02%)</title><rect x="14.0391%" y="181" width="0.0230%" height="15" fill="rgb(243,35,44)" fg:x="610" fg:w="1"/><text x="14.2891%" y="191.50"></text></g><g><title>__run_timers.part.0 (1 samples, 0.02%)</title><rect x="14.0391%" y="165" width="0.0230%" height="15" fill="rgb(246,89,9)" fg:x="610" fg:w="1"/><text x="14.2891%" y="175.50"></text></g><g><title>call_timer_fn (1 samples, 0.02%)</title><rect x="14.0391%" y="149" width="0.0230%" height="15" fill="rgb(233,213,13)" fg:x="610" fg:w="1"/><text x="14.2891%" y="159.50"></text></g><g><title>vbg_heartbeat_timer (1 samples, 0.02%)</title><rect x="14.0391%" y="133" width="0.0230%" height="15" fill="rgb(233,141,41)" fg:x="610" fg:w="1"/><text x="14.2891%" y="143.50"></text></g><g><title>vbg_req_perform (1 samples, 0.02%)</title><rect x="14.0391%" y="117" width="0.0230%" height="15" fill="rgb(239,167,4)" fg:x="610" fg:w="1"/><text x="14.2891%" y="127.50"></text></g><g><title>asm_common_interrupt (1 samples, 0.02%)</title><rect x="14.0621%" y="245" width="0.0230%" height="15" fill="rgb(209,217,16)" fg:x="611" fg:w="1"/><text x="14.3121%" y="255.50"></text></g><g><title>common_interrupt (1 samples, 0.02%)</title><rect x="14.0621%" y="229" width="0.0230%" height="15" fill="rgb(219,88,35)" fg:x="611" fg:w="1"/><text x="14.3121%" y="239.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.02%)</title><rect x="14.0621%" y="213" width="0.0230%" height="15" fill="rgb(220,193,23)" fg:x="611" fg:w="1"/><text x="14.3121%" y="223.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="14.0621%" y="197" width="0.0230%" height="15" fill="rgb(230,90,52)" fg:x="611" fg:w="1"/><text x="14.3121%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (163 samples, 3.75%)</title><rect x="10.9781%" y="309" width="3.7514%" height="15" fill="rgb(252,106,19)" fg:x="477" fg:w="163"/><text x="11.2281%" y="319.50">&lt;all..</text></g><g><title>alloc::alloc::Global::grow_impl (163 samples, 3.75%)</title><rect x="10.9781%" y="293" width="3.7514%" height="15" fill="rgb(206,74,20)" fg:x="477" fg:w="163"/><text x="11.2281%" y="303.50">allo..</text></g><g><title>alloc::alloc::realloc (163 samples, 3.75%)</title><rect x="10.9781%" y="277" width="3.7514%" height="15" fill="rgb(230,138,44)" fg:x="477" fg:w="163"/><text x="11.2281%" y="287.50">allo..</text></g><g><title>__rdl_realloc (36 samples, 0.83%)</title><rect x="13.9010%" y="261" width="0.8285%" height="15" fill="rgb(235,182,43)" fg:x="604" fg:w="36"/><text x="14.1510%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (175 samples, 4.03%)</title><rect x="10.9321%" y="325" width="4.0276%" height="15" fill="rgb(242,16,51)" fg:x="475" fg:w="175"/><text x="11.1821%" y="335.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (2 samples, 0.05%)</title><rect x="14.9597%" y="325" width="0.0460%" height="15" fill="rgb(248,9,4)" fg:x="650" fg:w="2"/><text x="15.2097%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.05%)</title><rect x="15.0058%" y="325" width="0.0460%" height="15" fill="rgb(210,31,22)" fg:x="652" fg:w="2"/><text x="15.2558%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (193 samples, 4.44%)</title><rect x="10.7940%" y="341" width="4.4419%" height="15" fill="rgb(239,54,39)" fg:x="469" fg:w="193"/><text x="11.0440%" y="351.50">alloc..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (8 samples, 0.18%)</title><rect x="15.0518%" y="325" width="0.1841%" height="15" fill="rgb(230,99,41)" fg:x="654" fg:w="8"/><text x="15.3018%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (194 samples, 4.46%)</title><rect x="10.7940%" y="357" width="4.4649%" height="15" fill="rgb(253,106,12)" fg:x="469" fg:w="194"/><text x="11.0440%" y="367.50">alloc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (195 samples, 4.49%)</title><rect x="10.7940%" y="389" width="4.4879%" height="15" fill="rgb(213,46,41)" fg:x="469" fg:w="195"/><text x="11.0440%" y="399.50">alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (195 samples, 4.49%)</title><rect x="10.7940%" y="373" width="4.4879%" height="15" fill="rgb(215,133,35)" fg:x="469" fg:w="195"/><text x="11.0440%" y="383.50">alloc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (10 samples, 0.23%)</title><rect x="15.2819%" y="389" width="0.2301%" height="15" fill="rgb(213,28,5)" fg:x="664" fg:w="10"/><text x="15.5319%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (10 samples, 0.23%)</title><rect x="15.2819%" y="373" width="0.2301%" height="15" fill="rgb(215,77,49)" fg:x="664" fg:w="10"/><text x="15.5319%" y="383.50"></text></g><g><title>asm_sysvec_irq_work (1 samples, 0.02%)</title><rect x="15.5121%" y="261" width="0.0230%" height="15" fill="rgb(248,100,22)" fg:x="674" fg:w="1"/><text x="15.7621%" y="271.50"></text></g><g><title>sysvec_irq_work (1 samples, 0.02%)</title><rect x="15.5121%" y="245" width="0.0230%" height="15" fill="rgb(208,67,9)" fg:x="674" fg:w="1"/><text x="15.7621%" y="255.50"></text></g><g><title>irqentry_exit (1 samples, 0.02%)</title><rect x="15.5121%" y="229" width="0.0230%" height="15" fill="rgb(219,133,21)" fg:x="674" fg:w="1"/><text x="15.7621%" y="239.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.02%)</title><rect x="15.5121%" y="213" width="0.0230%" height="15" fill="rgb(246,46,29)" fg:x="674" fg:w="1"/><text x="15.7621%" y="223.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.02%)</title><rect x="15.5121%" y="197" width="0.0230%" height="15" fill="rgb(246,185,52)" fg:x="674" fg:w="1"/><text x="15.7621%" y="207.50"></text></g><g><title>exit_to_user_mode_loop (1 samples, 0.02%)</title><rect x="15.5121%" y="181" width="0.0230%" height="15" fill="rgb(252,136,11)" fg:x="674" fg:w="1"/><text x="15.7621%" y="191.50"></text></g><g><title>schedule (1 samples, 0.02%)</title><rect x="15.5121%" y="165" width="0.0230%" height="15" fill="rgb(219,138,53)" fg:x="674" fg:w="1"/><text x="15.7621%" y="175.50"></text></g><g><title>__schedule (1 samples, 0.02%)</title><rect x="15.5121%" y="149" width="0.0230%" height="15" fill="rgb(211,51,23)" fg:x="674" fg:w="1"/><text x="15.7621%" y="159.50"></text></g><g><title>finish_task_switch.isra.0 (1 samples, 0.02%)</title><rect x="15.5121%" y="133" width="0.0230%" height="15" fill="rgb(247,221,28)" fg:x="674" fg:w="1"/><text x="15.7621%" y="143.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (11 samples, 0.25%)</title><rect x="15.5351%" y="261" width="0.2532%" height="15" fill="rgb(251,222,45)" fg:x="675" fg:w="11"/><text x="15.7851%" y="271.50"></text></g><g><title>sysvec_apic_timer_interrupt (11 samples, 0.25%)</title><rect x="15.5351%" y="245" width="0.2532%" height="15" fill="rgb(217,162,53)" fg:x="675" fg:w="11"/><text x="15.7851%" y="255.50"></text></g><g><title>irq_exit_rcu (11 samples, 0.25%)</title><rect x="15.5351%" y="229" width="0.2532%" height="15" fill="rgb(229,93,14)" fg:x="675" fg:w="11"/><text x="15.7851%" y="239.50"></text></g><g><title>__softirqentry_text_start (11 samples, 0.25%)</title><rect x="15.5351%" y="213" width="0.2532%" height="15" fill="rgb(209,67,49)" fg:x="675" fg:w="11"/><text x="15.7851%" y="223.50"></text></g><g><title>run_timer_softirq (11 samples, 0.25%)</title><rect x="15.5351%" y="197" width="0.2532%" height="15" fill="rgb(213,87,29)" fg:x="675" fg:w="11"/><text x="15.7851%" y="207.50"></text></g><g><title>__run_timers.part.0 (11 samples, 0.25%)</title><rect x="15.5351%" y="181" width="0.2532%" height="15" fill="rgb(205,151,52)" fg:x="675" fg:w="11"/><text x="15.7851%" y="191.50"></text></g><g><title>call_timer_fn (11 samples, 0.25%)</title><rect x="15.5351%" y="165" width="0.2532%" height="15" fill="rgb(253,215,39)" fg:x="675" fg:w="11"/><text x="15.7851%" y="175.50"></text></g><g><title>vbg_heartbeat_timer (11 samples, 0.25%)</title><rect x="15.5351%" y="149" width="0.2532%" height="15" fill="rgb(221,220,41)" fg:x="675" fg:w="11"/><text x="15.7851%" y="159.50"></text></g><g><title>vbg_req_perform (11 samples, 0.25%)</title><rect x="15.5351%" y="133" width="0.2532%" height="15" fill="rgb(218,133,21)" fg:x="675" fg:w="11"/><text x="15.7851%" y="143.50"></text></g><g><title>asm_common_interrupt (3 samples, 0.07%)</title><rect x="15.7883%" y="261" width="0.0690%" height="15" fill="rgb(221,193,43)" fg:x="686" fg:w="3"/><text x="16.0383%" y="271.50"></text></g><g><title>common_interrupt (3 samples, 0.07%)</title><rect x="15.7883%" y="245" width="0.0690%" height="15" fill="rgb(240,128,52)" fg:x="686" fg:w="3"/><text x="16.0383%" y="255.50"></text></g><g><title>irq_exit_rcu (3 samples, 0.07%)</title><rect x="15.7883%" y="229" width="0.0690%" height="15" fill="rgb(253,114,12)" fg:x="686" fg:w="3"/><text x="16.0383%" y="239.50"></text></g><g><title>__softirqentry_text_start (3 samples, 0.07%)</title><rect x="15.7883%" y="213" width="0.0690%" height="15" fill="rgb(215,223,47)" fg:x="686" fg:w="3"/><text x="16.0383%" y="223.50"></text></g><g><title>core::num::&lt;impl u128&gt;::pow (2,771 samples, 63.77%)</title><rect x="15.5121%" y="277" width="63.7745%" height="15" fill="rgb(248,225,23)" fg:x="674" fg:w="2771"/><text x="15.7621%" y="287.50">core::num::&lt;impl u128&gt;::pow</text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (2,817 samples, 64.83%)</title><rect x="15.5121%" y="341" width="64.8331%" height="15" fill="rgb(250,108,0)" fg:x="674" fg:w="2817"/><text x="15.7621%" y="351.50">core::iter::traits::iterator::Iterator::find::check::{{closure}}</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (2,817 samples, 64.83%)</title><rect x="15.5121%" y="325" width="64.8331%" height="15" fill="rgb(228,208,7)" fg:x="674" fg:w="2817"/><text x="15.7621%" y="335.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>wfc::wfc::bits256_set::Bits256Set::items::{{closure}} (2,817 samples, 64.83%)</title><rect x="15.5121%" y="309" width="64.8331%" height="15" fill="rgb(244,45,10)" fg:x="674" fg:w="2817"/><text x="15.7621%" y="319.50">wfc::wfc::bits256_set::Bits256Set::items::{{closure}}</text></g><g><title>wfc::wfc::bits256_set::Bits256Set::contains (2,817 samples, 64.83%)</title><rect x="15.5121%" y="293" width="64.8331%" height="15" fill="rgb(207,125,25)" fg:x="674" fg:w="2817"/><text x="15.7621%" y="303.50">wfc::wfc::bits256_set::Bits256Set::contains</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::lt (136 samples, 3.13%)</title><rect x="80.3452%" y="309" width="3.1300%" height="15" fill="rgb(210,195,18)" fg:x="3491" fg:w="136"/><text x="80.5952%" y="319.50">cor..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (165 samples, 3.80%)</title><rect x="80.3452%" y="341" width="3.7975%" height="15" fill="rgb(249,80,12)" fg:x="3491" fg:w="165"/><text x="80.5952%" y="351.50">core..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (165 samples, 3.80%)</title><rect x="80.3452%" y="325" width="3.7975%" height="15" fill="rgb(221,65,9)" fg:x="3491" fg:w="165"/><text x="80.5952%" y="335.50">&lt;cor..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,141 samples, 72.29%)</title><rect x="15.5121%" y="389" width="72.2900%" height="15" fill="rgb(235,49,36)" fg:x="674" fg:w="3141"/><text x="15.7621%" y="399.50">&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::iter::traits::iterator::Iterator::find (3,141 samples, 72.29%)</title><rect x="15.5121%" y="373" width="72.2900%" height="15" fill="rgb(225,32,20)" fg:x="674" fg:w="3141"/><text x="15.7621%" y="383.50">core::iter::traits::iterator::Iterator::find</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3,141 samples, 72.29%)</title><rect x="15.5121%" y="357" width="72.2900%" height="15" fill="rgb(215,141,46)" fg:x="674" fg:w="3141"/><text x="15.7621%" y="367.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3,368 samples, 77.51%)</title><rect x="10.7940%" y="421" width="77.5144%" height="15" fill="rgb(250,160,47)" fg:x="469" fg:w="3368"/><text x="11.0440%" y="431.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (3,368 samples, 77.51%)</title><rect x="10.7940%" y="405" width="77.5144%" height="15" fill="rgb(216,222,40)" fg:x="469" fg:w="3368"/><text x="11.0440%" y="415.50">alloc::vec::Vec&lt;T,A&gt;::extend_desugared</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3,654 samples, 84.10%)</title><rect x="5.0633%" y="437" width="84.0967%" height="15" fill="rgb(234,217,39)" fg:x="220" fg:w="3654"/><text x="5.3133%" y="447.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>wfc::wfc::bits256_set::Bits256Set::items (3,655 samples, 84.12%)</title><rect x="5.0633%" y="501" width="84.1197%" height="15" fill="rgb(207,178,40)" fg:x="220" fg:w="3655"/><text x="5.3133%" y="511.50">wfc::wfc::bits256_set::Bits256Set::items</text></g><g><title>core::iter::traits::iterator::Iterator::collect (3,655 samples, 84.12%)</title><rect x="5.0633%" y="485" width="84.1197%" height="15" fill="rgb(221,136,13)" fg:x="220" fg:w="3655"/><text x="5.3133%" y="495.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3,655 samples, 84.12%)</title><rect x="5.0633%" y="469" width="84.1197%" height="15" fill="rgb(249,199,10)" fg:x="220" fg:w="3655"/><text x="5.3133%" y="479.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,655 samples, 84.12%)</title><rect x="5.0633%" y="453" width="84.1197%" height="15" fill="rgb(249,222,13)" fg:x="220" fg:w="3655"/><text x="5.3133%" y="463.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.02%)</title><rect x="89.1830%" y="453" width="0.0230%" height="15" fill="rgb(244,185,38)" fg:x="3875" fg:w="1"/><text x="89.4330%" y="463.50"></text></g><g><title>[libc.so.6] (11 samples, 0.25%)</title><rect x="89.2060%" y="405" width="0.2532%" height="15" fill="rgb(236,202,9)" fg:x="3876" fg:w="11"/><text x="89.4560%" y="415.50"></text></g><g><title>free (28 samples, 0.64%)</title><rect x="89.2060%" y="421" width="0.6444%" height="15" fill="rgb(250,229,37)" fg:x="3876" fg:w="28"/><text x="89.4560%" y="431.50"></text></g><g><title>__rust_dealloc (1 samples, 0.02%)</title><rect x="89.8504%" y="421" width="0.0230%" height="15" fill="rgb(206,174,23)" fg:x="3904" fg:w="1"/><text x="90.1004%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (32 samples, 0.74%)</title><rect x="89.1830%" y="501" width="0.7365%" height="15" fill="rgb(211,33,43)" fg:x="3875" fg:w="32"/><text x="89.4330%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (32 samples, 0.74%)</title><rect x="89.1830%" y="485" width="0.7365%" height="15" fill="rgb(245,58,50)" fg:x="3875" fg:w="32"/><text x="89.4330%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.74%)</title><rect x="89.1830%" y="469" width="0.7365%" height="15" fill="rgb(244,68,36)" fg:x="3875" fg:w="32"/><text x="89.4330%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (31 samples, 0.71%)</title><rect x="89.2060%" y="453" width="0.7135%" height="15" fill="rgb(232,229,15)" fg:x="3876" fg:w="31"/><text x="89.4560%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (31 samples, 0.71%)</title><rect x="89.2060%" y="437" width="0.7135%" height="15" fill="rgb(254,30,23)" fg:x="3876" fg:w="31"/><text x="89.4560%" y="447.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.05%)</title><rect x="89.8734%" y="421" width="0.0460%" height="15" fill="rgb(235,160,14)" fg:x="3905" fg:w="2"/><text x="90.1234%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.05%)</title><rect x="89.8734%" y="405" width="0.0460%" height="15" fill="rgb(212,155,44)" fg:x="3905" fg:w="2"/><text x="90.1234%" y="415.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="89.9194%" y="277" width="0.0460%" height="15" fill="rgb(226,2,50)" fg:x="3907" fg:w="2"/><text x="90.1694%" y="287.50"></text></g><g><title>[libc.so.6] (60 samples, 1.38%)</title><rect x="89.9194%" y="293" width="1.3809%" height="15" fill="rgb(234,177,6)" fg:x="3907" fg:w="60"/><text x="90.1694%" y="303.50"></text></g><g><title>[libc.so.6] (80 samples, 1.84%)</title><rect x="89.9194%" y="309" width="1.8412%" height="15" fill="rgb(217,24,9)" fg:x="3907" fg:w="80"/><text x="90.1694%" y="319.50">[..</text></g><g><title>malloc (95 samples, 2.19%)</title><rect x="89.9194%" y="325" width="2.1864%" height="15" fill="rgb(220,13,46)" fg:x="3907" fg:w="95"/><text x="90.1694%" y="335.50">m..</text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.07%)</title><rect x="92.1059%" y="309" width="0.0690%" height="15" fill="rgb(239,221,27)" fg:x="4002" fg:w="3"/><text x="92.3559%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (106 samples, 2.44%)</title><rect x="89.9194%" y="405" width="2.4396%" height="15" fill="rgb(222,198,25)" fg:x="3907" fg:w="106"/><text x="90.1694%" y="415.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (106 samples, 2.44%)</title><rect x="89.9194%" y="389" width="2.4396%" height="15" fill="rgb(211,99,13)" fg:x="3907" fg:w="106"/><text x="90.1694%" y="399.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (106 samples, 2.44%)</title><rect x="89.9194%" y="373" width="2.4396%" height="15" fill="rgb(232,111,31)" fg:x="3907" fg:w="106"/><text x="90.1694%" y="383.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (106 samples, 2.44%)</title><rect x="89.9194%" y="357" width="2.4396%" height="15" fill="rgb(245,82,37)" fg:x="3907" fg:w="106"/><text x="90.1694%" y="367.50">al..</text></g><g><title>alloc::alloc::alloc (106 samples, 2.44%)</title><rect x="89.9194%" y="341" width="2.4396%" height="15" fill="rgb(227,149,46)" fg:x="3907" fg:w="106"/><text x="90.1694%" y="351.50">al..</text></g><g><title>__rdl_alloc (11 samples, 0.25%)</title><rect x="92.1059%" y="325" width="0.2532%" height="15" fill="rgb(218,36,50)" fg:x="4002" fg:w="11"/><text x="92.3559%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (107 samples, 2.46%)</title><rect x="89.9194%" y="437" width="2.4626%" height="15" fill="rgb(226,80,48)" fg:x="3907" fg:w="107"/><text x="90.1694%" y="447.50">al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (107 samples, 2.46%)</title><rect x="89.9194%" y="421" width="2.4626%" height="15" fill="rgb(238,224,15)" fg:x="3907" fg:w="107"/><text x="90.1694%" y="431.50">al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.02%)</title><rect x="92.3820%" y="309" width="0.0230%" height="15" fill="rgb(241,136,10)" fg:x="4014" fg:w="1"/><text x="92.6320%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.02%)</title><rect x="92.3820%" y="293" width="0.0230%" height="15" fill="rgb(208,32,45)" fg:x="4014" fg:w="1"/><text x="92.6320%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="92.3820%" y="277" width="0.0230%" height="15" fill="rgb(207,135,9)" fg:x="4014" fg:w="1"/><text x="92.6320%" y="287.50"></text></g><g><title>wfc::wfc::direction_mapping::DirectionMapping&lt;T&gt;::right (4 samples, 0.09%)</title><rect x="92.3820%" y="325" width="0.0921%" height="15" fill="rgb(206,86,44)" fg:x="4014" fg:w="4"/><text x="92.6320%" y="335.50"></text></g><g><title>wfc::wfc::direction_mapping::DirectionMapping&lt;T&gt;::left (1 samples, 0.02%)</title><rect x="92.4741%" y="325" width="0.0230%" height="15" fill="rgb(245,177,15)" fg:x="4018" fg:w="1"/><text x="92.7241%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.02%)</title><rect x="92.4741%" y="309" width="0.0230%" height="15" fill="rgb(206,64,50)" fg:x="4018" fg:w="1"/><text x="92.7241%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.02%)</title><rect x="92.4741%" y="293" width="0.0230%" height="15" fill="rgb(234,36,40)" fg:x="4018" fg:w="1"/><text x="92.7241%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="92.4741%" y="277" width="0.0230%" height="15" fill="rgb(213,64,8)" fg:x="4018" fg:w="1"/><text x="92.7241%" y="287.50"></text></g><g><title>wfc::wfc::direction_mapping::DirectionMapping&lt;T&gt;::down (1 samples, 0.02%)</title><rect x="92.4971%" y="325" width="0.0230%" height="15" fill="rgb(210,75,36)" fg:x="4019" fg:w="1"/><text x="92.7471%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.02%)</title><rect x="92.4971%" y="309" width="0.0230%" height="15" fill="rgb(229,88,21)" fg:x="4019" fg:w="1"/><text x="92.7471%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.02%)</title><rect x="92.4971%" y="293" width="0.0230%" height="15" fill="rgb(252,204,47)" fg:x="4019" fg:w="1"/><text x="92.7471%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="92.4971%" y="277" width="0.0230%" height="15" fill="rgb(208,77,27)" fg:x="4019" fg:w="1"/><text x="92.7471%" y="287.50"></text></g><g><title>wfc::wfc::direction_mapping::DirectionMapping&lt;T&gt;::back (1 samples, 0.02%)</title><rect x="92.5201%" y="325" width="0.0230%" height="15" fill="rgb(221,76,26)" fg:x="4020" fg:w="1"/><text x="92.7701%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (27 samples, 0.62%)</title><rect x="92.5432%" y="325" width="0.6214%" height="15" fill="rgb(225,139,18)" fg:x="4021" fg:w="27"/><text x="92.7932%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (27 samples, 0.62%)</title><rect x="92.5432%" y="309" width="0.6214%" height="15" fill="rgb(230,137,11)" fg:x="4021" fg:w="27"/><text x="92.7932%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (27 samples, 0.62%)</title><rect x="92.5432%" y="293" width="0.6214%" height="15" fill="rgb(212,28,1)" fg:x="4021" fg:w="27"/><text x="92.7932%" y="303.50"></text></g><g><title>wfc::wfc::queueprop_bitarrayset_fibheap::QueuePropBitArraySetFibHeap::legal_tiles::{{closure}} (102 samples, 2.35%)</title><rect x="92.3820%" y="341" width="2.3475%" height="15" fill="rgb(248,164,17)" fg:x="4014" fg:w="102"/><text x="92.6320%" y="351.50">w..</text></g><g><title>core::ptr::write (63 samples, 1.45%)</title><rect x="94.7296%" y="309" width="1.4499%" height="15" fill="rgb(222,171,42)" fg:x="4116" fg:w="63"/><text x="94.9796%" y="319.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (166 samples, 3.82%)</title><rect x="92.3820%" y="357" width="3.8205%" height="15" fill="rgb(243,84,45)" fg:x="4014" fg:w="166"/><text x="92.6320%" y="367.50">core..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (64 samples, 1.47%)</title><rect x="94.7296%" y="341" width="1.4730%" height="15" fill="rgb(252,49,23)" fg:x="4116" fg:w="64"/><text x="94.9796%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::{{closure}} (64 samples, 1.47%)</title><rect x="94.7296%" y="325" width="1.4730%" height="15" fill="rgb(215,19,7)" fg:x="4116" fg:w="64"/><text x="94.9796%" y="335.50"></text></g><g><title>alloc::vec::set_len_on_drop::SetLenOnDrop::increment_len (1 samples, 0.02%)</title><rect x="96.1795%" y="309" width="0.0230%" height="15" fill="rgb(238,81,41)" fg:x="4179" fg:w="1"/><text x="96.4295%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (306 samples, 7.04%)</title><rect x="89.9194%" y="453" width="7.0426%" height="15" fill="rgb(210,199,37)" fg:x="3907" fg:w="306"/><text x="90.1694%" y="463.50">&lt;alloc::v..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (199 samples, 4.58%)</title><rect x="92.3820%" y="437" width="4.5800%" height="15" fill="rgb(244,192,49)" fg:x="4014" fg:w="199"/><text x="92.6320%" y="447.50">&lt;allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (199 samples, 4.58%)</title><rect x="92.3820%" y="421" width="4.5800%" height="15" fill="rgb(226,211,11)" fg:x="4014" fg:w="199"/><text x="92.6320%" y="431.50">alloc..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (199 samples, 4.58%)</title><rect x="92.3820%" y="405" width="4.5800%" height="15" fill="rgb(236,162,54)" fg:x="4014" fg:w="199"/><text x="92.6320%" y="415.50">core:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (199 samples, 4.58%)</title><rect x="92.3820%" y="389" width="4.5800%" height="15" fill="rgb(220,229,9)" fg:x="4014" fg:w="199"/><text x="92.6320%" y="399.50">&lt;core..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (199 samples, 4.58%)</title><rect x="92.3820%" y="373" width="4.5800%" height="15" fill="rgb(250,87,22)" fg:x="4014" fg:w="199"/><text x="92.6320%" y="383.50">core:..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.76%)</title><rect x="96.2025%" y="357" width="0.7595%" height="15" fill="rgb(239,43,17)" fg:x="4180" fg:w="33"/><text x="96.4525%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (309 samples, 7.11%)</title><rect x="89.9194%" y="501" width="7.1116%" height="15" fill="rgb(231,177,25)" fg:x="3907" fg:w="309"/><text x="90.1694%" y="511.50">core::iter..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (309 samples, 7.11%)</title><rect x="89.9194%" y="485" width="7.1116%" height="15" fill="rgb(219,179,1)" fg:x="3907" fg:w="309"/><text x="90.1694%" y="495.50">&lt;alloc::ve..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (309 samples, 7.11%)</title><rect x="89.9194%" y="469" width="7.1116%" height="15" fill="rgb(238,219,53)" fg:x="3907" fg:w="309"/><text x="90.1694%" y="479.50">&lt;alloc::ve..</text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="97.0311%" y="437" width="0.0230%" height="15" fill="rgb(232,167,36)" fg:x="4216" fg:w="1"/><text x="97.2811%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.02%)</title><rect x="97.0541%" y="421" width="0.0230%" height="15" fill="rgb(244,19,51)" fg:x="4217" fg:w="1"/><text x="97.3041%" y="431.50"></text></g><g><title>__rdl_alloc (2 samples, 0.05%)</title><rect x="97.0541%" y="437" width="0.0460%" height="15" fill="rgb(224,6,22)" fg:x="4217" fg:w="2"/><text x="97.3041%" y="447.50"></text></g><g><title>alloc::alloc::exchange_malloc (5 samples, 0.12%)</title><rect x="97.0311%" y="501" width="0.1151%" height="15" fill="rgb(224,145,5)" fg:x="4216" fg:w="5"/><text x="97.2811%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.12%)</title><rect x="97.0311%" y="485" width="0.1151%" height="15" fill="rgb(234,130,49)" fg:x="4216" fg:w="5"/><text x="97.2811%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.12%)</title><rect x="97.0311%" y="469" width="0.1151%" height="15" fill="rgb(254,6,2)" fg:x="4216" fg:w="5"/><text x="97.2811%" y="479.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.12%)</title><rect x="97.0311%" y="453" width="0.1151%" height="15" fill="rgb(208,96,46)" fg:x="4216" fg:w="5"/><text x="97.2811%" y="463.50"></text></g><g><title>wfc::wfc::queueprop_bitarrayset_fibheap::QueuePropBitArraySetFibHeap::legal_tiles (4,148 samples, 95.47%)</title><rect x="1.8182%" y="517" width="95.4661%" height="15" fill="rgb(239,3,39)" fg:x="79" fg:w="4148"/><text x="2.0682%" y="527.50">wfc::wfc::queueprop_bitarrayset_fibheap::QueuePropBitArraySetFibHeap::legal_tiles</text></g><g><title>core::cell::is_reading (2 samples, 0.05%)</title><rect x="97.2842%" y="405" width="0.0460%" height="15" fill="rgb(233,210,1)" fg:x="4227" fg:w="2"/><text x="97.5342%" y="415.50"></text></g><g><title>wfc::wfc::fib_heap::FibHeap::cut::{{closure}} (3 samples, 0.07%)</title><rect x="97.2842%" y="469" width="0.0690%" height="15" fill="rgb(244,137,37)" fg:x="4227" fg:w="3"/><text x="97.5342%" y="479.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (3 samples, 0.07%)</title><rect x="97.2842%" y="453" width="0.0690%" height="15" fill="rgb(240,136,2)" fg:x="4227" fg:w="3"/><text x="97.5342%" y="463.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (3 samples, 0.07%)</title><rect x="97.2842%" y="437" width="0.0690%" height="15" fill="rgb(239,18,37)" fg:x="4227" fg:w="3"/><text x="97.5342%" y="447.50"></text></g><g><title>core::cell::BorrowRef::new (3 samples, 0.07%)</title><rect x="97.2842%" y="421" width="0.0690%" height="15" fill="rgb(218,185,22)" fg:x="4227" fg:w="3"/><text x="97.5342%" y="431.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.02%)</title><rect x="97.3303%" y="405" width="0.0230%" height="15" fill="rgb(225,218,4)" fg:x="4229" fg:w="1"/><text x="97.5803%" y="415.50"></text></g><g><title>wfc::wfc::fib_heap::FibHeap::cut (4 samples, 0.09%)</title><rect x="97.2842%" y="501" width="0.0921%" height="15" fill="rgb(230,182,32)" fg:x="4227" fg:w="4"/><text x="97.5342%" y="511.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (4 samples, 0.09%)</title><rect x="97.2842%" y="485" width="0.0921%" height="15" fill="rgb(242,56,43)" fg:x="4227" fg:w="4"/><text x="97.5342%" y="495.50"></text></g><g><title>core::cell::is_reading (2 samples, 0.05%)</title><rect x="97.3763%" y="389" width="0.0460%" height="15" fill="rgb(233,99,24)" fg:x="4231" fg:w="2"/><text x="97.6263%" y="399.50"></text></g><g><title>wfc::wfc::fib_heap::FibHeap::cut (3 samples, 0.07%)</title><rect x="97.3763%" y="485" width="0.0690%" height="15" fill="rgb(234,209,42)" fg:x="4231" fg:w="3"/><text x="97.6263%" y="495.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (3 samples, 0.07%)</title><rect x="97.3763%" y="469" width="0.0690%" height="15" fill="rgb(227,7,12)" fg:x="4231" fg:w="3"/><text x="97.6263%" y="479.50"></text></g><g><title>wfc::wfc::fib_heap::FibHeap::cut::{{closure}} (3 samples, 0.07%)</title><rect x="97.3763%" y="453" width="0.0690%" height="15" fill="rgb(245,203,43)" fg:x="4231" fg:w="3"/><text x="97.6263%" y="463.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (3 samples, 0.07%)</title><rect x="97.3763%" y="437" width="0.0690%" height="15" fill="rgb(238,205,33)" fg:x="4231" fg:w="3"/><text x="97.6263%" y="447.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (3 samples, 0.07%)</title><rect x="97.3763%" y="421" width="0.0690%" height="15" fill="rgb(231,56,7)" fg:x="4231" fg:w="3"/><text x="97.6263%" y="431.50"></text></g><g><title>core::cell::BorrowRef::new (3 samples, 0.07%)</title><rect x="97.3763%" y="405" width="0.0690%" height="15" fill="rgb(244,186,29)" fg:x="4231" fg:w="3"/><text x="97.6263%" y="415.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.02%)</title><rect x="97.4223%" y="389" width="0.0230%" height="15" fill="rgb(234,111,31)" fg:x="4233" fg:w="1"/><text x="97.6723%" y="399.50"></text></g><g><title>wfc::wfc::fib_heap::FibHeap::cascade_cut (4 samples, 0.09%)</title><rect x="97.3763%" y="501" width="0.0921%" height="15" fill="rgb(241,149,10)" fg:x="4231" fg:w="4"/><text x="97.6263%" y="511.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="97.4453%" y="485" width="0.0230%" height="15" fill="rgb(249,206,44)" fg:x="4234" fg:w="1"/><text x="97.6953%" y="495.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="97.4453%" y="469" width="0.0230%" height="15" fill="rgb(251,153,30)" fg:x="4234" fg:w="1"/><text x="97.6953%" y="479.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (1 samples, 0.02%)</title><rect x="97.4453%" y="453" width="0.0230%" height="15" fill="rgb(239,152,38)" fg:x="4234" fg:w="1"/><text x="97.6953%" y="463.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (4 samples, 0.09%)</title><rect x="97.4684%" y="405" width="0.0921%" height="15" fill="rgb(249,139,47)" fg:x="4235" fg:w="4"/><text x="97.7184%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 0.09%)</title><rect x="97.4684%" y="389" width="0.0921%" height="15" fill="rgb(244,64,35)" fg:x="4235" fg:w="4"/><text x="97.7184%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (12 samples, 0.28%)</title><rect x="97.4684%" y="453" width="0.2762%" height="15" fill="rgb(216,46,15)" fg:x="4235" fg:w="12"/><text x="97.7184%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (12 samples, 0.28%)</title><rect x="97.4684%" y="437" width="0.2762%" height="15" fill="rgb(250,74,19)" fg:x="4235" fg:w="12"/><text x="97.7184%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (12 samples, 0.28%)</title><rect x="97.4684%" y="421" width="0.2762%" height="15" fill="rgb(249,42,33)" fg:x="4235" fg:w="12"/><text x="97.7184%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (8 samples, 0.18%)</title><rect x="97.5604%" y="405" width="0.1841%" height="15" fill="rgb(242,149,17)" fg:x="4239" fg:w="8"/><text x="97.8104%" y="415.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (8 samples, 0.18%)</title><rect x="97.5604%" y="389" width="0.1841%" height="15" fill="rgb(244,29,21)" fg:x="4239" fg:w="8"/><text x="97.8104%" y="399.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (V,U,T)&gt;::eq (8 samples, 0.18%)</title><rect x="97.5604%" y="373" width="0.1841%" height="15" fill="rgb(220,130,37)" fg:x="4239" fg:w="8"/><text x="97.8104%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.02%)</title><rect x="97.7445%" y="421" width="0.0230%" height="15" fill="rgb(211,67,2)" fg:x="4247" fg:w="1"/><text x="97.9945%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B,C)&gt;::hash (1 samples, 0.02%)</title><rect x="97.7445%" y="405" width="0.0230%" height="15" fill="rgb(235,68,52)" fg:x="4247" fg:w="1"/><text x="97.9945%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (1 samples, 0.02%)</title><rect x="97.7445%" y="389" width="0.0230%" height="15" fill="rgb(246,142,3)" fg:x="4247" fg:w="1"/><text x="97.9945%" y="399.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.02%)</title><rect x="97.7445%" y="373" width="0.0230%" height="15" fill="rgb(241,25,7)" fg:x="4247" fg:w="1"/><text x="97.9945%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="97.7445%" y="357" width="0.0230%" height="15" fill="rgb(242,119,39)" fg:x="4247" fg:w="1"/><text x="97.9945%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="97.7445%" y="341" width="0.0230%" height="15" fill="rgb(241,98,45)" fg:x="4247" fg:w="1"/><text x="97.9945%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="97.7445%" y="325" width="0.0230%" height="15" fill="rgb(254,28,30)" fg:x="4247" fg:w="1"/><text x="97.9945%" y="335.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.02%)</title><rect x="97.7445%" y="309" width="0.0230%" height="15" fill="rgb(241,142,54)" fg:x="4247" fg:w="1"/><text x="97.9945%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.02%)</title><rect x="97.7675%" y="357" width="0.0230%" height="15" fill="rgb(222,85,15)" fg:x="4248" fg:w="1"/><text x="98.0175%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.05%)</title><rect x="97.7675%" y="421" width="0.0460%" height="15" fill="rgb(210,85,47)" fg:x="4248" fg:w="2"/><text x="98.0175%" y="431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.05%)</title><rect x="97.7675%" y="405" width="0.0460%" height="15" fill="rgb(224,206,25)" fg:x="4248" fg:w="2"/><text x="98.0175%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.05%)</title><rect x="97.7675%" y="389" width="0.0460%" height="15" fill="rgb(243,201,19)" fg:x="4248" fg:w="2"/><text x="98.0175%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.05%)</title><rect x="97.7675%" y="373" width="0.0460%" height="15" fill="rgb(236,59,4)" fg:x="4248" fg:w="2"/><text x="98.0175%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (16 samples, 0.37%)</title><rect x="97.4684%" y="501" width="0.3682%" height="15" fill="rgb(254,179,45)" fg:x="4235" fg:w="16"/><text x="97.7184%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (16 samples, 0.37%)</title><rect x="97.4684%" y="485" width="0.3682%" height="15" fill="rgb(226,14,10)" fg:x="4235" fg:w="16"/><text x="97.7184%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (16 samples, 0.37%)</title><rect x="97.4684%" y="469" width="0.3682%" height="15" fill="rgb(244,27,41)" fg:x="4235" fg:w="16"/><text x="97.7184%" y="479.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.09%)</title><rect x="97.7445%" y="453" width="0.0921%" height="15" fill="rgb(235,35,32)" fg:x="4247" fg:w="4"/><text x="97.9945%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.09%)</title><rect x="97.7445%" y="437" width="0.0921%" height="15" fill="rgb(218,68,31)" fg:x="4247" fg:w="4"/><text x="97.9945%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;wfc::wfc::fib_heap::FibHeapNode&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="97.8366%" y="501" width="0.0230%" height="15" fill="rgb(207,120,37)" fg:x="4251" fg:w="1"/><text x="98.0866%" y="511.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="97.8366%" y="485" width="0.0230%" height="15" fill="rgb(227,98,0)" fg:x="4251" fg:w="1"/><text x="98.0866%" y="495.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.05%)</title><rect x="97.8596%" y="501" width="0.0460%" height="15" fill="rgb(207,7,3)" fg:x="4252" fg:w="2"/><text x="98.1096%" y="511.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.05%)</title><rect x="97.8596%" y="485" width="0.0460%" height="15" fill="rgb(206,98,19)" fg:x="4252" fg:w="2"/><text x="98.1096%" y="495.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (2 samples, 0.05%)</title><rect x="97.8596%" y="469" width="0.0460%" height="15" fill="rgb(217,5,26)" fg:x="4252" fg:w="2"/><text x="98.1096%" y="479.50"></text></g><g><title>wfc::wfc::fib_heap::FibHeap::decrease_key (28 samples, 0.64%)</title><rect x="97.2842%" y="517" width="0.6444%" height="15" fill="rgb(235,190,38)" fg:x="4227" fg:w="28"/><text x="97.5342%" y="527.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="97.9056%" y="501" width="0.0230%" height="15" fill="rgb(247,86,24)" fg:x="4254" fg:w="1"/><text x="98.1556%" y="511.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (1 samples, 0.02%)</title><rect x="97.9056%" y="485" width="0.0230%" height="15" fill="rgb(205,101,16)" fg:x="4254" fg:w="1"/><text x="98.1556%" y="495.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::len (4 samples, 0.09%)</title><rect x="97.9287%" y="517" width="0.0921%" height="15" fill="rgb(246,168,33)" fg:x="4255" fg:w="4"/><text x="98.1787%" y="527.50"></text></g><g><title>core::num::&lt;impl u128&gt;::count_ones (4 samples, 0.09%)</title><rect x="97.9287%" y="501" width="0.0921%" height="15" fill="rgb(231,114,1)" fg:x="4255" fg:w="4"/><text x="98.1787%" y="511.50"></text></g><g><title>core::cmp::PartialEq::ne (1 samples, 0.02%)</title><rect x="98.0207%" y="517" width="0.0230%" height="15" fill="rgb(207,184,53)" fg:x="4259" fg:w="1"/><text x="98.2707%" y="527.50"></text></g><g><title>&lt;wfc::wfc::bits256_set::Bits256Set as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="98.0207%" y="501" width="0.0230%" height="15" fill="rgb(224,95,51)" fg:x="4259" fg:w="1"/><text x="98.2707%" y="511.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (1 samples, 0.02%)</title><rect x="98.0437%" y="501" width="0.0230%" height="15" fill="rgb(212,188,45)" fg:x="4260" fg:w="1"/><text x="98.2937%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.02%)</title><rect x="98.0437%" y="485" width="0.0230%" height="15" fill="rgb(223,154,38)" fg:x="4260" fg:w="1"/><text x="98.2937%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="98.0437%" y="469" width="0.0230%" height="15" fill="rgb(251,22,52)" fg:x="4260" fg:w="1"/><text x="98.2937%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="98.0437%" y="453" width="0.0230%" height="15" fill="rgb(229,209,22)" fg:x="4260" fg:w="1"/><text x="98.2937%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.02%)</title><rect x="98.0437%" y="437" width="0.0230%" height="15" fill="rgb(234,138,34)" fg:x="4260" fg:w="1"/><text x="98.2937%" y="447.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.02%)</title><rect x="98.0437%" y="421" width="0.0230%" height="15" fill="rgb(212,95,11)" fg:x="4260" fg:w="1"/><text x="98.2937%" y="431.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.02%)</title><rect x="98.0437%" y="405" width="0.0230%" height="15" fill="rgb(240,179,47)" fg:x="4260" fg:w="1"/><text x="98.2937%" y="415.50"></text></g><g><title>realloc (1 samples, 0.02%)</title><rect x="98.0437%" y="389" width="0.0230%" height="15" fill="rgb(240,163,11)" fg:x="4260" fg:w="1"/><text x="98.2937%" y="399.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="98.0437%" y="373" width="0.0230%" height="15" fill="rgb(236,37,12)" fg:x="4260" fg:w="1"/><text x="98.2937%" y="383.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="98.0437%" y="357" width="0.0230%" height="15" fill="rgb(232,164,16)" fg:x="4260" fg:w="1"/><text x="98.2937%" y="367.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_write (1 samples, 0.02%)</title><rect x="98.0667%" y="501" width="0.0230%" height="15" fill="rgb(244,205,15)" fg:x="4261" fg:w="1"/><text x="98.3167%" y="511.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="98.0667%" y="485" width="0.0230%" height="15" fill="rgb(223,117,47)" fg:x="4261" fg:w="1"/><text x="98.3167%" y="495.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (3 samples, 0.07%)</title><rect x="98.0437%" y="517" width="0.0690%" height="15" fill="rgb(244,107,35)" fg:x="4260" fg:w="3"/><text x="98.2937%" y="527.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_read (1 samples, 0.02%)</title><rect x="98.1128%" y="501" width="0.0230%" height="15" fill="rgb(205,140,8)" fg:x="4263" fg:w="1"/><text x="98.3628%" y="511.50"></text></g><g><title>core::ptr::read (1 samples, 0.02%)</title><rect x="98.1128%" y="485" width="0.0230%" height="15" fill="rgb(228,84,46)" fg:x="4263" fg:w="1"/><text x="98.3628%" y="495.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (1 samples, 0.02%)</title><rect x="98.1128%" y="469" width="0.0230%" height="15" fill="rgb(254,188,9)" fg:x="4263" fg:w="1"/><text x="98.3628%" y="479.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (2 samples, 0.05%)</title><rect x="98.1128%" y="517" width="0.0460%" height="15" fill="rgb(206,112,54)" fg:x="4263" fg:w="2"/><text x="98.3628%" y="527.50"></text></g><g><title>wfc::wfc::queueprop_bitarrayset_fibheap::QueuePropBitArraySetFibHeap::propagate (4,189 samples, 96.41%)</title><rect x="1.7952%" y="533" width="96.4097%" height="15" fill="rgb(216,84,49)" fg:x="78" fg:w="4189"/><text x="2.0452%" y="543.50">wfc::wfc::queueprop_bitarrayset_fibheap::QueuePropBitArraySetFibHeap::propagate</text></g><g><title>wfc::wfc::queueprop_bitarrayset_fibheap::QueuePropBitArraySetFibHeap::prepare_map (1 samples, 0.02%)</title><rect x="98.2048%" y="533" width="0.0230%" height="15" fill="rgb(214,194,35)" fg:x="4267" fg:w="1"/><text x="98.4548%" y="543.50"></text></g><g><title>&lt;wfc::wfc::vec3d::PosIter3D as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="98.2048%" y="517" width="0.0230%" height="15" fill="rgb(249,28,3)" fg:x="4267" fg:w="1"/><text x="98.4548%" y="527.50"></text></g><g><title>wfc::wfc::vec3d::get_pos_from_index (1 samples, 0.02%)</title><rect x="98.2048%" y="501" width="0.0230%" height="15" fill="rgb(222,56,52)" fg:x="4267" fg:w="1"/><text x="98.4548%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (1 samples, 0.02%)</title><rect x="98.2278%" y="389" width="0.0230%" height="15" fill="rgb(245,217,50)" fg:x="4268" fg:w="1"/><text x="98.4778%" y="399.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.02%)</title><rect x="98.2278%" y="373" width="0.0230%" height="15" fill="rgb(213,201,24)" fg:x="4268" fg:w="1"/><text x="98.4778%" y="383.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::items::{{closure}} (1 samples, 0.02%)</title><rect x="98.2278%" y="357" width="0.0230%" height="15" fill="rgb(248,116,28)" fg:x="4268" fg:w="1"/><text x="98.4778%" y="367.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::contains (1 samples, 0.02%)</title><rect x="98.2278%" y="341" width="0.0230%" height="15" fill="rgb(219,72,43)" fg:x="4268" fg:w="1"/><text x="98.4778%" y="351.50"></text></g><g><title>core::num::&lt;impl u128&gt;::pow (1 samples, 0.02%)</title><rect x="98.2278%" y="325" width="0.0230%" height="15" fill="rgb(209,138,14)" fg:x="4268" fg:w="1"/><text x="98.4778%" y="335.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.02%)</title><rect x="98.2509%" y="389" width="0.0230%" height="15" fill="rgb(222,18,33)" fg:x="4269" fg:w="1"/><text x="98.5009%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.02%)</title><rect x="98.2509%" y="373" width="0.0230%" height="15" fill="rgb(213,199,7)" fg:x="4269" fg:w="1"/><text x="98.5009%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::lt (1 samples, 0.02%)</title><rect x="98.2509%" y="357" width="0.0230%" height="15" fill="rgb(250,110,10)" fg:x="4269" fg:w="1"/><text x="98.5009%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.07%)</title><rect x="98.2278%" y="437" width="0.0690%" height="15" fill="rgb(248,123,6)" fg:x="4268" fg:w="3"/><text x="98.4778%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (3 samples, 0.07%)</title><rect x="98.2278%" y="421" width="0.0690%" height="15" fill="rgb(206,91,31)" fg:x="4268" fg:w="3"/><text x="98.4778%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3 samples, 0.07%)</title><rect x="98.2278%" y="405" width="0.0690%" height="15" fill="rgb(211,154,13)" fg:x="4268" fg:w="3"/><text x="98.4778%" y="415.50"></text></g><g><title>core::num::&lt;impl u128&gt;::pow (7 samples, 0.16%)</title><rect x="98.2969%" y="293" width="0.1611%" height="15" fill="rgb(225,148,7)" fg:x="4271" fg:w="7"/><text x="98.5469%" y="303.50"></text></g><g><title>wfc::wfc::queueprop_bitarrayset_fibheap::QueuePropBitArraySetFibHeap::format_solution (12 samples, 0.28%)</title><rect x="98.2278%" y="533" width="0.2762%" height="15" fill="rgb(220,160,43)" fg:x="4268" fg:w="12"/><text x="98.4778%" y="543.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::items (12 samples, 0.28%)</title><rect x="98.2278%" y="517" width="0.2762%" height="15" fill="rgb(213,52,39)" fg:x="4268" fg:w="12"/><text x="98.4778%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (12 samples, 0.28%)</title><rect x="98.2278%" y="501" width="0.2762%" height="15" fill="rgb(243,137,7)" fg:x="4268" fg:w="12"/><text x="98.4778%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (12 samples, 0.28%)</title><rect x="98.2278%" y="485" width="0.2762%" height="15" fill="rgb(230,79,13)" fg:x="4268" fg:w="12"/><text x="98.4778%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (12 samples, 0.28%)</title><rect x="98.2278%" y="469" width="0.2762%" height="15" fill="rgb(247,105,23)" fg:x="4268" fg:w="12"/><text x="98.4778%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (12 samples, 0.28%)</title><rect x="98.2278%" y="453" width="0.2762%" height="15" fill="rgb(223,179,41)" fg:x="4268" fg:w="12"/><text x="98.4778%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (9 samples, 0.21%)</title><rect x="98.2969%" y="437" width="0.2071%" height="15" fill="rgb(218,9,34)" fg:x="4271" fg:w="9"/><text x="98.5469%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (9 samples, 0.21%)</title><rect x="98.2969%" y="421" width="0.2071%" height="15" fill="rgb(222,106,8)" fg:x="4271" fg:w="9"/><text x="98.5469%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.21%)</title><rect x="98.2969%" y="405" width="0.2071%" height="15" fill="rgb(211,220,0)" fg:x="4271" fg:w="9"/><text x="98.5469%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (9 samples, 0.21%)</title><rect x="98.2969%" y="389" width="0.2071%" height="15" fill="rgb(229,52,16)" fg:x="4271" fg:w="9"/><text x="98.5469%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (9 samples, 0.21%)</title><rect x="98.2969%" y="373" width="0.2071%" height="15" fill="rgb(212,155,18)" fg:x="4271" fg:w="9"/><text x="98.5469%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (9 samples, 0.21%)</title><rect x="98.2969%" y="357" width="0.2071%" height="15" fill="rgb(242,21,14)" fg:x="4271" fg:w="9"/><text x="98.5469%" y="367.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (9 samples, 0.21%)</title><rect x="98.2969%" y="341" width="0.2071%" height="15" fill="rgb(222,19,48)" fg:x="4271" fg:w="9"/><text x="98.5469%" y="351.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::items::{{closure}} (9 samples, 0.21%)</title><rect x="98.2969%" y="325" width="0.2071%" height="15" fill="rgb(232,45,27)" fg:x="4271" fg:w="9"/><text x="98.5469%" y="335.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::contains (9 samples, 0.21%)</title><rect x="98.2969%" y="309" width="0.2071%" height="15" fill="rgb(249,103,42)" fg:x="4271" fg:w="9"/><text x="98.5469%" y="319.50"></text></g><g><title>wfc::wfc::fib_heap::FibHeap::insert_or_merge (1 samples, 0.02%)</title><rect x="98.5040%" y="453" width="0.0230%" height="15" fill="rgb(246,81,33)" fg:x="4280" fg:w="1"/><text x="98.7540%" y="463.50"></text></g><g><title>wfc::wfc::fib_heap::FibHeap::insert_or_merge (2 samples, 0.05%)</title><rect x="98.5040%" y="469" width="0.0460%" height="15" fill="rgb(252,33,42)" fg:x="4280" fg:w="2"/><text x="98.7540%" y="479.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (1 samples, 0.02%)</title><rect x="98.5270%" y="453" width="0.0230%" height="15" fill="rgb(209,212,41)" fg:x="4281" fg:w="1"/><text x="98.7770%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1 samples, 0.02%)</title><rect x="98.5270%" y="437" width="0.0230%" height="15" fill="rgb(207,154,6)" fg:x="4281" fg:w="1"/><text x="98.7770%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.02%)</title><rect x="98.5270%" y="421" width="0.0230%" height="15" fill="rgb(223,64,47)" fg:x="4281" fg:w="1"/><text x="98.7770%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.02%)</title><rect x="98.5270%" y="405" width="0.0230%" height="15" fill="rgb(211,161,38)" fg:x="4281" fg:w="1"/><text x="98.7770%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.02%)</title><rect x="98.5270%" y="389" width="0.0230%" height="15" fill="rgb(219,138,40)" fg:x="4281" fg:w="1"/><text x="98.7770%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.02%)</title><rect x="98.5270%" y="373" width="0.0230%" height="15" fill="rgb(241,228,46)" fg:x="4281" fg:w="1"/><text x="98.7770%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="98.5270%" y="357" width="0.0230%" height="15" fill="rgb(223,209,38)" fg:x="4281" fg:w="1"/><text x="98.7770%" y="367.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.02%)</title><rect x="98.5270%" y="341" width="0.0230%" height="15" fill="rgb(236,164,45)" fg:x="4281" fg:w="1"/><text x="98.7770%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (1 samples, 0.02%)</title><rect x="98.5501%" y="421" width="0.0230%" height="15" fill="rgb(231,15,5)" fg:x="4282" fg:w="1"/><text x="98.8001%" y="431.50"></text></g><g><title>hashbrown::raw::is_full (1 samples, 0.02%)</title><rect x="98.5501%" y="405" width="0.0230%" height="15" fill="rgb(252,35,15)" fg:x="4282" fg:w="1"/><text x="98.8001%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (1 samples, 0.02%)</title><rect x="98.5731%" y="357" width="0.0230%" height="15" fill="rgb(248,181,18)" fg:x="4283" fg:w="1"/><text x="98.8231%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1 samples, 0.02%)</title><rect x="98.5731%" y="341" width="0.0230%" height="15" fill="rgb(233,39,42)" fg:x="4283" fg:w="1"/><text x="98.8231%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (1 samples, 0.02%)</title><rect x="98.5731%" y="325" width="0.0230%" height="15" fill="rgb(238,110,33)" fg:x="4283" fg:w="1"/><text x="98.8231%" y="335.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (1 samples, 0.02%)</title><rect x="98.5731%" y="309" width="0.0230%" height="15" fill="rgb(233,195,10)" fg:x="4283" fg:w="1"/><text x="98.8231%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="98.5731%" y="293" width="0.0230%" height="15" fill="rgb(254,105,3)" fg:x="4283" fg:w="1"/><text x="98.8231%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="98.5731%" y="277" width="0.0230%" height="15" fill="rgb(221,225,9)" fg:x="4283" fg:w="1"/><text x="98.8231%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="98.5731%" y="261" width="0.0230%" height="15" fill="rgb(224,227,45)" fg:x="4283" fg:w="1"/><text x="98.8231%" y="271.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="98.5731%" y="245" width="0.0230%" height="15" fill="rgb(229,198,43)" fg:x="4283" fg:w="1"/><text x="98.8231%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.02%)</title><rect x="98.5961%" y="309" width="0.0230%" height="15" fill="rgb(206,209,35)" fg:x="4284" fg:w="1"/><text x="98.8461%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.02%)</title><rect x="98.5961%" y="293" width="0.0230%" height="15" fill="rgb(245,195,53)" fg:x="4284" fg:w="1"/><text x="98.8461%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.02%)</title><rect x="98.5961%" y="277" width="0.0230%" height="15" fill="rgb(240,92,26)" fg:x="4284" fg:w="1"/><text x="98.8461%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.02%)</title><rect x="98.5961%" y="261" width="0.0230%" height="15" fill="rgb(207,40,23)" fg:x="4284" fg:w="1"/><text x="98.8461%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.02%)</title><rect x="98.5961%" y="245" width="0.0230%" height="15" fill="rgb(223,111,35)" fg:x="4284" fg:w="1"/><text x="98.8461%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.02%)</title><rect x="98.5961%" y="229" width="0.0230%" height="15" fill="rgb(229,147,28)" fg:x="4284" fg:w="1"/><text x="98.8461%" y="239.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (4 samples, 0.09%)</title><rect x="98.5501%" y="469" width="0.0921%" height="15" fill="rgb(211,29,28)" fg:x="4282" fg:w="4"/><text x="98.8001%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.09%)</title><rect x="98.5501%" y="453" width="0.0921%" height="15" fill="rgb(228,72,33)" fg:x="4282" fg:w="4"/><text x="98.8001%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (4 samples, 0.09%)</title><rect x="98.5501%" y="437" width="0.0921%" height="15" fill="rgb(205,214,31)" fg:x="4282" fg:w="4"/><text x="98.8001%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (3 samples, 0.07%)</title><rect x="98.5731%" y="421" width="0.0690%" height="15" fill="rgb(224,111,15)" fg:x="4283" fg:w="3"/><text x="98.8231%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.07%)</title><rect x="98.5731%" y="405" width="0.0690%" height="15" fill="rgb(253,21,26)" fg:x="4283" fg:w="3"/><text x="98.8231%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (3 samples, 0.07%)</title><rect x="98.5731%" y="389" width="0.0690%" height="15" fill="rgb(245,139,43)" fg:x="4283" fg:w="3"/><text x="98.8231%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (3 samples, 0.07%)</title><rect x="98.5731%" y="373" width="0.0690%" height="15" fill="rgb(252,170,7)" fg:x="4283" fg:w="3"/><text x="98.8231%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (2 samples, 0.05%)</title><rect x="98.5961%" y="357" width="0.0460%" height="15" fill="rgb(231,118,14)" fg:x="4284" fg:w="2"/><text x="98.8461%" y="367.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (2 samples, 0.05%)</title><rect x="98.5961%" y="341" width="0.0460%" height="15" fill="rgb(238,83,0)" fg:x="4284" fg:w="2"/><text x="98.8461%" y="351.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.05%)</title><rect x="98.5961%" y="325" width="0.0460%" height="15" fill="rgb(221,39,39)" fg:x="4284" fg:w="2"/><text x="98.8461%" y="335.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (1 samples, 0.02%)</title><rect x="98.6421%" y="469" width="0.0230%" height="15" fill="rgb(222,119,46)" fg:x="4286" fg:w="1"/><text x="98.8921%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1 samples, 0.02%)</title><rect x="98.6421%" y="453" width="0.0230%" height="15" fill="rgb(222,165,49)" fg:x="4286" fg:w="1"/><text x="98.8921%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.02%)</title><rect x="98.6421%" y="437" width="0.0230%" height="15" fill="rgb(219,113,52)" fg:x="4286" fg:w="1"/><text x="98.8921%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.02%)</title><rect x="98.6421%" y="421" width="0.0230%" height="15" fill="rgb(214,7,15)" fg:x="4286" fg:w="1"/><text x="98.8921%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.02%)</title><rect x="98.6421%" y="405" width="0.0230%" height="15" fill="rgb(235,32,4)" fg:x="4286" fg:w="1"/><text x="98.8921%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.02%)</title><rect x="98.6421%" y="389" width="0.0230%" height="15" fill="rgb(238,90,54)" fg:x="4286" fg:w="1"/><text x="98.8921%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="98.6421%" y="373" width="0.0230%" height="15" fill="rgb(213,208,19)" fg:x="4286" fg:w="1"/><text x="98.8921%" y="383.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.02%)</title><rect x="98.6421%" y="357" width="0.0230%" height="15" fill="rgb(233,156,4)" fg:x="4286" fg:w="1"/><text x="98.8921%" y="367.50"></text></g><g><title>wfc::wfc::fib_heap::FibHeap::insert_or_merge (8 samples, 0.18%)</title><rect x="98.5040%" y="485" width="0.1841%" height="15" fill="rgb(207,194,5)" fg:x="4280" fg:w="8"/><text x="98.7540%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;usize,alloc::rc::Rc&lt;core::cell::RefCell&lt;wfc::wfc::fib_heap::FibHeapNode&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="98.6881%" y="485" width="0.0230%" height="15" fill="rgb(206,111,30)" fg:x="4288" fg:w="1"/><text x="98.9381%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;usize,alloc::rc::Rc&lt;core::cell::RefCell&lt;wfc::wfc::fib_heap::FibHeapNode&gt;&gt;,std::collections::hash::map::RandomState&gt;&gt; (1 samples, 0.02%)</title><rect x="98.6881%" y="469" width="0.0230%" height="15" fill="rgb(243,70,54)" fg:x="4288" fg:w="1"/><text x="98.9381%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(usize,alloc::rc::Rc&lt;core::cell::RefCell&lt;wfc::wfc::fib_heap::FibHeapNode&gt;&gt;)&gt;&gt; (1 samples, 0.02%)</title><rect x="98.6881%" y="453" width="0.0230%" height="15" fill="rgb(242,28,8)" fg:x="4288" fg:w="1"/><text x="98.9381%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="98.6881%" y="437" width="0.0230%" height="15" fill="rgb(219,106,18)" fg:x="4288" fg:w="1"/><text x="98.9381%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (1 samples, 0.02%)</title><rect x="98.6881%" y="421" width="0.0230%" height="15" fill="rgb(244,222,10)" fg:x="4288" fg:w="1"/><text x="98.9381%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="98.6881%" y="405" width="0.0230%" height="15" fill="rgb(236,179,52)" fg:x="4288" fg:w="1"/><text x="98.9381%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::Ref&lt;wfc::wfc::fib_heap::FibHeapNode&gt;&gt; (1 samples, 0.02%)</title><rect x="98.7112%" y="485" width="0.0230%" height="15" fill="rgb(213,23,39)" fg:x="4289" fg:w="1"/><text x="98.9612%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (1 samples, 0.02%)</title><rect x="98.7112%" y="469" width="0.0230%" height="15" fill="rgb(238,48,10)" fg:x="4289" fg:w="1"/><text x="98.9612%" y="479.50"></text></g><g><title>&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="98.7112%" y="453" width="0.0230%" height="15" fill="rgb(251,196,23)" fg:x="4289" fg:w="1"/><text x="98.9612%" y="463.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.02%)</title><rect x="98.7112%" y="437" width="0.0230%" height="15" fill="rgb(250,152,24)" fg:x="4289" fg:w="1"/><text x="98.9612%" y="447.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.02%)</title><rect x="98.7112%" y="421" width="0.0230%" height="15" fill="rgb(209,150,17)" fg:x="4289" fg:w="1"/><text x="98.9612%" y="431.50"></text></g><g><title>core::mem::replace (1 samples, 0.02%)</title><rect x="98.7112%" y="405" width="0.0230%" height="15" fill="rgb(234,202,34)" fg:x="4289" fg:w="1"/><text x="98.9612%" y="415.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="98.7112%" y="389" width="0.0230%" height="15" fill="rgb(253,148,53)" fg:x="4289" fg:w="1"/><text x="98.9612%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;wfc::wfc::fib_heap::FibHeapNode&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="98.7342%" y="469" width="0.0230%" height="15" fill="rgb(218,129,16)" fg:x="4290" fg:w="1"/><text x="98.9842%" y="479.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="98.7342%" y="453" width="0.0230%" height="15" fill="rgb(216,85,19)" fg:x="4290" fg:w="1"/><text x="98.9842%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="98.7342%" y="437" width="0.0230%" height="15" fill="rgb(235,228,7)" fg:x="4290" fg:w="1"/><text x="98.9842%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="98.7342%" y="421" width="0.0230%" height="15" fill="rgb(245,175,0)" fg:x="4290" fg:w="1"/><text x="98.9842%" y="431.50"></text></g><g><title>free (1 samples, 0.02%)</title><rect x="98.7342%" y="405" width="0.0230%" height="15" fill="rgb(208,168,36)" fg:x="4290" fg:w="1"/><text x="98.9842%" y="415.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="98.7342%" y="389" width="0.0230%" height="15" fill="rgb(246,171,24)" fg:x="4290" fg:w="1"/><text x="98.9842%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;wfc::wfc::fib_heap::FibHeapNode&gt;&gt;&gt;&gt; (2 samples, 0.05%)</title><rect x="98.7342%" y="485" width="0.0460%" height="15" fill="rgb(215,142,24)" fg:x="4290" fg:w="2"/><text x="98.9842%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="98.7572%" y="469" width="0.0230%" height="15" fill="rgb(250,187,7)" fg:x="4291" fg:w="1"/><text x="99.0072%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::rc::Rc&lt;core::cell::RefCell&lt;wfc::wfc::fib_heap::FibHeapNode&gt;&gt;]&gt; (1 samples, 0.02%)</title><rect x="98.7572%" y="453" width="0.0230%" height="15" fill="rgb(228,66,33)" fg:x="4291" fg:w="1"/><text x="99.0072%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;wfc::wfc::fib_heap::FibHeapNode&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="98.7572%" y="437" width="0.0230%" height="15" fill="rgb(234,215,21)" fg:x="4291" fg:w="1"/><text x="99.0072%" y="447.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="98.7572%" y="421" width="0.0230%" height="15" fill="rgb(222,191,20)" fg:x="4291" fg:w="1"/><text x="99.0072%" y="431.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="98.7802%" y="309" width="0.0230%" height="15" fill="rgb(245,79,54)" fg:x="4292" fg:w="1"/><text x="99.0302%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.05%)</title><rect x="98.7802%" y="421" width="0.0460%" height="15" fill="rgb(240,10,37)" fg:x="4292" fg:w="2"/><text x="99.0302%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.05%)</title><rect x="98.7802%" y="405" width="0.0460%" height="15" fill="rgb(214,192,32)" fg:x="4292" fg:w="2"/><text x="99.0302%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.05%)</title><rect x="98.7802%" y="389" width="0.0460%" height="15" fill="rgb(209,36,54)" fg:x="4292" fg:w="2"/><text x="99.0302%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.05%)</title><rect x="98.7802%" y="373" width="0.0460%" height="15" fill="rgb(220,10,11)" fg:x="4292" fg:w="2"/><text x="99.0302%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.05%)</title><rect x="98.7802%" y="357" width="0.0460%" height="15" fill="rgb(221,106,17)" fg:x="4292" fg:w="2"/><text x="99.0302%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.05%)</title><rect x="98.7802%" y="341" width="0.0460%" height="15" fill="rgb(251,142,44)" fg:x="4292" fg:w="2"/><text x="99.0302%" y="351.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.05%)</title><rect x="98.7802%" y="325" width="0.0460%" height="15" fill="rgb(238,13,15)" fg:x="4292" fg:w="2"/><text x="99.0302%" y="335.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="98.8032%" y="309" width="0.0230%" height="15" fill="rgb(208,107,27)" fg:x="4293" fg:w="1"/><text x="99.0532%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.02%)</title><rect x="98.8032%" y="293" width="0.0230%" height="15" fill="rgb(205,136,37)" fg:x="4293" fg:w="1"/><text x="99.0532%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.07%)</title><rect x="98.7802%" y="485" width="0.0690%" height="15" fill="rgb(250,205,27)" fg:x="4292" fg:w="3"/><text x="99.0302%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.07%)</title><rect x="98.7802%" y="469" width="0.0690%" height="15" fill="rgb(210,80,43)" fg:x="4292" fg:w="3"/><text x="99.0302%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.07%)</title><rect x="98.7802%" y="453" width="0.0690%" height="15" fill="rgb(247,160,36)" fg:x="4292" fg:w="3"/><text x="99.0302%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3 samples, 0.07%)</title><rect x="98.7802%" y="437" width="0.0690%" height="15" fill="rgb(234,13,49)" fg:x="4292" fg:w="3"/><text x="99.0302%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="98.8262%" y="421" width="0.0230%" height="15" fill="rgb(234,122,0)" fg:x="4294" fg:w="1"/><text x="99.0762%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.02%)</title><rect x="98.8262%" y="405" width="0.0230%" height="15" fill="rgb(207,146,38)" fg:x="4294" fg:w="1"/><text x="99.0762%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="98.8262%" y="389" width="0.0230%" height="15" fill="rgb(207,177,25)" fg:x="4294" fg:w="1"/><text x="99.0762%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.02%)</title><rect x="98.8262%" y="373" width="0.0230%" height="15" fill="rgb(211,178,42)" fg:x="4294" fg:w="1"/><text x="99.0762%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.02%)</title><rect x="98.8262%" y="357" width="0.0230%" height="15" fill="rgb(230,69,54)" fg:x="4294" fg:w="1"/><text x="99.0762%" y="367.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="98.8493%" y="469" width="0.0230%" height="15" fill="rgb(214,135,41)" fg:x="4295" fg:w="1"/><text x="99.0993%" y="479.50"></text></g><g><title>wfc::wfc::fib_heap::FibHeap::consolidate (17 samples, 0.39%)</title><rect x="98.5040%" y="501" width="0.3913%" height="15" fill="rgb(237,67,25)" fg:x="4280" fg:w="17"/><text x="98.7540%" y="511.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.05%)</title><rect x="98.8493%" y="485" width="0.0460%" height="15" fill="rgb(222,189,50)" fg:x="4295" fg:w="2"/><text x="99.0993%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.02%)</title><rect x="98.8953%" y="437" width="0.0230%" height="15" fill="rgb(245,148,34)" fg:x="4297" fg:w="1"/><text x="99.1453%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.02%)</title><rect x="98.8953%" y="421" width="0.0230%" height="15" fill="rgb(222,29,6)" fg:x="4297" fg:w="1"/><text x="99.1453%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.02%)</title><rect x="98.8953%" y="405" width="0.0230%" height="15" fill="rgb(221,189,43)" fg:x="4297" fg:w="1"/><text x="99.1453%" y="415.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.02%)</title><rect x="98.8953%" y="389" width="0.0230%" height="15" fill="rgb(207,36,27)" fg:x="4297" fg:w="1"/><text x="99.1453%" y="399.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (V,U,T)&gt;::eq (1 samples, 0.02%)</title><rect x="98.8953%" y="373" width="0.0230%" height="15" fill="rgb(217,90,24)" fg:x="4297" fg:w="1"/><text x="99.1453%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (2 samples, 0.05%)</title><rect x="98.8953%" y="501" width="0.0460%" height="15" fill="rgb(224,66,35)" fg:x="4297" fg:w="2"/><text x="99.1453%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (2 samples, 0.05%)</title><rect x="98.8953%" y="485" width="0.0460%" height="15" fill="rgb(221,13,50)" fg:x="4297" fg:w="2"/><text x="99.1453%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (2 samples, 0.05%)</title><rect x="98.8953%" y="469" width="0.0460%" height="15" fill="rgb(236,68,49)" fg:x="4297" fg:w="2"/><text x="99.1453%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (2 samples, 0.05%)</title><rect x="98.8953%" y="453" width="0.0460%" height="15" fill="rgb(229,146,28)" fg:x="4297" fg:w="2"/><text x="99.1453%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;wfc::wfc::fib_heap::FibHeapNode&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="98.9413%" y="501" width="0.0230%" height="15" fill="rgb(225,31,38)" fg:x="4299" fg:w="1"/><text x="99.1913%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;wfc::wfc::fib_heap::FibHeapNode&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="98.9413%" y="485" width="0.0230%" height="15" fill="rgb(250,208,3)" fg:x="4299" fg:w="1"/><text x="99.1913%" y="495.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="98.9413%" y="469" width="0.0230%" height="15" fill="rgb(246,54,23)" fg:x="4299" fg:w="1"/><text x="99.1913%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;wfc::wfc::fib_heap::FibHeapNode&gt;&gt; (1 samples, 0.02%)</title><rect x="98.9413%" y="453" width="0.0230%" height="15" fill="rgb(243,76,11)" fg:x="4299" fg:w="1"/><text x="99.1913%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;wfc::wfc::fib_heap::FibHeapNode&gt;&gt; (1 samples, 0.02%)</title><rect x="98.9413%" y="437" width="0.0230%" height="15" fill="rgb(245,21,50)" fg:x="4299" fg:w="1"/><text x="99.1913%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;wfc::wfc::fib_heap::FibHeapNode&gt; (1 samples, 0.02%)</title><rect x="98.9413%" y="421" width="0.0230%" height="15" fill="rgb(228,9,43)" fg:x="4299" fg:w="1"/><text x="99.1913%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;wfc::wfc::fib_heap::FibHeapNode&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="98.9413%" y="405" width="0.0230%" height="15" fill="rgb(208,100,47)" fg:x="4299" fg:w="1"/><text x="99.1913%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;wfc::wfc::fib_heap::FibHeapNode&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="98.9413%" y="389" width="0.0230%" height="15" fill="rgb(232,26,8)" fg:x="4299" fg:w="1"/><text x="99.1913%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="98.9413%" y="373" width="0.0230%" height="15" fill="rgb(216,166,38)" fg:x="4299" fg:w="1"/><text x="99.1913%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="98.9413%" y="357" width="0.0230%" height="15" fill="rgb(251,202,51)" fg:x="4299" fg:w="1"/><text x="99.1913%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="98.9413%" y="341" width="0.0230%" height="15" fill="rgb(254,216,34)" fg:x="4299" fg:w="1"/><text x="99.1913%" y="351.50"></text></g><g><title>free (1 samples, 0.02%)</title><rect x="98.9413%" y="325" width="0.0230%" height="15" fill="rgb(251,32,27)" fg:x="4299" fg:w="1"/><text x="99.1913%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (1 samples, 0.02%)</title><rect x="98.9643%" y="501" width="0.0230%" height="15" fill="rgb(208,127,28)" fg:x="4300" fg:w="1"/><text x="99.2143%" y="511.50"></text></g><g><title>wfc::wfc::fib_heap::FibHeap::pop_min::{{closure}} (1 samples, 0.02%)</title><rect x="98.9643%" y="485" width="0.0230%" height="15" fill="rgb(224,137,22)" fg:x="4300" fg:w="1"/><text x="99.2143%" y="495.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (1 samples, 0.02%)</title><rect x="98.9643%" y="469" width="0.0230%" height="15" fill="rgb(254,70,32)" fg:x="4300" fg:w="1"/><text x="99.2143%" y="479.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (1 samples, 0.02%)</title><rect x="98.9643%" y="453" width="0.0230%" height="15" fill="rgb(229,75,37)" fg:x="4300" fg:w="1"/><text x="99.2143%" y="463.50"></text></g><g><title>core::cell::BorrowRef::new (1 samples, 0.02%)</title><rect x="98.9643%" y="437" width="0.0230%" height="15" fill="rgb(252,64,23)" fg:x="4300" fg:w="1"/><text x="99.2143%" y="447.50"></text></g><g><title>core::cell::is_reading (1 samples, 0.02%)</title><rect x="98.9643%" y="421" width="0.0230%" height="15" fill="rgb(232,162,48)" fg:x="4300" fg:w="1"/><text x="99.2143%" y="431.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.02%)</title><rect x="98.9873%" y="405" width="0.0230%" height="15" fill="rgb(246,160,12)" fg:x="4301" fg:w="1"/><text x="99.2373%" y="415.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.02%)</title><rect x="98.9873%" y="389" width="0.0230%" height="15" fill="rgb(247,166,0)" fg:x="4301" fg:w="1"/><text x="99.2373%" y="399.50"></text></g><g><title>core::mem::replace (1 samples, 0.02%)</title><rect x="98.9873%" y="373" width="0.0230%" height="15" fill="rgb(249,219,21)" fg:x="4301" fg:w="1"/><text x="99.2373%" y="383.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="98.9873%" y="357" width="0.0230%" height="15" fill="rgb(205,209,3)" fg:x="4301" fg:w="1"/><text x="99.2373%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.09%)</title><rect x="98.9873%" y="501" width="0.0921%" height="15" fill="rgb(243,44,1)" fg:x="4301" fg:w="4"/><text x="99.2373%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.09%)</title><rect x="98.9873%" y="485" width="0.0921%" height="15" fill="rgb(206,159,16)" fg:x="4301" fg:w="4"/><text x="99.2373%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.09%)</title><rect x="98.9873%" y="469" width="0.0921%" height="15" fill="rgb(244,77,30)" fg:x="4301" fg:w="4"/><text x="99.2373%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.09%)</title><rect x="98.9873%" y="453" width="0.0921%" height="15" fill="rgb(218,69,12)" fg:x="4301" fg:w="4"/><text x="99.2373%" y="463.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (4 samples, 0.09%)</title><rect x="98.9873%" y="437" width="0.0921%" height="15" fill="rgb(212,87,7)" fg:x="4301" fg:w="4"/><text x="99.2373%" y="447.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (4 samples, 0.09%)</title><rect x="98.9873%" y="421" width="0.0921%" height="15" fill="rgb(245,114,25)" fg:x="4301" fg:w="4"/><text x="99.2373%" y="431.50"></text></g><g><title>wfc::wfc::queueprop_bitarrayset_fibheap::QueuePropBitArraySetFibHeap::find_minimal (26 samples, 0.60%)</title><rect x="98.5040%" y="533" width="0.5984%" height="15" fill="rgb(210,61,42)" fg:x="4280" fg:w="26"/><text x="98.7540%" y="543.50"></text></g><g><title>wfc::wfc::fib_heap::FibHeap::pop_min (26 samples, 0.60%)</title><rect x="98.5040%" y="517" width="0.5984%" height="15" fill="rgb(211,52,33)" fg:x="4280" fg:w="26"/><text x="98.7540%" y="527.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="99.0794%" y="501" width="0.0230%" height="15" fill="rgb(234,58,33)" fg:x="4305" fg:w="1"/><text x="99.3294%" y="511.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (1 samples, 0.02%)</title><rect x="99.0794%" y="485" width="0.0230%" height="15" fill="rgb(220,115,36)" fg:x="4305" fg:w="1"/><text x="99.3294%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.02%)</title><rect x="99.1024%" y="453" width="0.0230%" height="15" fill="rgb(243,153,54)" fg:x="4306" fg:w="1"/><text x="99.3524%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="99.1024%" y="437" width="0.0230%" height="15" fill="rgb(251,47,18)" fg:x="4306" fg:w="1"/><text x="99.3524%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="99.1024%" y="421" width="0.0230%" height="15" fill="rgb(242,102,42)" fg:x="4306" fg:w="1"/><text x="99.3524%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="99.1024%" y="405" width="0.0230%" height="15" fill="rgb(234,31,38)" fg:x="4306" fg:w="1"/><text x="99.3524%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="99.1024%" y="389" width="0.0230%" height="15" fill="rgb(221,117,51)" fg:x="4306" fg:w="1"/><text x="99.3524%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="99.1024%" y="373" width="0.0230%" height="15" fill="rgb(212,20,18)" fg:x="4306" fg:w="1"/><text x="99.3524%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="99.1024%" y="357" width="0.0230%" height="15" fill="rgb(245,133,36)" fg:x="4306" fg:w="1"/><text x="99.3524%" y="367.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="99.1024%" y="341" width="0.0230%" height="15" fill="rgb(212,6,19)" fg:x="4306" fg:w="1"/><text x="99.3524%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (33 samples, 0.76%)</title><rect x="99.1254%" y="373" width="0.7595%" height="15" fill="rgb(218,1,36)" fg:x="4307" fg:w="33"/><text x="99.3754%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (33 samples, 0.76%)</title><rect x="99.1254%" y="357" width="0.7595%" height="15" fill="rgb(246,84,54)" fg:x="4307" fg:w="33"/><text x="99.3754%" y="367.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::items::{{closure}} (33 samples, 0.76%)</title><rect x="99.1254%" y="341" width="0.7595%" height="15" fill="rgb(242,110,6)" fg:x="4307" fg:w="33"/><text x="99.3754%" y="351.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::contains (33 samples, 0.76%)</title><rect x="99.1254%" y="325" width="0.7595%" height="15" fill="rgb(214,47,5)" fg:x="4307" fg:w="33"/><text x="99.3754%" y="335.50"></text></g><g><title>core::num::&lt;impl u128&gt;::pow (33 samples, 0.76%)</title><rect x="99.1254%" y="309" width="0.7595%" height="15" fill="rgb(218,159,25)" fg:x="4307" fg:w="33"/><text x="99.3754%" y="319.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.05%)</title><rect x="99.8849%" y="373" width="0.0460%" height="15" fill="rgb(215,211,28)" fg:x="4340" fg:w="2"/><text x="100.1349%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.05%)</title><rect x="99.8849%" y="357" width="0.0460%" height="15" fill="rgb(238,59,32)" fg:x="4340" fg:w="2"/><text x="100.1349%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::lt (2 samples, 0.05%)</title><rect x="99.8849%" y="341" width="0.0460%" height="15" fill="rgb(226,82,3)" fg:x="4340" fg:w="2"/><text x="100.1349%" y="351.50"></text></g><g><title>wfc::wfc::bits256_set::Bits256Set::items (38 samples, 0.87%)</title><rect x="99.1024%" y="533" width="0.8746%" height="15" fill="rgb(240,164,32)" fg:x="4306" fg:w="38"/><text x="99.3524%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (38 samples, 0.87%)</title><rect x="99.1024%" y="517" width="0.8746%" height="15" fill="rgb(232,46,7)" fg:x="4306" fg:w="38"/><text x="99.3524%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (38 samples, 0.87%)</title><rect x="99.1024%" y="501" width="0.8746%" height="15" fill="rgb(229,129,53)" fg:x="4306" fg:w="38"/><text x="99.3524%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (38 samples, 0.87%)</title><rect x="99.1024%" y="485" width="0.8746%" height="15" fill="rgb(234,188,29)" fg:x="4306" fg:w="38"/><text x="99.3524%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (38 samples, 0.87%)</title><rect x="99.1024%" y="469" width="0.8746%" height="15" fill="rgb(246,141,4)" fg:x="4306" fg:w="38"/><text x="99.3524%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (37 samples, 0.85%)</title><rect x="99.1254%" y="453" width="0.8516%" height="15" fill="rgb(229,23,39)" fg:x="4307" fg:w="37"/><text x="99.3754%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (37 samples, 0.85%)</title><rect x="99.1254%" y="437" width="0.8516%" height="15" fill="rgb(206,12,3)" fg:x="4307" fg:w="37"/><text x="99.3754%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.85%)</title><rect x="99.1254%" y="421" width="0.8516%" height="15" fill="rgb(252,226,20)" fg:x="4307" fg:w="37"/><text x="99.3754%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (37 samples, 0.85%)</title><rect x="99.1254%" y="405" width="0.8516%" height="15" fill="rgb(216,123,35)" fg:x="4307" fg:w="37"/><text x="99.3754%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (37 samples, 0.85%)</title><rect x="99.1254%" y="389" width="0.8516%" height="15" fill="rgb(212,68,40)" fg:x="4307" fg:w="37"/><text x="99.3754%" y="399.50"></text></g><g><title>all (4,345 samples, 100%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(254,125,32)" fg:x="0" fg:w="4345"/><text x="0.2500%" y="863.50"></text></g><g><title>queueprop_bitar (4,345 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(253,97,22)" fg:x="0" fg:w="4345"/><text x="0.2500%" y="847.50">queueprop_bitar</text></g><g><title>_start (4,345 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(241,101,14)" fg:x="0" fg:w="4345"/><text x="0.2500%" y="831.50">_start</text></g><g><title>__libc_start_main (4,345 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(238,103,29)" fg:x="0" fg:w="4345"/><text x="0.2500%" y="815.50">__libc_start_main</text></g><g><title>[libc.so.6] (4,345 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(233,195,47)" fg:x="0" fg:w="4345"/><text x="0.2500%" y="799.50">[libc.so.6]</text></g><g><title>main (4,345 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(246,218,30)" fg:x="0" fg:w="4345"/><text x="0.2500%" y="783.50">main</text></g><g><title>std::rt::lang_start_internal (4,345 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(219,145,47)" fg:x="0" fg:w="4345"/><text x="0.2500%" y="767.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (4,345 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(243,12,26)" fg:x="0" fg:w="4345"/><text x="0.2500%" y="751.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (4,345 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(214,87,16)" fg:x="0" fg:w="4345"/><text x="0.2500%" y="735.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (4,345 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(208,99,42)" fg:x="0" fg:w="4345"/><text x="0.2500%" y="719.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (4,345 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(253,99,2)" fg:x="0" fg:w="4345"/><text x="0.2500%" y="703.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (4,345 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(220,168,23)" fg:x="0" fg:w="4345"/><text x="0.2500%" y="687.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (4,345 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(242,38,24)" fg:x="0" fg:w="4345"/><text x="0.2500%" y="671.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (4,345 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(225,182,9)" fg:x="0" fg:w="4345"/><text x="0.2500%" y="655.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (4,345 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(243,178,37)" fg:x="0" fg:w="4345"/><text x="0.2500%" y="639.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (4,345 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(232,139,19)" fg:x="0" fg:w="4345"/><text x="0.2500%" y="623.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (4,345 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(225,201,24)" fg:x="0" fg:w="4345"/><text x="0.2500%" y="607.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (4,345 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(221,47,46)" fg:x="0" fg:w="4345"/><text x="0.2500%" y="591.50">core::ops::function::FnOnce::call_once</text></g><g><title>queueprop_bitarrayset_fibheap::main (4,345 samples, 100.00%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(249,23,13)" fg:x="0" fg:w="4345"/><text x="0.2500%" y="575.50">queueprop_bitarrayset_fibheap::main</text></g><g><title>&lt;wfc::wfc::queueprop_bitarrayset_fibheap::QueuePropBitArraySetFibHeap as wfc::wfc::traits::WFC&gt;::solve (4,271 samples, 98.30%)</title><rect x="1.7031%" y="549" width="98.2969%" height="15" fill="rgb(219,9,5)" fg:x="74" fg:w="4271"/><text x="1.9531%" y="559.50">&lt;wfc::wfc::queueprop_bitarrayset_fibheap::QueuePropBitArraySetFibHeap as wfc::wfc::traits::WFC&gt;::solve</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (1 samples, 0.02%)</title><rect x="99.9770%" y="533" width="0.0230%" height="15" fill="rgb(254,171,16)" fg:x="4344" fg:w="1"/><text x="100.2270%" y="543.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (1 samples, 0.02%)</title><rect x="99.9770%" y="517" width="0.0230%" height="15" fill="rgb(230,171,20)" fg:x="4344" fg:w="1"/><text x="100.2270%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.02%)</title><rect x="99.9770%" y="501" width="0.0230%" height="15" fill="rgb(210,71,41)" fg:x="4344" fg:w="1"/><text x="100.2270%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="99.9770%" y="485" width="0.0230%" height="15" fill="rgb(206,173,20)" fg:x="4344" fg:w="1"/><text x="100.2270%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="99.9770%" y="469" width="0.0230%" height="15" fill="rgb(233,88,34)" fg:x="4344" fg:w="1"/><text x="100.2270%" y="479.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="99.9770%" y="453" width="0.0230%" height="15" fill="rgb(223,209,46)" fg:x="4344" fg:w="1"/><text x="100.2270%" y="463.50"></text></g></svg></svg>